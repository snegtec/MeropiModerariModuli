
MeropeCentral.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000456  00800100  00003944  000039f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003944  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000329  00800556  00800556  00003e4e  2**0
                  ALLOC
  3 .eeprom       000001a5  00810000  00810000  00003e4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00001524  00000000  00000000  00003ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000006c0  00000000  00000000  00005518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      0000002f  00000000  00000000  00005bd8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000003e8  00000000  00000000  00005c07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000062b5  00000000  00000000  00005fef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000018a7  00000000  00000000  0000c2a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000021cb  00000000  00000000  0000db4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000c98  00000000  00000000  0000fd18  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000b2a  00000000  00000000  000109b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00004673  00000000  00000000  000114da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000003f8  00000000  00000000  00015b4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__vector_18>
      4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      58:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      5c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      60:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      64:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>

00000068 <__c.2144>:
      68:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf ef       	ldi	r28, 0xFF	; 255
      7a:	d8 e0       	ldi	r29, 0x08	; 8
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	15 e0       	ldi	r17, 0x05	; 5
      82:	a0 e0       	ldi	r26, 0x00	; 0
      84:	b1 e0       	ldi	r27, 0x01	; 1
      86:	e4 e4       	ldi	r30, 0x44	; 68
      88:	f9 e3       	ldi	r31, 0x39	; 57
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	a6 35       	cpi	r26, 0x56	; 86
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	28 e0       	ldi	r18, 0x08	; 8
      98:	a6 e5       	ldi	r26, 0x56	; 86
      9a:	b5 e0       	ldi	r27, 0x05	; 5
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	af 37       	cpi	r26, 0x7F	; 127
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 dd 14 	call	0x29ba	; 0x29ba <main>
      aa:	0c 94 a0 1c 	jmp	0x3940	; 0x3940 <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <parse_int>:

int parse_int(const char *vs, int16_t *i)
{
	// here should be %d; %i doesn't work because strings like "08" are treated like octals
	// so "08" is converted to 0.
	if (sscanf (vs, "%d", i) == 1)
      b2:	7f 93       	push	r23
      b4:	6f 93       	push	r22
      b6:	2d e0       	ldi	r18, 0x0D	; 13
      b8:	31 e0       	ldi	r19, 0x01	; 1
      ba:	3f 93       	push	r19
      bc:	2f 93       	push	r18
      be:	9f 93       	push	r25
      c0:	8f 93       	push	r24
      c2:	0e 94 57 16 	call	0x2cae	; 0x2cae <sscanf>
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	0f 90       	pop	r0
      cc:	0f 90       	pop	r0
      ce:	0f 90       	pop	r0
      d0:	0f 90       	pop	r0
      d2:	0f 90       	pop	r0
      d4:	0f 90       	pop	r0
      d6:	01 97       	sbiw	r24, 0x01	; 1
      d8:	11 f0       	breq	.+4      	; 0xde <parse_int+0x2c>
      da:	20 e0       	ldi	r18, 0x00	; 0
      dc:	30 e0       	ldi	r19, 0x00	; 0
		return 1;
	
	return 0;
}
      de:	82 2f       	mov	r24, r18
      e0:	93 2f       	mov	r25, r19
      e2:	08 95       	ret

000000e4 <util_rand2>:
/*
Random number in range: <min, max>
<0..255>
*/
int util_rand2(uint8_t min, uint8_t max)
{
      e4:	0f 93       	push	r16
      e6:	1f 93       	push	r17
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
	// max - min => 0..range
	int range = max - min;
      ec:	08 2f       	mov	r16, r24
      ee:	10 e0       	ldi	r17, 0x00	; 0
      f0:	c6 2f       	mov	r28, r22
      f2:	d0 e0       	ldi	r29, 0x00	; 0
      f4:	c0 1b       	sub	r28, r16
      f6:	d1 0b       	sbc	r29, r17
	
	uint8_t ri = rand();
      f8:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <rand>
      fc:	28 2f       	mov	r18, r24
	
	while (ri > range)
      fe:	99 27       	eor	r25, r25
     100:	c8 17       	cp	r28, r24
     102:	d9 07       	cpc	r29, r25
     104:	3c f4       	brge	.+14     	; 0x114 <util_rand2+0x30>
	ri = ri >> 2;
     106:	26 95       	lsr	r18
     108:	26 95       	lsr	r18
	// max - min => 0..range
	int range = max - min;
	
	uint8_t ri = rand();
	
	while (ri > range)
     10a:	82 2f       	mov	r24, r18
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	c8 17       	cp	r28, r24
     110:	d9 07       	cpc	r29, r25
     112:	cc f3       	brlt	.-14     	; 0x106 <util_rand2+0x22>
	ri = ri >> 2;
	
	return min + ri;
     114:	08 0f       	add	r16, r24
     116:	19 1f       	adc	r17, r25
}
     118:	80 2f       	mov	r24, r16
     11a:	91 2f       	mov	r25, r17
     11c:	df 91       	pop	r29
     11e:	cf 91       	pop	r28
     120:	1f 91       	pop	r17
     122:	0f 91       	pop	r16
     124:	08 95       	ret

00000126 <get_event_mode>:

uint8_t event_mode = EVENT_MODE;

uint8_t get_event_mode() {
	return event_mode;
}
     126:	80 91 56 05 	lds	r24, 0x0556
     12a:	08 95       	ret

0000012c <set_manual_mode>:

void set_manual_mode()
{
	event_mode = MANUAL_MODE;
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	80 93 56 05 	sts	0x0556, r24
     132:	08 95       	ret

00000134 <what_pin>:
	event_mode = EVENT_MODE;
	load_events();
}

int what_pin(char *value)
{
     134:	cf 93       	push	r28
     136:	df 93       	push	r29
     138:	ec 01       	movw	r28, r24
	if (strcmp(value, "EXP0") == 0)
     13a:	60 e1       	ldi	r22, 0x10	; 16
     13c:	71 e0       	ldi	r23, 0x01	; 1
     13e:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
     142:	28 2f       	mov	r18, r24
     144:	39 2f       	mov	r19, r25
     146:	23 2b       	or	r18, r19
     148:	09 f4       	brne	.+2      	; 0x14c <what_pin+0x18>
     14a:	42 c0       	rjmp	.+132    	; 0x1d0 <what_pin+0x9c>
	return EXP0_PC2;
	else if (strcmp(value, "EXP1") == 0)
     14c:	65 e1       	ldi	r22, 0x15	; 21
     14e:	71 e0       	ldi	r23, 0x01	; 1
     150:	ce 01       	movw	r24, r28
     152:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
     156:	28 2f       	mov	r18, r24
     158:	39 2f       	mov	r19, r25
     15a:	23 2b       	or	r18, r19
     15c:	e1 f1       	breq	.+120    	; 0x1d6 <what_pin+0xa2>
	return EXP1_PD4;
	else if (strcmp(value, "EXP2") == 0)
     15e:	6a e1       	ldi	r22, 0x1A	; 26
     160:	71 e0       	ldi	r23, 0x01	; 1
     162:	ce 01       	movw	r24, r28
     164:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
     168:	28 2f       	mov	r18, r24
     16a:	39 2f       	mov	r19, r25
     16c:	23 2b       	or	r18, r19
     16e:	b1 f1       	breq	.+108    	; 0x1dc <what_pin+0xa8>
	return EXP2_PD7;
	else if (strcmp(value, "EXP3") == 0)
     170:	6f e1       	ldi	r22, 0x1F	; 31
     172:	71 e0       	ldi	r23, 0x01	; 1
     174:	ce 01       	movw	r24, r28
     176:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
     17a:	28 2f       	mov	r18, r24
     17c:	39 2f       	mov	r19, r25
     17e:	23 2b       	or	r18, r19
     180:	81 f1       	breq	.+96     	; 0x1e2 <what_pin+0xae>
	return EXP3_PB0;
	else if (strcmp(value, "PWM0") == 0)
     182:	64 e2       	ldi	r22, 0x24	; 36
     184:	71 e0       	ldi	r23, 0x01	; 1
     186:	ce 01       	movw	r24, r28
     188:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
     18c:	28 2f       	mov	r18, r24
     18e:	39 2f       	mov	r19, r25
     190:	23 2b       	or	r18, r19
     192:	51 f1       	breq	.+84     	; 0x1e8 <what_pin+0xb4>
	return PWM0_PD6;
	else if (strcmp(value, "PWM1") == 0)
     194:	69 e2       	ldi	r22, 0x29	; 41
     196:	71 e0       	ldi	r23, 0x01	; 1
     198:	ce 01       	movw	r24, r28
     19a:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
     19e:	28 2f       	mov	r18, r24
     1a0:	39 2f       	mov	r19, r25
     1a2:	23 2b       	or	r18, r19
     1a4:	21 f1       	breq	.+72     	; 0x1ee <what_pin+0xba>
	return PWM1_PD5;
	else if (strcmp(value, "PWM2") == 0)
     1a6:	6e e2       	ldi	r22, 0x2E	; 46
     1a8:	71 e0       	ldi	r23, 0x01	; 1
     1aa:	ce 01       	movw	r24, r28
     1ac:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
     1b0:	28 2f       	mov	r18, r24
     1b2:	39 2f       	mov	r19, r25
     1b4:	23 2b       	or	r18, r19
     1b6:	f1 f0       	breq	.+60     	; 0x1f4 <what_pin+0xc0>
	return PWM2_PB1;
	else if (strcmp(value, "PWM3") == 0)
     1b8:	63 e3       	ldi	r22, 0x33	; 51
     1ba:	71 e0       	ldi	r23, 0x01	; 1
     1bc:	ce 01       	movw	r24, r28
     1be:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
     1c2:	28 2f       	mov	r18, r24
     1c4:	39 2f       	mov	r19, r25
     1c6:	23 2b       	or	r18, r19
     1c8:	c1 f4       	brne	.+48     	; 0x1fa <what_pin+0xc6>
	return PWM3_PD3;
     1ca:	23 e0       	ldi	r18, 0x03	; 3
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	17 c0       	rjmp	.+46     	; 0x1fe <what_pin+0xca>
}

int what_pin(char *value)
{
	if (strcmp(value, "EXP0") == 0)
	return EXP0_PC2;
     1d0:	24 e0       	ldi	r18, 0x04	; 4
     1d2:	30 e0       	ldi	r19, 0x00	; 0
     1d4:	14 c0       	rjmp	.+40     	; 0x1fe <what_pin+0xca>
	else if (strcmp(value, "EXP1") == 0)
	return EXP1_PD4;
     1d6:	25 e0       	ldi	r18, 0x05	; 5
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	11 c0       	rjmp	.+34     	; 0x1fe <what_pin+0xca>
	else if (strcmp(value, "EXP2") == 0)
	return EXP2_PD7;
     1dc:	26 e0       	ldi	r18, 0x06	; 6
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	0e c0       	rjmp	.+28     	; 0x1fe <what_pin+0xca>
	else if (strcmp(value, "EXP3") == 0)
	return EXP3_PB0;
     1e2:	27 e0       	ldi	r18, 0x07	; 7
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	0b c0       	rjmp	.+22     	; 0x1fe <what_pin+0xca>
	else if (strcmp(value, "PWM0") == 0)
	return PWM0_PD6;
     1e8:	20 e0       	ldi	r18, 0x00	; 0
     1ea:	30 e0       	ldi	r19, 0x00	; 0
     1ec:	08 c0       	rjmp	.+16     	; 0x1fe <what_pin+0xca>
	else if (strcmp(value, "PWM1") == 0)
	return PWM1_PD5;
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	05 c0       	rjmp	.+10     	; 0x1fe <what_pin+0xca>
	else if (strcmp(value, "PWM2") == 0)
	return PWM2_PB1;
     1f4:	22 e0       	ldi	r18, 0x02	; 2
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <what_pin+0xca>
	else if (strcmp(value, "PWM3") == 0)
	return PWM3_PD3;
	
	return -1;
     1fa:	2f ef       	ldi	r18, 0xFF	; 255
     1fc:	3f ef       	ldi	r19, 0xFF	; 255
}
     1fe:	82 2f       	mov	r24, r18
     200:	93 2f       	mov	r25, r19
     202:	df 91       	pop	r29
     204:	cf 91       	pop	r28
     206:	08 95       	ret

00000208 <add_event>:

void add_event(int pin, int32_t time, int pin_state)
{
     208:	cf 93       	push	r28
	// don't add if no space
	if (events_count >= EVENTS_SIZE - 1)
     20a:	30 91 0c 01 	lds	r19, 0x010C
     20e:	33 31       	cpi	r19, 0x13	; 19
     210:	08 f0       	brcs	.+2      	; 0x214 <add_event+0xc>
     212:	3f c0       	rjmp	.+126    	; 0x292 <add_event+0x8a>
		return;
	
	events[events_count].pin = pin;
     214:	a3 2f       	mov	r26, r19
     216:	b0 e0       	ldi	r27, 0x00	; 0
     218:	c5 e1       	ldi	r28, 0x15	; 21
     21a:	3c 9f       	mul	r19, r28
     21c:	f0 01       	movw	r30, r0
     21e:	11 24       	eor	r1, r1
     220:	e5 5a       	subi	r30, 0xA5	; 165
     222:	fa 4f       	sbci	r31, 0xFA	; 250
     224:	80 83       	st	Z, r24
	events[events_count].time = time;
     226:	41 83       	std	Z+1, r20	; 0x01
     228:	52 83       	std	Z+2, r21	; 0x02
     22a:	63 83       	std	Z+3, r22	; 0x03
     22c:	74 83       	std	Z+4, r23	; 0x04
	events[events_count].pin_state = pin_state;
     22e:	26 83       	std	Z+6, r18	; 0x06
	
	switch(pin)
     230:	99 23       	and	r25, r25
     232:	d4 f0       	brlt	.+52     	; 0x268 <add_event+0x60>
     234:	82 30       	cpi	r24, 0x02	; 2
     236:	91 05       	cpc	r25, r1
     238:	6c f0       	brlt	.+26     	; 0x254 <add_event+0x4c>
     23a:	04 97       	sbiw	r24, 0x04	; 4
     23c:	04 97       	sbiw	r24, 0x04	; 4
     23e:	a0 f4       	brcc	.+40     	; 0x268 <add_event+0x60>
	{
		case EXP0_PC2:
		case EXP1_PD4:
		case EXP2_PD7:
		case EXP3_PB0:
		events[events_count].type = EXP;
     240:	85 e1       	ldi	r24, 0x15	; 21
     242:	8a 9f       	mul	r24, r26
     244:	f0 01       	movw	r30, r0
     246:	8b 9f       	mul	r24, r27
     248:	f0 0d       	add	r31, r0
     24a:	11 24       	eor	r1, r1
     24c:	e5 5a       	subi	r30, 0xA5	; 165
     24e:	fa 4f       	sbci	r31, 0xFA	; 250
     250:	15 82       	std	Z+5, r1	; 0x05
		break;
     252:	0a c0       	rjmp	.+20     	; 0x268 <add_event+0x60>
		
		case PWM0_PD6:
		case PWM1_PD5:
		// not implemented yet case PWM2_PB1:
		// not implemented yet case PWM3_PD3:
		events[events_count].type = PWM;
     254:	85 e1       	ldi	r24, 0x15	; 21
     256:	8a 9f       	mul	r24, r26
     258:	f0 01       	movw	r30, r0
     25a:	8b 9f       	mul	r24, r27
     25c:	f0 0d       	add	r31, r0
     25e:	11 24       	eor	r1, r1
     260:	e5 5a       	subi	r30, 0xA5	; 165
     262:	fa 4f       	sbci	r31, 0xFA	; 250
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	85 83       	std	Z+5, r24	; 0x05
		break;
		
		default:break;
	}

	events_count++;
     268:	3f 5f       	subi	r19, 0xFF	; 255
     26a:	30 93 0c 01 	sts	0x010C, r19
	
	// save event to eeprom
	eeprom_busy_wait();
     26e:	f9 99       	sbic	0x1f, 1	; 31
     270:	fe cf       	rjmp	.-4      	; 0x26e <add_event+0x66>
	eeprom_write_block(&events, &events_ee, sizeof(struct Event) * EVENTS_SIZE);
     272:	44 ea       	ldi	r20, 0xA4	; 164
     274:	51 e0       	ldi	r21, 0x01	; 1
     276:	61 e0       	ldi	r22, 0x01	; 1
     278:	70 e0       	ldi	r23, 0x00	; 0
     27a:	8b e5       	ldi	r24, 0x5B	; 91
     27c:	95 e0       	ldi	r25, 0x05	; 5
     27e:	0e 94 40 1b 	call	0x3680	; 0x3680 <__eewr_block_m328p>
	
	// save count
	eeprom_busy_wait();
     282:	f9 99       	sbic	0x1f, 1	; 31
     284:	fe cf       	rjmp	.-4      	; 0x282 <add_event+0x7a>
	eeprom_write_byte(&events_count_ee, events_count);
     286:	60 91 0c 01 	lds	r22, 0x010C
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 4a 1b 	call	0x3694	; 0x3694 <__eewr_byte_m328p>
}
     292:	cf 91       	pop	r28
     294:	08 95       	ret

00000296 <add_pwm_event>:

/*
Duration in minutes
*/
void add_pwm_event(int pin, int32_t time, int pin_state, int inc, int duration)
{
     296:	ef 92       	push	r14
     298:	ff 92       	push	r15
     29a:	0f 93       	push	r16
	// don't add if no place
	if (events_count >= EVENTS_SIZE - 1)
     29c:	30 91 0c 01 	lds	r19, 0x010C
     2a0:	33 31       	cpi	r19, 0x13	; 19
     2a2:	90 f5       	brcc	.+100    	; 0x308 <add_pwm_event+0x72>
	return;
	
	events[events_count].pin = pin;
     2a4:	95 e1       	ldi	r25, 0x15	; 21
     2a6:	39 9f       	mul	r19, r25
     2a8:	f0 01       	movw	r30, r0
     2aa:	11 24       	eor	r1, r1
     2ac:	e5 5a       	subi	r30, 0xA5	; 165
     2ae:	fa 4f       	sbci	r31, 0xFA	; 250
     2b0:	80 83       	st	Z, r24
	events[events_count].time = time;
     2b2:	41 83       	std	Z+1, r20	; 0x01
     2b4:	52 83       	std	Z+2, r21	; 0x02
     2b6:	63 83       	std	Z+3, r22	; 0x03
     2b8:	74 83       	std	Z+4, r23	; 0x04
	events[events_count].pin_state = pin_state;
     2ba:	26 83       	std	Z+6, r18	; 0x06
	events[events_count].inc = inc;
     2bc:	03 87       	std	Z+11, r16	; 0x0b
	events[events_count].duration = duration * 60;
     2be:	2c e3       	ldi	r18, 0x3C	; 60
     2c0:	2e 9d       	mul	r18, r14
     2c2:	c0 01       	movw	r24, r0
     2c4:	2f 9d       	mul	r18, r15
     2c6:	90 0d       	add	r25, r0
     2c8:	11 24       	eor	r1, r1
     2ca:	aa 27       	eor	r26, r26
     2cc:	97 fd       	sbrc	r25, 7
     2ce:	a0 95       	com	r26
     2d0:	ba 2f       	mov	r27, r26
     2d2:	87 83       	std	Z+7, r24	; 0x07
     2d4:	90 87       	std	Z+8, r25	; 0x08
     2d6:	a1 87       	std	Z+9, r26	; 0x09
     2d8:	b2 87       	std	Z+10, r27	; 0x0a
	
	events[events_count].type = PWM;
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	85 83       	std	Z+5, r24	; 0x05
	
	events_count++;
     2de:	3f 5f       	subi	r19, 0xFF	; 255
     2e0:	30 93 0c 01 	sts	0x010C, r19
	
	// save event to eeprom
	eeprom_busy_wait();
     2e4:	f9 99       	sbic	0x1f, 1	; 31
     2e6:	fe cf       	rjmp	.-4      	; 0x2e4 <add_pwm_event+0x4e>
	eeprom_write_block(&events, &events_ee, sizeof(struct Event) * EVENTS_SIZE);
     2e8:	44 ea       	ldi	r20, 0xA4	; 164
     2ea:	51 e0       	ldi	r21, 0x01	; 1
     2ec:	61 e0       	ldi	r22, 0x01	; 1
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	8b e5       	ldi	r24, 0x5B	; 91
     2f2:	95 e0       	ldi	r25, 0x05	; 5
     2f4:	0e 94 40 1b 	call	0x3680	; 0x3680 <__eewr_block_m328p>
	
	// save count
	eeprom_busy_wait();
     2f8:	f9 99       	sbic	0x1f, 1	; 31
     2fa:	fe cf       	rjmp	.-4      	; 0x2f8 <add_pwm_event+0x62>
	eeprom_write_byte(&events_count_ee, events_count);
     2fc:	60 91 0c 01 	lds	r22, 0x010C
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 4a 1b 	call	0x3694	; 0x3694 <__eewr_byte_m328p>
}
     308:	0f 91       	pop	r16
     30a:	ff 90       	pop	r15
     30c:	ef 90       	pop	r14
     30e:	08 95       	ret

00000310 <add_clouds_event>:

/*
Duration in minutes
*/
void add_clouds_event(int pin, int32_t time, int pin_state, int duration, int final_state)
{
     310:	ef 92       	push	r14
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
	// don't add if no place
	if (events_count >= EVENTS_SIZE - 1)
     316:	30 91 0c 01 	lds	r19, 0x010C
     31a:	33 31       	cpi	r19, 0x13	; 19
     31c:	90 f5       	brcc	.+100    	; 0x382 <add_clouds_event+0x72>
	return;
	
	events[events_count].pin = pin;
     31e:	95 e1       	ldi	r25, 0x15	; 21
     320:	39 9f       	mul	r19, r25
     322:	f0 01       	movw	r30, r0
     324:	11 24       	eor	r1, r1
     326:	e5 5a       	subi	r30, 0xA5	; 165
     328:	fa 4f       	sbci	r31, 0xFA	; 250
     32a:	80 83       	st	Z, r24
	events[events_count].time = time;
     32c:	41 83       	std	Z+1, r20	; 0x01
     32e:	52 83       	std	Z+2, r21	; 0x02
     330:	63 83       	std	Z+3, r22	; 0x03
     332:	74 83       	std	Z+4, r23	; 0x04
	events[events_count].pin_state = pin_state;
     334:	26 83       	std	Z+6, r18	; 0x06
	events[events_count].duration = duration * 60; // convert to seconds
     336:	2c e3       	ldi	r18, 0x3C	; 60
     338:	20 9f       	mul	r18, r16
     33a:	c0 01       	movw	r24, r0
     33c:	21 9f       	mul	r18, r17
     33e:	90 0d       	add	r25, r0
     340:	11 24       	eor	r1, r1
     342:	aa 27       	eor	r26, r26
     344:	97 fd       	sbrc	r25, 7
     346:	a0 95       	com	r26
     348:	ba 2f       	mov	r27, r26
     34a:	87 83       	std	Z+7, r24	; 0x07
     34c:	90 87       	std	Z+8, r25	; 0x08
     34e:	a1 87       	std	Z+9, r26	; 0x09
     350:	b2 87       	std	Z+10, r27	; 0x0a
	events[events_count].final_state = final_state;
     352:	e4 8a       	std	Z+20, r14	; 0x14
	
	events[events_count].type = CLOUDS;
     354:	82 e0       	ldi	r24, 0x02	; 2
     356:	85 83       	std	Z+5, r24	; 0x05
	
	events_count++;
     358:	3f 5f       	subi	r19, 0xFF	; 255
     35a:	30 93 0c 01 	sts	0x010C, r19
	
	// save event to eeprom
	eeprom_busy_wait();
     35e:	f9 99       	sbic	0x1f, 1	; 31
     360:	fe cf       	rjmp	.-4      	; 0x35e <add_clouds_event+0x4e>
	eeprom_write_block(&events, &events_ee, sizeof(struct Event) * EVENTS_SIZE);
     362:	44 ea       	ldi	r20, 0xA4	; 164
     364:	51 e0       	ldi	r21, 0x01	; 1
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	8b e5       	ldi	r24, 0x5B	; 91
     36c:	95 e0       	ldi	r25, 0x05	; 5
     36e:	0e 94 40 1b 	call	0x3680	; 0x3680 <__eewr_block_m328p>
	
	// save count
	eeprom_busy_wait();
     372:	f9 99       	sbic	0x1f, 1	; 31
     374:	fe cf       	rjmp	.-4      	; 0x372 <add_clouds_event+0x62>
	eeprom_write_byte(&events_count_ee, events_count);
     376:	60 91 0c 01 	lds	r22, 0x010C
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 4a 1b 	call	0x3694	; 0x3694 <__eewr_byte_m328p>
}
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	ef 90       	pop	r14
     388:	08 95       	ret

0000038a <prepare_actual_events>:
/*
Search through events table and check are there any events for specified pin
if yes, change PIN_DISABLED => NO_EVENT_YET
*/
void prepare_actual_events()
{
     38a:	1f 93       	push	r17
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
	for (uint8_t a = 0; a < sizeof(actual_events); a++)
	{
		for (uint8_t i = 0; i < events_count; i++)
     390:	c0 91 0c 01 	lds	r28, 0x010C
		{
			if (a == events[i].pin)
     394:	d0 91 5b 05 	lds	r29, 0x055B
     398:	a4 e0       	ldi	r26, 0x04	; 4
     39a:	b1 e0       	ldi	r27, 0x01	; 1

/*
Search through events table and check are there any events for specified pin
if yes, change PIN_DISABLED => NO_EVENT_YET
*/
void prepare_actual_events()
     39c:	2c 2f       	mov	r18, r28
     39e:	21 50       	subi	r18, 0x01	; 1
     3a0:	85 e1       	ldi	r24, 0x15	; 21
     3a2:	28 9f       	mul	r18, r24
     3a4:	90 01       	movw	r18, r0
     3a6:	11 24       	eor	r1, r1
     3a8:	20 59       	subi	r18, 0x90	; 144
     3aa:	3a 4f       	sbci	r19, 0xFA	; 250
{
	for (uint8_t a = 0; a < sizeof(actual_events); a++)
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	40 e7       	ldi	r20, 0x70	; 112
     3b0:	55 e0       	ldi	r21, 0x05	; 5
		for (uint8_t i = 0; i < events_count; i++)
		{
			if (a == events[i].pin)
			{
				//change: PIN_DISABLED => NO_EVENT_YET
				actual_events[a] = NO_EVENT_YET;
     3b2:	1f ef       	ldi	r17, 0xFF	; 255
     3b4:	0f c0       	rjmp	.+30     	; 0x3d4 <prepare_actual_events+0x4a>
     3b6:	45 96       	adiw	r24, 0x15	; 21

/*
Search through events table and check are there any events for specified pin
if yes, change PIN_DISABLED => NO_EVENT_YET
*/
void prepare_actual_events()
     3b8:	fc 01       	movw	r30, r24
     3ba:	75 97       	sbiw	r30, 0x15	; 21
{
	for (uint8_t a = 0; a < sizeof(actual_events); a++)
	{
		for (uint8_t i = 0; i < events_count; i++)
		{
			if (a == events[i].pin)
     3bc:	60 81       	ld	r22, Z
     3be:	67 13       	cpse	r22, r23
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <prepare_actual_events+0x3c>
			{
				//change: PIN_DISABLED => NO_EVENT_YET
				actual_events[a] = NO_EVENT_YET;
     3c2:	1c 93       	st	X, r17
				break;
     3c4:	03 c0       	rjmp	.+6      	; 0x3cc <prepare_actual_events+0x42>
*/
void prepare_actual_events()
{
	for (uint8_t a = 0; a < sizeof(actual_events); a++)
	{
		for (uint8_t i = 0; i < events_count; i++)
     3c6:	82 17       	cp	r24, r18
     3c8:	93 07       	cpc	r25, r19
     3ca:	a9 f7       	brne	.-22     	; 0x3b6 <prepare_actual_events+0x2c>
Search through events table and check are there any events for specified pin
if yes, change PIN_DISABLED => NO_EVENT_YET
*/
void prepare_actual_events()
{
	for (uint8_t a = 0; a < sizeof(actual_events); a++)
     3cc:	7f 5f       	subi	r23, 0xFF	; 255
     3ce:	11 96       	adiw	r26, 0x01	; 1
     3d0:	78 30       	cpi	r23, 0x08	; 8
     3d2:	31 f0       	breq	.+12     	; 0x3e0 <prepare_actual_events+0x56>
	{
		for (uint8_t i = 0; i < events_count; i++)
     3d4:	cc 23       	and	r28, r28
     3d6:	d1 f3       	breq	.-12     	; 0x3cc <prepare_actual_events+0x42>
		{
			if (a == events[i].pin)
     3d8:	d7 17       	cp	r29, r23
     3da:	99 f3       	breq	.-26     	; 0x3c2 <prepare_actual_events+0x38>
     3dc:	ca 01       	movw	r24, r20
     3de:	f3 cf       	rjmp	.-26     	; 0x3c6 <prepare_actual_events+0x3c>
				actual_events[a] = NO_EVENT_YET;
				break;
			}
		}
	}
}
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	1f 91       	pop	r17
     3e6:	08 95       	ret

000003e8 <print_event>:
	eeprom_busy_wait();
	eeprom_write_byte(&events_count_ee, events_count);
}

void print_event(uint8_t event_number)
{
     3e8:	3f 92       	push	r3
     3ea:	4f 92       	push	r4
     3ec:	5f 92       	push	r5
     3ee:	6f 92       	push	r6
     3f0:	7f 92       	push	r7
     3f2:	8f 92       	push	r8
     3f4:	9f 92       	push	r9
     3f6:	af 92       	push	r10
     3f8:	bf 92       	push	r11
     3fa:	cf 92       	push	r12
     3fc:	df 92       	push	r13
     3fe:	ef 92       	push	r14
     400:	ff 92       	push	r15
     402:	0f 93       	push	r16
     404:	1f 93       	push	r17
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	6e 97       	sbiw	r28, 0x1e	; 30
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61
	struct Event event = events[event_number];
     41a:	25 e1       	ldi	r18, 0x15	; 21
     41c:	82 9f       	mul	r24, r18
     41e:	c0 01       	movw	r24, r0
     420:	11 24       	eor	r1, r1
     422:	fc 01       	movw	r30, r24
     424:	e5 5a       	subi	r30, 0xA5	; 165
     426:	fa 4f       	sbci	r31, 0xFA	; 250
     428:	c1 80       	ldd	r12, Z+1	; 0x01
     42a:	d2 80       	ldd	r13, Z+2	; 0x02
     42c:	e3 80       	ldd	r14, Z+3	; 0x03
     42e:	f4 80       	ldd	r15, Z+4	; 0x04
     430:	05 81       	ldd	r16, Z+5	; 0x05
     432:	36 80       	ldd	r3, Z+6	; 0x06
     434:	87 80       	ldd	r8, Z+7	; 0x07
     436:	90 84       	ldd	r9, Z+8	; 0x08
     438:	a1 84       	ldd	r10, Z+9	; 0x09
     43a:	b2 84       	ldd	r11, Z+10	; 0x0a
     43c:	13 85       	ldd	r17, Z+11	; 0x0b
     43e:	40 88       	ldd	r4, Z+16	; 0x10
     440:	51 88       	ldd	r5, Z+17	; 0x11
     442:	62 88       	ldd	r6, Z+18	; 0x12
     444:	73 88       	ldd	r7, Z+19	; 0x13
	
	// print pin
	switch (event.pin)
     446:	80 81       	ld	r24, Z
     448:	83 30       	cpi	r24, 0x03	; 3
     44a:	e1 f0       	breq	.+56     	; 0x484 <print_event+0x9c>
     44c:	20 f4       	brcc	.+8      	; 0x456 <print_event+0x6e>
     44e:	81 30       	cpi	r24, 0x01	; 1
     450:	79 f0       	breq	.+30     	; 0x470 <print_event+0x88>
     452:	98 f4       	brcc	.+38     	; 0x47a <print_event+0x92>
     454:	08 c0       	rjmp	.+16     	; 0x466 <print_event+0x7e>
     456:	85 30       	cpi	r24, 0x05	; 5
     458:	f9 f0       	breq	.+62     	; 0x498 <print_event+0xb0>
     45a:	c8 f0       	brcs	.+50     	; 0x48e <print_event+0xa6>
     45c:	86 30       	cpi	r24, 0x06	; 6
     45e:	09 f1       	breq	.+66     	; 0x4a2 <print_event+0xba>
     460:	87 30       	cpi	r24, 0x07	; 7
     462:	49 f5       	brne	.+82     	; 0x4b6 <print_event+0xce>
     464:	23 c0       	rjmp	.+70     	; 0x4ac <print_event+0xc4>
	{
		case PWM0_PD6:
		send_string(" PWM0_PD6 ");
     466:	88 e3       	ldi	r24, 0x38	; 56
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
		break;
     46e:	27 c0       	rjmp	.+78     	; 0x4be <print_event+0xd6>
		
		case PWM1_PD5:
		send_string(" PWM1_PD5 ");
     470:	83 e4       	ldi	r24, 0x43	; 67
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
		break;
     478:	22 c0       	rjmp	.+68     	; 0x4be <print_event+0xd6>
		
		case PWM2_PB1:
		send_string(" PWM2_PB1 ");
     47a:	8e e4       	ldi	r24, 0x4E	; 78
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
		break;
     482:	1d c0       	rjmp	.+58     	; 0x4be <print_event+0xd6>
		
		case PWM3_PD3:
		send_string(" PWM3_PD3 ");
     484:	89 e5       	ldi	r24, 0x59	; 89
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
		break;
     48c:	18 c0       	rjmp	.+48     	; 0x4be <print_event+0xd6>
		
		case EXP0_PC2:
		send_string(" EXP0_PC2 ");
     48e:	84 e6       	ldi	r24, 0x64	; 100
     490:	91 e0       	ldi	r25, 0x01	; 1
     492:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
		break;
     496:	13 c0       	rjmp	.+38     	; 0x4be <print_event+0xd6>
		
		case EXP1_PD4:
		send_string(" EXP1_PD4 ");
     498:	8f e6       	ldi	r24, 0x6F	; 111
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
		break;
     4a0:	0e c0       	rjmp	.+28     	; 0x4be <print_event+0xd6>
		
		case EXP2_PD7:
		send_string(" EXP2_PD7 ");
     4a2:	8a e7       	ldi	r24, 0x7A	; 122
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
		break;
     4aa:	09 c0       	rjmp	.+18     	; 0x4be <print_event+0xd6>
		
		case EXP3_PB0:
		send_string(" EXP3_PB0 ");
     4ac:	85 e8       	ldi	r24, 0x85	; 133
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
		break;
     4b4:	04 c0       	rjmp	.+8      	; 0x4be <print_event+0xd6>
		
		default:
		send_string(" unknown pin ");
     4b6:	80 e9       	ldi	r24, 0x90	; 144
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
		break;
	}
	
	if (event.type == EXP)
     4be:	01 11       	cpse	r16, r1
     4c0:	17 c0       	rjmp	.+46     	; 0x4f0 <print_event+0x108>
	send_string("EXP ");
     4c2:	8e e9       	ldi	r24, 0x9E	; 158
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	else if (event.type == CLOUDS)
	send_string("CLOUDS ");
	
	// event_time
	char formatted_date[30];
	timeToString(event.time, formatted_date);
     4ca:	ae 01       	movw	r20, r28
     4cc:	4f 5f       	subi	r20, 0xFF	; 255
     4ce:	5f 4f       	sbci	r21, 0xFF	; 255
     4d0:	c7 01       	movw	r24, r14
     4d2:	b6 01       	movw	r22, r12
     4d4:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <timeToString>
	send_string(formatted_date);
     4d8:	ce 01       	movw	r24, r28
     4da:	01 96       	adiw	r24, 0x01	; 1
     4dc:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	send_string(" ");
     4e0:	89 ea       	ldi	r24, 0xA9	; 169
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	
	if (event.type == EXP)
	{
		if (event.pin_state == 1)
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	38 12       	cpse	r3, r24
     4ec:	70 c0       	rjmp	.+224    	; 0x5ce <print_event+0x1e6>
     4ee:	6a c0       	rjmp	.+212    	; 0x5c4 <print_event+0x1dc>
		break;
	}
	
	if (event.type == EXP)
	send_string("EXP ");
	else if (event.type == PWM)
     4f0:	01 30       	cpi	r16, 0x01	; 1
     4f2:	89 f5       	brne	.+98     	; 0x556 <print_event+0x16e>
	send_string("PWM ");
     4f4:	83 ea       	ldi	r24, 0xA3	; 163
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	else if (event.type == CLOUDS)
	send_string("CLOUDS ");
	
	// event_time
	char formatted_date[30];
	timeToString(event.time, formatted_date);
     4fc:	ae 01       	movw	r20, r28
     4fe:	4f 5f       	subi	r20, 0xFF	; 255
     500:	5f 4f       	sbci	r21, 0xFF	; 255
     502:	c7 01       	movw	r24, r14
     504:	b6 01       	movw	r22, r12
     506:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <timeToString>
	send_string(formatted_date);
     50a:	ce 01       	movw	r24, r28
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	send_string(" ");
     512:	89 ea       	ldi	r24, 0xA9	; 169
     514:	91 e0       	ldi	r25, 0x01	; 1
     516:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
		// Note:
		// the current value is displayed in utils_pwm => set_pwm0() which is run in run_pwm().
		
		//TODO - it always shows 0%
		// it is because event=>pin_state is just the initial value not the current pin state!
		send_int(event.pin_state);
     51a:	63 2d       	mov	r22, r3
     51c:	77 27       	eor	r23, r23
     51e:	67 fd       	sbrc	r22, 7
     520:	70 95       	com	r23
     522:	87 2f       	mov	r24, r23
     524:	97 2f       	mov	r25, r23
     526:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <send_int>
		send_string("% ");
     52a:	88 ea       	ldi	r24, 0xA8	; 168
     52c:	91 e0       	ldi	r25, 0x01	; 1
     52e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
		
		if ((event.inc != 0) & (event.duration != 0))
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	81 14       	cp	r8, r1
     536:	91 04       	cpc	r9, r1
     538:	a1 04       	cpc	r10, r1
     53a:	b1 04       	cpc	r11, r1
     53c:	09 f4       	brne	.+2      	; 0x540 <print_event+0x158>
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	88 23       	and	r24, r24
     542:	09 f4       	brne	.+2      	; 0x546 <print_event+0x15e>
     544:	67 c0       	rjmp	.+206    	; 0x614 <print_event+0x22c>
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	11 11       	cpse	r17, r1
     54a:	01 c0       	rjmp	.+2      	; 0x54e <print_event+0x166>
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	88 23       	and	r24, r24
     550:	09 f4       	brne	.+2      	; 0x554 <print_event+0x16c>
     552:	60 c0       	rjmp	.+192    	; 0x614 <print_event+0x22c>
     554:	43 c0       	rjmp	.+134    	; 0x5dc <print_event+0x1f4>
	
	if (event.type == EXP)
	send_string("EXP ");
	else if (event.type == PWM)
	send_string("PWM ");
	else if (event.type == CLOUDS)
     556:	02 30       	cpi	r16, 0x02	; 2
     558:	09 f0       	breq	.+2      	; 0x55c <print_event+0x174>
     55a:	5f c0       	rjmp	.+190    	; 0x61a <print_event+0x232>
	send_string("CLOUDS ");
     55c:	8b ea       	ldi	r24, 0xAB	; 171
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	
	// event_time
	char formatted_date[30];
	timeToString(event.time, formatted_date);
     564:	ae 01       	movw	r20, r28
     566:	4f 5f       	subi	r20, 0xFF	; 255
     568:	5f 4f       	sbci	r21, 0xFF	; 255
     56a:	c7 01       	movw	r24, r14
     56c:	b6 01       	movw	r22, r12
     56e:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <timeToString>
	send_string(formatted_date);
     572:	ce 01       	movw	r24, r28
     574:	01 96       	adiw	r24, 0x01	; 1
     576:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	send_string(" ");
     57a:	89 ea       	ldi	r24, 0xA9	; 169
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
			send_string("[m] ");
		}
	}
	else if (event.type == CLOUDS)
	{
		send_int(event.pin_state);
     582:	63 2d       	mov	r22, r3
     584:	77 27       	eor	r23, r23
     586:	67 fd       	sbrc	r22, 7
     588:	70 95       	com	r23
     58a:	87 2f       	mov	r24, r23
     58c:	97 2f       	mov	r25, r23
     58e:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <send_int>
		send_string("% ");
     592:	88 ea       	ldi	r24, 0xA8	; 168
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
		
		send_int(event.inc);
     59a:	61 2f       	mov	r22, r17
     59c:	77 27       	eor	r23, r23
     59e:	67 fd       	sbrc	r22, 7
     5a0:	70 95       	com	r23
     5a2:	87 2f       	mov	r24, r23
     5a4:	97 2f       	mov	r25, r23
     5a6:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <send_int>
		send_string("%/");
     5aa:	83 eb       	ldi	r24, 0xB3	; 179
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
		send_int(event.temp_duration);
     5b2:	c3 01       	movw	r24, r6
     5b4:	b2 01       	movw	r22, r4
     5b6:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <send_int>
		send_string("[s] ");
     5ba:	86 eb       	ldi	r24, 0xB6	; 182
     5bc:	91 e0       	ldi	r25, 0x01	; 1
     5be:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
     5c2:	28 c0       	rjmp	.+80     	; 0x614 <print_event+0x22c>
	if (event.type == EXP)
	{
		if (event.pin_state == 1)
		{
			// simple event
			send_string("HIGH ");
     5c4:	8b eb       	ldi	r24, 0xBB	; 187
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
     5cc:	23 c0       	rjmp	.+70     	; 0x614 <print_event+0x22c>
			
		} else if (event.pin_state == 0)
     5ce:	31 10       	cpse	r3, r1
     5d0:	21 c0       	rjmp	.+66     	; 0x614 <print_event+0x22c>
		{
			send_string("LOW ");
     5d2:	81 ec       	ldi	r24, 0xC1	; 193
     5d4:	91 e0       	ldi	r25, 0x01	; 1
     5d6:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
     5da:	1c c0       	rjmp	.+56     	; 0x614 <print_event+0x22c>
		send_int(event.pin_state);
		send_string("% ");
		
		if ((event.inc != 0) & (event.duration != 0))
		{
			send_int(event.inc);
     5dc:	61 2f       	mov	r22, r17
     5de:	77 27       	eor	r23, r23
     5e0:	67 fd       	sbrc	r22, 7
     5e2:	70 95       	com	r23
     5e4:	87 2f       	mov	r24, r23
     5e6:	97 2f       	mov	r25, r23
     5e8:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <send_int>
			send_string("%/");
     5ec:	83 eb       	ldi	r24, 0xB3	; 179
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
			send_int(event.duration / 60);
     5f4:	c5 01       	movw	r24, r10
     5f6:	b4 01       	movw	r22, r8
     5f8:	2c e3       	ldi	r18, 0x3C	; 60
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	40 e0       	ldi	r20, 0x00	; 0
     5fe:	50 e0       	ldi	r21, 0x00	; 0
     600:	0e 94 12 15 	call	0x2a24	; 0x2a24 <__divmodsi4>
     604:	ca 01       	movw	r24, r20
     606:	b9 01       	movw	r22, r18
     608:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <send_int>
			send_string("[m] ");
     60c:	86 ec       	ldi	r24, 0xC6	; 198
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
		send_string("%/");
		send_int(event.temp_duration);
		send_string("[s] ");
	}
	
	send_enter();
     614:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <send_enter>
     618:	10 c0       	rjmp	.+32     	; 0x63a <print_event+0x252>
	else if (event.type == CLOUDS)
	send_string("CLOUDS ");
	
	// event_time
	char formatted_date[30];
	timeToString(event.time, formatted_date);
     61a:	ae 01       	movw	r20, r28
     61c:	4f 5f       	subi	r20, 0xFF	; 255
     61e:	5f 4f       	sbci	r21, 0xFF	; 255
     620:	c7 01       	movw	r24, r14
     622:	b6 01       	movw	r22, r12
     624:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <timeToString>
	send_string(formatted_date);
     628:	ce 01       	movw	r24, r28
     62a:	01 96       	adiw	r24, 0x01	; 1
     62c:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	send_string(" ");
     630:	89 ea       	ldi	r24, 0xA9	; 169
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
     638:	ed cf       	rjmp	.-38     	; 0x614 <print_event+0x22c>
		send_int(event.temp_duration);
		send_string("[s] ");
	}
	
	send_enter();
}
     63a:	6e 96       	adiw	r28, 0x1e	; 30
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	de bf       	out	0x3e, r29	; 62
     642:	0f be       	out	0x3f, r0	; 63
     644:	cd bf       	out	0x3d, r28	; 61
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	0f 91       	pop	r16
     64e:	ff 90       	pop	r15
     650:	ef 90       	pop	r14
     652:	df 90       	pop	r13
     654:	cf 90       	pop	r12
     656:	bf 90       	pop	r11
     658:	af 90       	pop	r10
     65a:	9f 90       	pop	r9
     65c:	8f 90       	pop	r8
     65e:	7f 90       	pop	r7
     660:	6f 90       	pop	r6
     662:	5f 90       	pop	r5
     664:	4f 90       	pop	r4
     666:	3f 90       	pop	r3
     668:	08 95       	ret

0000066a <print_events>:


void print_events()
{
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	cd b7       	in	r28, 0x3d	; 61
     674:	de b7       	in	r29, 0x3e	; 62
     676:	6e 97       	sbiw	r28, 0x1e	; 30
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
	char ts[30];
	
	send_string("Number of events: ");
     682:	8b ec       	ldi	r24, 0xCB	; 203
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	sprintf(ts, "%d", events_count);
     68a:	80 91 0c 01 	lds	r24, 0x010C
     68e:	1f 92       	push	r1
     690:	8f 93       	push	r24
     692:	8d e0       	ldi	r24, 0x0D	; 13
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	9f 93       	push	r25
     698:	8f 93       	push	r24
     69a:	8e 01       	movw	r16, r28
     69c:	0f 5f       	subi	r16, 0xFF	; 255
     69e:	1f 4f       	sbci	r17, 0xFF	; 255
     6a0:	1f 93       	push	r17
     6a2:	0f 93       	push	r16
     6a4:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <sprintf>
	send_string(ts);
     6a8:	c8 01       	movw	r24, r16
     6aa:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	send_enter();
     6ae:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <send_enter>
	
	for (uint8_t i = 0; i < events_count; i++)
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	80 91 0c 01 	lds	r24, 0x010C
     6c2:	88 23       	and	r24, r24
     6c4:	49 f0       	breq	.+18     	; 0x6d8 <print_events+0x6e>
     6c6:	10 e0       	ldi	r17, 0x00	; 0
	{
		print_event(i);
     6c8:	81 2f       	mov	r24, r17
     6ca:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <print_event>
	send_string("Number of events: ");
	sprintf(ts, "%d", events_count);
	send_string(ts);
	send_enter();
	
	for (uint8_t i = 0; i < events_count; i++)
     6ce:	1f 5f       	subi	r17, 0xFF	; 255
     6d0:	80 91 0c 01 	lds	r24, 0x010C
     6d4:	18 17       	cp	r17, r24
     6d6:	c0 f3       	brcs	.-16     	; 0x6c8 <print_events+0x5e>
	{
		print_event(i);
	}
	
}
     6d8:	6e 96       	adiw	r28, 0x1e	; 30
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	de bf       	out	0x3e, r29	; 62
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	cd bf       	out	0x3d, r28	; 61
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	0f 91       	pop	r16
     6ec:	08 95       	ret

000006ee <clear_events>:


void clear_events()
{
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
	events_count = 0;
     6f2:	10 92 0c 01 	sts	0x010C, r1
     6f6:	eb e5       	ldi	r30, 0x5B	; 91
     6f8:	f5 e0       	ldi	r31, 0x05	; 5
     6fa:	a6 e6       	ldi	r26, 0x66	; 102
     6fc:	b5 e0       	ldi	r27, 0x05	; 5
	}
	
}


void clear_events()
     6fe:	8f ef       	ldi	r24, 0xFF	; 255
     700:	96 e0       	ldi	r25, 0x06	; 6
	events_count = 0;
	
	// clear all data
	for (int i = 0; i < EVENTS_SIZE; i++)
	{
		events[i].pin = -1;
     702:	2f ef       	ldi	r18, 0xFF	; 255
     704:	20 83       	st	Z, r18
		events[i].time = 0;
     706:	11 82       	std	Z+1, r1	; 0x01
     708:	12 82       	std	Z+2, r1	; 0x02
     70a:	13 82       	std	Z+3, r1	; 0x03
     70c:	14 82       	std	Z+4, r1	; 0x04
	}
	
}


void clear_events()
     70e:	ed 01       	movw	r28, r26
     710:	25 97       	sbiw	r28, 0x05	; 5
	// clear all data
	for (int i = 0; i < EVENTS_SIZE; i++)
	{
		events[i].pin = -1;
		events[i].time = 0;
		events[i].pin_state = 0;
     712:	18 82       	st	Y, r1
		events[i].inc = 0;
     714:	1c 92       	st	X, r1
		events[i].duration = 0;
     716:	17 82       	std	Z+7, r1	; 0x07
     718:	10 86       	std	Z+8, r1	; 0x08
     71a:	11 86       	std	Z+9, r1	; 0x09
     71c:	12 86       	std	Z+10, r1	; 0x0a
	}
	
}


void clear_events()
     71e:	ed 01       	movw	r28, r26
     720:	26 97       	sbiw	r28, 0x06	; 6
		events[i].pin = -1;
		events[i].time = 0;
		events[i].pin_state = 0;
		events[i].inc = 0;
		events[i].duration = 0;
		events[i].type = 0;
     722:	18 82       	st	Y, r1
     724:	75 96       	adiw	r30, 0x15	; 21
     726:	55 96       	adiw	r26, 0x15	; 21
void clear_events()
{
	events_count = 0;
	
	// clear all data
	for (int i = 0; i < EVENTS_SIZE; i++)
     728:	e8 17       	cp	r30, r24
     72a:	f9 07       	cpc	r31, r25
     72c:	59 f7       	brne	.-42     	; 0x704 <clear_events+0x16>
		events[i].type = 0;
		
	}
	
	// save event to eeprom
	eeprom_busy_wait();
     72e:	f9 99       	sbic	0x1f, 1	; 31
     730:	fe cf       	rjmp	.-4      	; 0x72e <clear_events+0x40>
	eeprom_write_block(&events, &events_ee, sizeof(struct Event) * EVENTS_SIZE);
     732:	44 ea       	ldi	r20, 0xA4	; 164
     734:	51 e0       	ldi	r21, 0x01	; 1
     736:	61 e0       	ldi	r22, 0x01	; 1
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	8b e5       	ldi	r24, 0x5B	; 91
     73c:	95 e0       	ldi	r25, 0x05	; 5
     73e:	0e 94 40 1b 	call	0x3680	; 0x3680 <__eewr_block_m328p>
	
	// save count
	eeprom_busy_wait();
     742:	f9 99       	sbic	0x1f, 1	; 31
     744:	fe cf       	rjmp	.-4      	; 0x742 <clear_events+0x54>
	eeprom_write_byte(&events_count_ee, events_count);
     746:	60 91 0c 01 	lds	r22, 0x010C
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 4a 1b 	call	0x3694	; 0x3694 <__eewr_byte_m328p>
	
	event_mode = MANUAL_MODE;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	80 93 56 05 	sts	0x0556, r24
}
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	08 95       	ret

0000075e <run_pwm>:

void run_pwm(uint8_t pin, struct Event *event)
{
     75e:	8f 92       	push	r8
     760:	9f 92       	push	r9
     762:	af 92       	push	r10
     764:	bf 92       	push	r11
     766:	cf 92       	push	r12
     768:	df 92       	push	r13
     76a:	ef 92       	push	r14
     76c:	ff 92       	push	r15
     76e:	1f 93       	push	r17
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	18 2f       	mov	r17, r24
     776:	eb 01       	movw	r28, r22
	int32_t time = current_time();
     778:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <current_time>
     77c:	c6 2e       	mov	r12, r22
     77e:	d7 2e       	mov	r13, r23
     780:	e8 2e       	mov	r14, r24
     782:	f9 2e       	mov	r15, r25
	
	if (pin == PWM0_PD6)
     784:	11 11       	cpse	r17, r1
     786:	e8 c0       	rjmp	.+464    	; 0x958 <__stack+0x59>
	{
		if (event->type == CLOUDS)
     788:	8d 81       	ldd	r24, Y+5	; 0x05
     78a:	82 30       	cpi	r24, 0x02	; 2
     78c:	09 f0       	breq	.+2      	; 0x790 <run_pwm+0x32>
     78e:	a7 c0       	rjmp	.+334    	; 0x8de <run_pwm+0x180>
		{
			//***
			// CLOUDS mode
			
			int32_t subevent_passed_time = time - event->temp_time;
     790:	8c 85       	ldd	r24, Y+12	; 0x0c
     792:	9d 85       	ldd	r25, Y+13	; 0x0d
     794:	ae 85       	ldd	r26, Y+14	; 0x0e
     796:	bf 85       	ldd	r27, Y+15	; 0x0f
     798:	46 01       	movw	r8, r12
     79a:	57 01       	movw	r10, r14
     79c:	88 1a       	sub	r8, r24
     79e:	99 0a       	sbc	r9, r25
     7a0:	aa 0a       	sbc	r10, r26
     7a2:	bb 0a       	sbc	r11, r27
			
			// new cloud: if no cloud before (new event) or passed time of last cloud
			if ((event->temp_duration == 0) | (subevent_passed_time > event->temp_duration))
     7a4:	88 89       	ldd	r24, Y+16	; 0x10
     7a6:	99 89       	ldd	r25, Y+17	; 0x11
     7a8:	aa 89       	ldd	r26, Y+18	; 0x12
     7aa:	bb 89       	ldd	r27, Y+19	; 0x13
     7ac:	31 e0       	ldi	r19, 0x01	; 1
     7ae:	00 97       	sbiw	r24, 0x00	; 0
     7b0:	a1 05       	cpc	r26, r1
     7b2:	b1 05       	cpc	r27, r1
     7b4:	09 f0       	breq	.+2      	; 0x7b8 <run_pwm+0x5a>
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	21 e0       	ldi	r18, 0x01	; 1
     7ba:	88 15       	cp	r24, r8
     7bc:	99 05       	cpc	r25, r9
     7be:	aa 05       	cpc	r26, r10
     7c0:	bb 05       	cpc	r27, r11
     7c2:	0c f0       	brlt	.+2      	; 0x7c6 <run_pwm+0x68>
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	21 11       	cpse	r18, r1
     7c8:	03 c0       	rjmp	.+6      	; 0x7d0 <run_pwm+0x72>
     7ca:	33 23       	and	r19, r19
     7cc:	09 f4       	brne	.+2      	; 0x7d0 <run_pwm+0x72>
     7ce:	5a c0       	rjmp	.+180    	; 0x884 <run_pwm+0x126>
			{
				
				if (subevent_passed_time > event->temp_duration)
     7d0:	22 23       	and	r18, r18
     7d2:	79 f0       	breq	.+30     	; 0x7f2 <run_pwm+0x94>
				{
					if (event->temp_duration == 0)
     7d4:	33 23       	and	r19, r19
     7d6:	29 f0       	breq	.+10     	; 0x7e2 <run_pwm+0x84>
					send_string("new cloud - beginning ");
     7d8:	8e ed       	ldi	r24, 0xDE	; 222
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
     7e0:	04 c0       	rjmp	.+8      	; 0x7ea <run_pwm+0x8c>
					else
					send_string("new cloud ");
     7e2:	85 ef       	ldi	r24, 0xF5	; 245
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
					
					// start value for new subevent
					event->pin_state = event->pin_state + event->inc;
     7ea:	9e 81       	ldd	r25, Y+6	; 0x06
     7ec:	8b 85       	ldd	r24, Y+11	; 0x0b
     7ee:	89 0f       	add	r24, r25
     7f0:	8e 83       	std	Y+6, r24	; 0x06
				}
				
				// start time for subevent
				event->temp_time = time;
     7f2:	cc 86       	std	Y+12, r12	; 0x0c
     7f4:	dd 86       	std	Y+13, r13	; 0x0d
     7f6:	ee 86       	std	Y+14, r14	; 0x0e
     7f8:	ff 86       	std	Y+15, r15	; 0x0f
				
				// if last cloud
				int32_t margin = 200; // 200 seconds before end of the duration of CLOUDS event
				if (((event->time + event->duration) - time) <= margin)
     7fa:	49 81       	ldd	r20, Y+1	; 0x01
     7fc:	5a 81       	ldd	r21, Y+2	; 0x02
     7fe:	6b 81       	ldd	r22, Y+3	; 0x03
     800:	7c 81       	ldd	r23, Y+4	; 0x04
     802:	8f 81       	ldd	r24, Y+7	; 0x07
     804:	98 85       	ldd	r25, Y+8	; 0x08
     806:	a9 85       	ldd	r26, Y+9	; 0x09
     808:	ba 85       	ldd	r27, Y+10	; 0x0a
     80a:	84 0f       	add	r24, r20
     80c:	95 1f       	adc	r25, r21
     80e:	a6 1f       	adc	r26, r22
     810:	b7 1f       	adc	r27, r23
     812:	8c 19       	sub	r24, r12
     814:	9d 09       	sbc	r25, r13
     816:	ae 09       	sbc	r26, r14
     818:	bf 09       	sbc	r27, r15
     81a:	89 3c       	cpi	r24, 0xC9	; 201
     81c:	91 05       	cpc	r25, r1
     81e:	a1 05       	cpc	r26, r1
     820:	b1 05       	cpc	r27, r1
     822:	ec f4       	brge	.+58     	; 0x85e <run_pwm+0x100>
				{
					// last cloud
					send_string("last cloud ");
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	92 e0       	ldi	r25, 0x02	; 2
     828:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
					
					event->temp_duration = (event->time + event->duration) - time;
     82c:	49 81       	ldd	r20, Y+1	; 0x01
     82e:	5a 81       	ldd	r21, Y+2	; 0x02
     830:	6b 81       	ldd	r22, Y+3	; 0x03
     832:	7c 81       	ldd	r23, Y+4	; 0x04
     834:	8f 81       	ldd	r24, Y+7	; 0x07
     836:	98 85       	ldd	r25, Y+8	; 0x08
     838:	a9 85       	ldd	r26, Y+9	; 0x09
     83a:	ba 85       	ldd	r27, Y+10	; 0x0a
     83c:	84 0f       	add	r24, r20
     83e:	95 1f       	adc	r25, r21
     840:	a6 1f       	adc	r26, r22
     842:	b7 1f       	adc	r27, r23
     844:	8c 19       	sub	r24, r12
     846:	9d 09       	sbc	r25, r13
     848:	ae 09       	sbc	r26, r14
     84a:	bf 09       	sbc	r27, r15
     84c:	88 8b       	std	Y+16, r24	; 0x10
     84e:	99 8b       	std	Y+17, r25	; 0x11
     850:	aa 8b       	std	Y+18, r26	; 0x12
     852:	bb 8b       	std	Y+19, r27	; 0x13
					
					// final pin_state
					event->inc = event->final_state - event->pin_state;
     854:	8c 89       	ldd	r24, Y+20	; 0x14
     856:	9e 81       	ldd	r25, Y+6	; 0x06
     858:	89 1b       	sub	r24, r25
     85a:	8b 87       	std	Y+11, r24	; 0x0b
     85c:	13 c0       	rjmp	.+38     	; 0x884 <run_pwm+0x126>
				}
				else
				{
					event->temp_duration = util_rand2(10, margin);
     85e:	68 ec       	ldi	r22, 0xC8	; 200
     860:	8a e0       	ldi	r24, 0x0A	; 10
     862:	0e 94 72 00 	call	0xe4	; 0xe4 <util_rand2>
     866:	aa 27       	eor	r26, r26
     868:	97 fd       	sbrc	r25, 7
     86a:	a0 95       	com	r26
     86c:	ba 2f       	mov	r27, r26
     86e:	88 8b       	std	Y+16, r24	; 0x10
     870:	99 8b       	std	Y+17, r25	; 0x11
     872:	aa 8b       	std	Y+18, r26	; 0x12
     874:	bb 8b       	std	Y+19, r27	; 0x13
					
					// range of changes: 70..100%
					int new_state = util_rand2(70, 100);
     876:	64 e6       	ldi	r22, 0x64	; 100
     878:	86 e4       	ldi	r24, 0x46	; 70
     87a:	0e 94 72 00 	call	0xe4	; 0xe4 <util_rand2>
					
					event->inc = new_state - event->pin_state;
     87e:	9e 81       	ldd	r25, Y+6	; 0x06
     880:	89 1b       	sub	r24, r25
     882:	8b 87       	std	Y+11, r24	; 0x0b
				}
			}
			
			// start value
			// convert % => 0..255
			uint8_t ti = (event->pin_state * 255) / 100;
     884:	2e 81       	ldd	r18, Y+6	; 0x06
     886:	4f ef       	ldi	r20, 0xFF	; 255
     888:	24 03       	mulsu	r18, r20
     88a:	c0 01       	movw	r24, r0
     88c:	11 24       	eor	r1, r1
     88e:	24 e6       	ldi	r18, 0x64	; 100
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	b9 01       	movw	r22, r18
     894:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__divmodhi4>
     898:	16 2f       	mov	r17, r22
			
			// increment/decrement value
			// convert % => 0..255
			int16_t tinc = (event->inc * 255) / 100;
     89a:	5b 85       	ldd	r21, Y+11	; 0x0b
     89c:	54 03       	mulsu	r21, r20
     89e:	c0 01       	movw	r24, r0
     8a0:	11 24       	eor	r1, r1
     8a2:	b9 01       	movw	r22, r18
     8a4:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__divmodhi4>
			
			if (subevent_passed_time <= event->temp_duration)
     8a8:	c8 88       	ldd	r12, Y+16	; 0x10
     8aa:	d9 88       	ldd	r13, Y+17	; 0x11
     8ac:	ea 88       	ldd	r14, Y+18	; 0x12
     8ae:	fb 88       	ldd	r15, Y+19	; 0x13
     8b0:	c8 14       	cp	r12, r8
     8b2:	d9 04       	cpc	r13, r9
     8b4:	ea 04       	cpc	r14, r10
     8b6:	fb 04       	cpc	r15, r11
     8b8:	6c f0       	brlt	.+26     	; 0x8d4 <run_pwm+0x176>
			{
				ti = ti + ((int32_t) tinc * subevent_passed_time) / event->temp_duration;
     8ba:	a6 2f       	mov	r26, r22
     8bc:	b7 2f       	mov	r27, r23
     8be:	a5 01       	movw	r20, r10
     8c0:	94 01       	movw	r18, r8
     8c2:	0e 94 41 15 	call	0x2a82	; 0x2a82 <__mulshisi3>
     8c6:	a7 01       	movw	r20, r14
     8c8:	96 01       	movw	r18, r12
     8ca:	0e 94 12 15 	call	0x2a24	; 0x2a24 <__divmodsi4>
     8ce:	81 2f       	mov	r24, r17
     8d0:	82 0f       	add	r24, r18
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <run_pwm+0x17a>
			}
			else
			{
				// correction
				// 50%/15s = 3.3%/s (3%/s) => 15s * 3% = 45% => 50% - 45% = 5% of error
				ti = ti + tinc;
     8d4:	81 2f       	mov	r24, r17
     8d6:	86 0f       	add	r24, r22
			}
			
			set_pwm0(ti);
     8d8:	0e 94 cd 07 	call	0xf9a	; 0xf9a <set_pwm0>
     8dc:	26 c1       	rjmp	.+588    	; 0xb2a <__stack+0x22b>
		}
		else if (event->type == PWM)
     8de:	81 30       	cpi	r24, 0x01	; 1
     8e0:	09 f0       	breq	.+2      	; 0x8e4 <run_pwm+0x186>
     8e2:	23 c1       	rjmp	.+582    	; 0xb2a <__stack+0x22b>
		{
			// start value
			// convert % => 0..255
			uint8_t ti = (event->pin_state * 255) / 100;
     8e4:	2e 81       	ldd	r18, Y+6	; 0x06
     8e6:	3f ef       	ldi	r19, 0xFF	; 255
     8e8:	23 03       	mulsu	r18, r19
     8ea:	c0 01       	movw	r24, r0
     8ec:	11 24       	eor	r1, r1
     8ee:	64 e6       	ldi	r22, 0x64	; 100
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__divmodhi4>
     8f6:	16 2f       	mov	r17, r22
			
			if (event->duration != 0)
     8f8:	8f 80       	ldd	r8, Y+7	; 0x07
     8fa:	98 84       	ldd	r9, Y+8	; 0x08
     8fc:	a9 84       	ldd	r10, Y+9	; 0x09
     8fe:	ba 84       	ldd	r11, Y+10	; 0x0a
     900:	81 14       	cp	r8, r1
     902:	91 04       	cpc	r9, r1
     904:	a1 04       	cpc	r10, r1
     906:	b1 04       	cpc	r11, r1
     908:	19 f1       	breq	.+70     	; 0x950 <__stack+0x51>
			{
				// increment/decrement value
				// convert % => 0..255
				int16_t tinc = (event->inc * 255) / 100;
     90a:	2b 85       	ldd	r18, Y+11	; 0x0b
     90c:	3f ef       	ldi	r19, 0xFF	; 255
     90e:	23 03       	mulsu	r18, r19
     910:	c0 01       	movw	r24, r0
     912:	11 24       	eor	r1, r1
     914:	64 e6       	ldi	r22, 0x64	; 100
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__divmodhi4>
				
				int32_t passed_time = time - event->time;
     91c:	89 81       	ldd	r24, Y+1	; 0x01
     91e:	9a 81       	ldd	r25, Y+2	; 0x02
     920:	ab 81       	ldd	r26, Y+3	; 0x03
     922:	bc 81       	ldd	r27, Y+4	; 0x04
     924:	a7 01       	movw	r20, r14
     926:	96 01       	movw	r18, r12
     928:	28 1b       	sub	r18, r24
     92a:	39 0b       	sbc	r19, r25
     92c:	4a 0b       	sbc	r20, r26
     92e:	5b 0b       	sbc	r21, r27
				
				if (passed_time <= event->duration)
     930:	82 16       	cp	r8, r18
     932:	93 06       	cpc	r9, r19
     934:	a4 06       	cpc	r10, r20
     936:	b5 06       	cpc	r11, r21
     938:	54 f0       	brlt	.+20     	; 0x94e <__stack+0x4f>
				{
					ti = ti + ((int32_t) tinc * passed_time) / event->duration;
     93a:	a6 2f       	mov	r26, r22
     93c:	b7 2f       	mov	r27, r23
     93e:	0e 94 41 15 	call	0x2a82	; 0x2a82 <__mulshisi3>
     942:	a5 01       	movw	r20, r10
     944:	94 01       	movw	r18, r8
     946:	0e 94 12 15 	call	0x2a24	; 0x2a24 <__divmodsi4>
     94a:	12 0f       	add	r17, r18
     94c:	01 c0       	rjmp	.+2      	; 0x950 <__stack+0x51>
				}
				else
				{
					// correction
					// 50%/15s = 3.3%/s (3%/s) => 15s * 3% = 45% => 50% - 45% = 5% of error
					ti = ti + tinc;
     94e:	16 0f       	add	r17, r22
				}
			}
			
			set_pwm0(ti);
     950:	81 2f       	mov	r24, r17
     952:	0e 94 cd 07 	call	0xf9a	; 0xf9a <set_pwm0>
     956:	e9 c0       	rjmp	.+466    	; 0xb2a <__stack+0x22b>
		}
	}
	else if (pin == PWM1_PD5)
     958:	11 30       	cpi	r17, 0x01	; 1
     95a:	09 f0       	breq	.+2      	; 0x95e <__stack+0x5f>
     95c:	e6 c0       	rjmp	.+460    	; 0xb2a <__stack+0x22b>
	{
		if (event->type == CLOUDS)
     95e:	8d 81       	ldd	r24, Y+5	; 0x05
     960:	82 30       	cpi	r24, 0x02	; 2
     962:	09 f0       	breq	.+2      	; 0x966 <__stack+0x67>
     964:	a7 c0       	rjmp	.+334    	; 0xab4 <__stack+0x1b5>
		{
			//***
			// CLOUDS mode
			int32_t subevent_passed_time = time - event->temp_time;
     966:	8c 85       	ldd	r24, Y+12	; 0x0c
     968:	9d 85       	ldd	r25, Y+13	; 0x0d
     96a:	ae 85       	ldd	r26, Y+14	; 0x0e
     96c:	bf 85       	ldd	r27, Y+15	; 0x0f
     96e:	46 01       	movw	r8, r12
     970:	57 01       	movw	r10, r14
     972:	88 1a       	sub	r8, r24
     974:	99 0a       	sbc	r9, r25
     976:	aa 0a       	sbc	r10, r26
     978:	bb 0a       	sbc	r11, r27
			
			// new cloud: if no cloud before (new event) or passed time of last cloud
			//if ((event->temp_time == 0) | (event->temp_time < time))
			if ((event->temp_duration == 0) | (subevent_passed_time > event->temp_duration))
     97a:	88 89       	ldd	r24, Y+16	; 0x10
     97c:	99 89       	ldd	r25, Y+17	; 0x11
     97e:	aa 89       	ldd	r26, Y+18	; 0x12
     980:	bb 89       	ldd	r27, Y+19	; 0x13
     982:	31 e0       	ldi	r19, 0x01	; 1
     984:	00 97       	sbiw	r24, 0x00	; 0
     986:	a1 05       	cpc	r26, r1
     988:	b1 05       	cpc	r27, r1
     98a:	09 f0       	breq	.+2      	; 0x98e <__stack+0x8f>
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	21 e0       	ldi	r18, 0x01	; 1
     990:	88 15       	cp	r24, r8
     992:	99 05       	cpc	r25, r9
     994:	aa 05       	cpc	r26, r10
     996:	bb 05       	cpc	r27, r11
     998:	0c f0       	brlt	.+2      	; 0x99c <__stack+0x9d>
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	21 11       	cpse	r18, r1
     99e:	03 c0       	rjmp	.+6      	; 0x9a6 <__stack+0xa7>
     9a0:	33 23       	and	r19, r19
     9a2:	09 f4       	brne	.+2      	; 0x9a6 <__stack+0xa7>
     9a4:	5a c0       	rjmp	.+180    	; 0xa5a <__stack+0x15b>
			{
				
				if (subevent_passed_time > event->temp_duration)
     9a6:	22 23       	and	r18, r18
     9a8:	79 f0       	breq	.+30     	; 0x9c8 <__stack+0xc9>
				{
					if (event->temp_duration == 0)
     9aa:	33 23       	and	r19, r19
     9ac:	29 f0       	breq	.+10     	; 0x9b8 <__stack+0xb9>
					send_string("new cloud - beginning ");
     9ae:	8e ed       	ldi	r24, 0xDE	; 222
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
     9b6:	04 c0       	rjmp	.+8      	; 0x9c0 <__stack+0xc1>
					else
					send_string("new cloud ");
     9b8:	85 ef       	ldi	r24, 0xF5	; 245
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
					
					// start value for new subevent
					event->pin_state = event->pin_state + event->inc;
     9c0:	9e 81       	ldd	r25, Y+6	; 0x06
     9c2:	8b 85       	ldd	r24, Y+11	; 0x0b
     9c4:	89 0f       	add	r24, r25
     9c6:	8e 83       	std	Y+6, r24	; 0x06
				}
				
				// start time for subevent
				event->temp_time = time;
     9c8:	cc 86       	std	Y+12, r12	; 0x0c
     9ca:	dd 86       	std	Y+13, r13	; 0x0d
     9cc:	ee 86       	std	Y+14, r14	; 0x0e
     9ce:	ff 86       	std	Y+15, r15	; 0x0f
				
				// if last cloud
				int32_t margin = 200; // 200 seconds before end of the duration of CLOUDS event
				if (((event->time + event->duration) - time) <= margin)
     9d0:	49 81       	ldd	r20, Y+1	; 0x01
     9d2:	5a 81       	ldd	r21, Y+2	; 0x02
     9d4:	6b 81       	ldd	r22, Y+3	; 0x03
     9d6:	7c 81       	ldd	r23, Y+4	; 0x04
     9d8:	8f 81       	ldd	r24, Y+7	; 0x07
     9da:	98 85       	ldd	r25, Y+8	; 0x08
     9dc:	a9 85       	ldd	r26, Y+9	; 0x09
     9de:	ba 85       	ldd	r27, Y+10	; 0x0a
     9e0:	84 0f       	add	r24, r20
     9e2:	95 1f       	adc	r25, r21
     9e4:	a6 1f       	adc	r26, r22
     9e6:	b7 1f       	adc	r27, r23
     9e8:	8c 19       	sub	r24, r12
     9ea:	9d 09       	sbc	r25, r13
     9ec:	ae 09       	sbc	r26, r14
     9ee:	bf 09       	sbc	r27, r15
     9f0:	89 3c       	cpi	r24, 0xC9	; 201
     9f2:	91 05       	cpc	r25, r1
     9f4:	a1 05       	cpc	r26, r1
     9f6:	b1 05       	cpc	r27, r1
     9f8:	ec f4       	brge	.+58     	; 0xa34 <__stack+0x135>
				{
					// last cloud
					send_string("last cloud ");
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	92 e0       	ldi	r25, 0x02	; 2
     9fe:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
					
					event->temp_duration = (event->time + event->duration) - time;
     a02:	49 81       	ldd	r20, Y+1	; 0x01
     a04:	5a 81       	ldd	r21, Y+2	; 0x02
     a06:	6b 81       	ldd	r22, Y+3	; 0x03
     a08:	7c 81       	ldd	r23, Y+4	; 0x04
     a0a:	8f 81       	ldd	r24, Y+7	; 0x07
     a0c:	98 85       	ldd	r25, Y+8	; 0x08
     a0e:	a9 85       	ldd	r26, Y+9	; 0x09
     a10:	ba 85       	ldd	r27, Y+10	; 0x0a
     a12:	84 0f       	add	r24, r20
     a14:	95 1f       	adc	r25, r21
     a16:	a6 1f       	adc	r26, r22
     a18:	b7 1f       	adc	r27, r23
     a1a:	8c 19       	sub	r24, r12
     a1c:	9d 09       	sbc	r25, r13
     a1e:	ae 09       	sbc	r26, r14
     a20:	bf 09       	sbc	r27, r15
     a22:	88 8b       	std	Y+16, r24	; 0x10
     a24:	99 8b       	std	Y+17, r25	; 0x11
     a26:	aa 8b       	std	Y+18, r26	; 0x12
     a28:	bb 8b       	std	Y+19, r27	; 0x13
					
					// final pin_state
					event->inc = event->final_state - event->pin_state;
     a2a:	8c 89       	ldd	r24, Y+20	; 0x14
     a2c:	9e 81       	ldd	r25, Y+6	; 0x06
     a2e:	89 1b       	sub	r24, r25
     a30:	8b 87       	std	Y+11, r24	; 0x0b
     a32:	13 c0       	rjmp	.+38     	; 0xa5a <__stack+0x15b>
				}
				else
				{
					event->temp_duration = util_rand2(10, margin);
     a34:	68 ec       	ldi	r22, 0xC8	; 200
     a36:	8a e0       	ldi	r24, 0x0A	; 10
     a38:	0e 94 72 00 	call	0xe4	; 0xe4 <util_rand2>
     a3c:	aa 27       	eor	r26, r26
     a3e:	97 fd       	sbrc	r25, 7
     a40:	a0 95       	com	r26
     a42:	ba 2f       	mov	r27, r26
     a44:	88 8b       	std	Y+16, r24	; 0x10
     a46:	99 8b       	std	Y+17, r25	; 0x11
     a48:	aa 8b       	std	Y+18, r26	; 0x12
     a4a:	bb 8b       	std	Y+19, r27	; 0x13
					
					// range of changes: 70..100%
					int new_state = util_rand2(70, 100);
     a4c:	64 e6       	ldi	r22, 0x64	; 100
     a4e:	86 e4       	ldi	r24, 0x46	; 70
     a50:	0e 94 72 00 	call	0xe4	; 0xe4 <util_rand2>
					
					event->inc = new_state - event->pin_state;
     a54:	9e 81       	ldd	r25, Y+6	; 0x06
     a56:	89 1b       	sub	r24, r25
     a58:	8b 87       	std	Y+11, r24	; 0x0b
				
			}
			
			// start value
			// convert % => 0..255
			uint8_t ti = (event->pin_state * 255) / 100;
     a5a:	2e 81       	ldd	r18, Y+6	; 0x06
     a5c:	4f ef       	ldi	r20, 0xFF	; 255
     a5e:	24 03       	mulsu	r18, r20
     a60:	c0 01       	movw	r24, r0
     a62:	11 24       	eor	r1, r1
     a64:	24 e6       	ldi	r18, 0x64	; 100
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	b9 01       	movw	r22, r18
     a6a:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__divmodhi4>
     a6e:	16 2f       	mov	r17, r22
			
			// increment/decrement value
			// convert % => 0..255
			int16_t tinc = (event->inc * 255) / 100;
     a70:	5b 85       	ldd	r21, Y+11	; 0x0b
     a72:	54 03       	mulsu	r21, r20
     a74:	c0 01       	movw	r24, r0
     a76:	11 24       	eor	r1, r1
     a78:	b9 01       	movw	r22, r18
     a7a:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__divmodhi4>
			
			if (subevent_passed_time <= event->temp_duration)
     a7e:	c8 88       	ldd	r12, Y+16	; 0x10
     a80:	d9 88       	ldd	r13, Y+17	; 0x11
     a82:	ea 88       	ldd	r14, Y+18	; 0x12
     a84:	fb 88       	ldd	r15, Y+19	; 0x13
     a86:	c8 14       	cp	r12, r8
     a88:	d9 04       	cpc	r13, r9
     a8a:	ea 04       	cpc	r14, r10
     a8c:	fb 04       	cpc	r15, r11
     a8e:	6c f0       	brlt	.+26     	; 0xaaa <__stack+0x1ab>
			{
				ti = ti + ((int32_t) tinc * subevent_passed_time) / event->temp_duration;
     a90:	a6 2f       	mov	r26, r22
     a92:	b7 2f       	mov	r27, r23
     a94:	a5 01       	movw	r20, r10
     a96:	94 01       	movw	r18, r8
     a98:	0e 94 41 15 	call	0x2a82	; 0x2a82 <__mulshisi3>
     a9c:	a7 01       	movw	r20, r14
     a9e:	96 01       	movw	r18, r12
     aa0:	0e 94 12 15 	call	0x2a24	; 0x2a24 <__divmodsi4>
     aa4:	81 2f       	mov	r24, r17
     aa6:	82 0f       	add	r24, r18
     aa8:	02 c0       	rjmp	.+4      	; 0xaae <__stack+0x1af>
			}
			else
			{
				// correction
				// 50%/15s = 3.3%/s (3%/s) => 15s * 3% = 45% => 50% - 45% = 5% of error
				ti = ti + tinc;
     aaa:	81 2f       	mov	r24, r17
     aac:	86 0f       	add	r24, r22
			}
			
			set_pwm1(ti);
     aae:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <set_pwm1>
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__stack+0x22b>
		}
		else if (event->type == PWM)
     ab4:	81 30       	cpi	r24, 0x01	; 1
     ab6:	c9 f5       	brne	.+114    	; 0xb2a <__stack+0x22b>
		{
			// start value
			// convert % => 0..255
			uint8_t ti = (event->pin_state * 255) / 100;
     ab8:	2e 81       	ldd	r18, Y+6	; 0x06
     aba:	3f ef       	ldi	r19, 0xFF	; 255
     abc:	23 03       	mulsu	r18, r19
     abe:	c0 01       	movw	r24, r0
     ac0:	11 24       	eor	r1, r1
     ac2:	64 e6       	ldi	r22, 0x64	; 100
     ac4:	70 e0       	ldi	r23, 0x00	; 0
     ac6:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__divmodhi4>
     aca:	16 2f       	mov	r17, r22
			
			if (event->duration != 0)
     acc:	8f 80       	ldd	r8, Y+7	; 0x07
     ace:	98 84       	ldd	r9, Y+8	; 0x08
     ad0:	a9 84       	ldd	r10, Y+9	; 0x09
     ad2:	ba 84       	ldd	r11, Y+10	; 0x0a
     ad4:	81 14       	cp	r8, r1
     ad6:	91 04       	cpc	r9, r1
     ad8:	a1 04       	cpc	r10, r1
     ada:	b1 04       	cpc	r11, r1
     adc:	19 f1       	breq	.+70     	; 0xb24 <__stack+0x225>
			{
				// increment/decrement value
				// convert % => 0..255
				int16_t tinc = (event->inc * 255) / 100;
     ade:	2b 85       	ldd	r18, Y+11	; 0x0b
     ae0:	3f ef       	ldi	r19, 0xFF	; 255
     ae2:	23 03       	mulsu	r18, r19
     ae4:	c0 01       	movw	r24, r0
     ae6:	11 24       	eor	r1, r1
     ae8:	64 e6       	ldi	r22, 0x64	; 100
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__divmodhi4>
				
				int32_t passed_time = time - event->time;
     af0:	89 81       	ldd	r24, Y+1	; 0x01
     af2:	9a 81       	ldd	r25, Y+2	; 0x02
     af4:	ab 81       	ldd	r26, Y+3	; 0x03
     af6:	bc 81       	ldd	r27, Y+4	; 0x04
     af8:	a7 01       	movw	r20, r14
     afa:	96 01       	movw	r18, r12
     afc:	28 1b       	sub	r18, r24
     afe:	39 0b       	sbc	r19, r25
     b00:	4a 0b       	sbc	r20, r26
     b02:	5b 0b       	sbc	r21, r27
				
				if (passed_time <= event->duration)
     b04:	82 16       	cp	r8, r18
     b06:	93 06       	cpc	r9, r19
     b08:	a4 06       	cpc	r10, r20
     b0a:	b5 06       	cpc	r11, r21
     b0c:	54 f0       	brlt	.+20     	; 0xb22 <__stack+0x223>
				{
					ti = ti + ((int32_t) tinc * passed_time) / event->duration;
     b0e:	a6 2f       	mov	r26, r22
     b10:	b7 2f       	mov	r27, r23
     b12:	0e 94 41 15 	call	0x2a82	; 0x2a82 <__mulshisi3>
     b16:	a5 01       	movw	r20, r10
     b18:	94 01       	movw	r18, r8
     b1a:	0e 94 12 15 	call	0x2a24	; 0x2a24 <__divmodsi4>
     b1e:	12 0f       	add	r17, r18
     b20:	01 c0       	rjmp	.+2      	; 0xb24 <__stack+0x225>
				}
				else
				{
					// correction
					// 50%/15s = 3.3%/s (3%/s) => 15s * 3% = 45% => 50% - 45% = 5% of error
					ti = ti + tinc;
     b22:	16 0f       	add	r17, r22
				}
			}
			
			set_pwm1(ti);
     b24:	81 2f       	mov	r24, r17
     b26:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <set_pwm1>
		}
	}
}
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	ff 90       	pop	r15
     b32:	ef 90       	pop	r14
     b34:	df 90       	pop	r13
     b36:	cf 90       	pop	r12
     b38:	bf 90       	pop	r11
     b3a:	af 90       	pop	r10
     b3c:	9f 90       	pop	r9
     b3e:	8f 90       	pop	r8
     b40:	08 95       	ret

00000b42 <set_event>:

void set_event(uint8_t event_number)
{
     b42:	1f 93       	push	r17
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	cd b7       	in	r28, 0x3d	; 61
     b4a:	de b7       	in	r29, 0x3e	; 62
     b4c:	6e 97       	sbiw	r28, 0x1e	; 30
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	f8 94       	cli
     b52:	de bf       	out	0x3e, r29	; 62
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	cd bf       	out	0x3d, r28	; 61
     b58:	18 2f       	mov	r17, r24
	uint8_t which_pin = events[event_number].pin;
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	85 e1       	ldi	r24, 0x15	; 21
     b60:	18 9f       	mul	r17, r24
     b62:	f0 01       	movw	r30, r0
     b64:	11 24       	eor	r1, r1
     b66:	e5 5a       	subi	r30, 0xA5	; 165
     b68:	fa 4f       	sbci	r31, 0xFA	; 250
     b6a:	80 81       	ld	r24, Z
	
	actual_events[which_pin] = event_number;
     b6c:	e8 2f       	mov	r30, r24
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	ec 5f       	subi	r30, 0xFC	; 252
     b72:	fe 4f       	sbci	r31, 0xFE	; 254
     b74:	10 83       	st	Z, r17
	
	switch(which_pin)
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	80 f0       	brcs	.+32     	; 0xb9a <set_event+0x58>
     b7a:	98 2f       	mov	r25, r24
     b7c:	94 50       	subi	r25, 0x04	; 4
     b7e:	94 30       	cpi	r25, 0x04	; 4
     b80:	b0 f4       	brcc	.+44     	; 0xbae <set_event+0x6c>
	{
		case EXP0_PC2:
		case EXP1_PD4:
		case EXP2_PD7:
		case EXP3_PB0:
		set_pin(which_pin, events[event_number].pin_state);
     b82:	95 e1       	ldi	r25, 0x15	; 21
     b84:	92 9f       	mul	r25, r18
     b86:	f0 01       	movw	r30, r0
     b88:	93 9f       	mul	r25, r19
     b8a:	f0 0d       	add	r31, r0
     b8c:	11 24       	eor	r1, r1
     b8e:	e5 5a       	subi	r30, 0xA5	; 165
     b90:	fa 4f       	sbci	r31, 0xFA	; 250
     b92:	66 81       	ldd	r22, Z+6	; 0x06
     b94:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <set_pin>
		break;
     b98:	0a c0       	rjmp	.+20     	; 0xbae <set_event+0x6c>
		
		case PWM0_PD6:
		case PWM1_PD5:
		// not implemented yet case PWM2_PB1:
		// not implemented yet case PWM3_PD3:
		run_pwm(which_pin, &events[event_number]);
     b9a:	95 e1       	ldi	r25, 0x15	; 21
     b9c:	92 9f       	mul	r25, r18
     b9e:	b0 01       	movw	r22, r0
     ba0:	93 9f       	mul	r25, r19
     ba2:	70 0d       	add	r23, r0
     ba4:	11 24       	eor	r1, r1
     ba6:	65 5a       	subi	r22, 0xA5	; 165
     ba8:	7a 4f       	sbci	r23, 0xFA	; 250
     baa:	0e 94 af 03 	call	0x75e	; 0x75e <run_pwm>
		break;
		
		default:break;
	}
	
	int32_t time = current_time();
     bae:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <current_time>
	
	// event_time
	char formatted_date[30];
	timeToString(time, formatted_date);
     bb2:	ae 01       	movw	r20, r28
     bb4:	4f 5f       	subi	r20, 0xFF	; 255
     bb6:	5f 4f       	sbci	r21, 0xFF	; 255
     bb8:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <timeToString>
	send_string(formatted_date);
     bbc:	ce 01       	movw	r24, r28
     bbe:	01 96       	adiw	r24, 0x01	; 1
     bc0:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	send_string(" ");
     bc4:	89 ea       	ldi	r24, 0xA9	; 169
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	
	print_event(event_number);
     bcc:	81 2f       	mov	r24, r17
     bce:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <print_event>
}
     bd2:	6e 96       	adiw	r28, 0x1e	; 30
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	de bf       	out	0x3e, r29	; 62
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	cd bf       	out	0x3d, r28	; 61
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	1f 91       	pop	r17
     be4:	08 95       	ret

00000be6 <get_event_indices>:

void get_event_indices(uint8_t indices[], uint8_t *indices_count, uint8_t pin)
{
     be6:	db 01       	movw	r26, r22
	*indices_count = 0;
     be8:	1c 92       	st	X, r1
	
	for (uint8_t i = 0; i < events_count; i++)
     bea:	20 91 0c 01 	lds	r18, 0x010C
     bee:	22 23       	and	r18, r18
     bf0:	b9 f0       	breq	.+46     	; 0xc20 <get_event_indices+0x3a>
     bf2:	20 e0       	ldi	r18, 0x00	; 0
	{
		if (events[i].pin == pin)
     bf4:	55 e1       	ldi	r21, 0x15	; 21
     bf6:	52 9f       	mul	r21, r18
     bf8:	f0 01       	movw	r30, r0
     bfa:	11 24       	eor	r1, r1
     bfc:	e5 5a       	subi	r30, 0xA5	; 165
     bfe:	fa 4f       	sbci	r31, 0xFA	; 250
     c00:	30 81       	ld	r19, Z
     c02:	34 13       	cpse	r19, r20
     c04:	08 c0       	rjmp	.+16     	; 0xc16 <get_event_indices+0x30>
		{
			indices[*indices_count] = i;
     c06:	3c 91       	ld	r19, X
     c08:	fc 01       	movw	r30, r24
     c0a:	e3 0f       	add	r30, r19
     c0c:	f1 1d       	adc	r31, r1
     c0e:	20 83       	st	Z, r18
			(*indices_count)++;
     c10:	3c 91       	ld	r19, X
     c12:	3f 5f       	subi	r19, 0xFF	; 255
     c14:	3c 93       	st	X, r19

void get_event_indices(uint8_t indices[], uint8_t *indices_count, uint8_t pin)
{
	*indices_count = 0;
	
	for (uint8_t i = 0; i < events_count; i++)
     c16:	2f 5f       	subi	r18, 0xFF	; 255
     c18:	30 91 0c 01 	lds	r19, 0x010C
     c1c:	23 17       	cp	r18, r19
     c1e:	58 f3       	brcs	.-42     	; 0xbf6 <get_event_indices+0x10>
     c20:	08 95       	ret

00000c22 <current_state>:
		}
	}
}

void current_state()
{
     c22:	2f 92       	push	r2
     c24:	3f 92       	push	r3
     c26:	4f 92       	push	r4
     c28:	5f 92       	push	r5
     c2a:	6f 92       	push	r6
     c2c:	7f 92       	push	r7
     c2e:	8f 92       	push	r8
     c30:	9f 92       	push	r9
     c32:	af 92       	push	r10
     c34:	bf 92       	push	r11
     c36:	cf 92       	push	r12
     c38:	df 92       	push	r13
     c3a:	ef 92       	push	r14
     c3c:	ff 92       	push	r15
     c3e:	0f 93       	push	r16
     c40:	1f 93       	push	r17
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
     c4a:	65 97       	sbiw	r28, 0x15	; 21
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	f8 94       	cli
     c50:	de bf       	out	0x3e, r29	; 62
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	cd bf       	out	0x3d, r28	; 61
	if (event_mode == MANUAL_MODE)
     c56:	80 91 56 05 	lds	r24, 0x0556
     c5a:	81 30       	cpi	r24, 0x01	; 1
     c5c:	09 f4       	brne	.+2      	; 0xc60 <current_state+0x3e>
     c5e:	13 c1       	rjmp	.+550    	; 0xe86 <current_state+0x264>
	return;
	
	// get current time
	int32_t time = current_time();
     c60:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <current_time>
     c64:	46 2e       	mov	r4, r22
     c66:	57 2e       	mov	r5, r23
     c68:	68 2e       	mov	r6, r24
     c6a:	79 2e       	mov	r7, r25
	
	// indices for every pin
	uint8_t indices_count = 0;
     c6c:	19 82       	std	Y+1, r1	; 0x01
     c6e:	0f 2e       	mov	r0, r31
     c70:	f4 e0       	ldi	r31, 0x04	; 4
     c72:	af 2e       	mov	r10, r31
     c74:	f1 e0       	ldi	r31, 0x01	; 1
     c76:	bf 2e       	mov	r11, r31
     c78:	f0 2d       	mov	r31, r0
			(*indices_count)++;
		}
	}
}

void current_state()
     c7a:	0f 2e       	mov	r0, r31
     c7c:	fc e0       	ldi	r31, 0x0C	; 12
     c7e:	cf 2e       	mov	r12, r31
     c80:	f1 e0       	ldi	r31, 0x01	; 1
     c82:	df 2e       	mov	r13, r31
     c84:	f0 2d       	mov	r31, r0
     c86:	85 01       	movw	r16, r10
			// if no events or just one event
			if (indices_count == 0)
			continue;
			
			// if earlier than the first event => current state is the last event
			if (time < events[event_indices[0]].time)
     c88:	0f 2e       	mov	r0, r31
     c8a:	f5 e1       	ldi	r31, 0x15	; 21
     c8c:	8f 2e       	mov	r8, r31
     c8e:	f0 2d       	mov	r31, r0
			else
			{
				// find events in middle
				for (uint8_t i = 1; i < indices_count; i++)
				{
					if ((time >= events[event_indices[i - 1]].time) & (time < events[event_indices[i]].time))
     c90:	33 24       	eor	r3, r3
     c92:	33 94       	inc	r3
					{
						if ((events[event_indices[i - 1]].duration > 0) | (actual_events[a] != event_indices[i - 1]))
     c94:	21 2c       	mov	r2, r1
			(*indices_count)++;
		}
	}
}

void current_state()
     c96:	40 2f       	mov	r20, r16
     c98:	4a 19       	sub	r20, r10
     c9a:	78 01       	movw	r14, r16
	uint8_t indices_count = 0;
	uint8_t event_indices[EVENTS_SIZE];
	
	for (uint8_t a = 0; a < sizeof(actual_events); a++)
	{
		if (actual_events[a] != PIN_DISABLED)
     c9c:	d8 01       	movw	r26, r16
     c9e:	8c 91       	ld	r24, X
     ca0:	8e 3f       	cpi	r24, 0xFE	; 254
     ca2:	09 f4       	brne	.+2      	; 0xca6 <current_state+0x84>
     ca4:	ea c0       	rjmp	.+468    	; 0xe7a <current_state+0x258>
		{
			get_event_indices(event_indices, &indices_count, a);
     ca6:	be 01       	movw	r22, r28
     ca8:	6f 5f       	subi	r22, 0xFF	; 255
     caa:	7f 4f       	sbci	r23, 0xFF	; 255
     cac:	ce 01       	movw	r24, r28
     cae:	02 96       	adiw	r24, 0x02	; 2
     cb0:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <get_event_indices>
			
			// if no events or just one event
			if (indices_count == 0)
     cb4:	29 81       	ldd	r18, Y+1	; 0x01
     cb6:	22 23       	and	r18, r18
     cb8:	09 f4       	brne	.+2      	; 0xcbc <current_state+0x9a>
     cba:	df c0       	rjmp	.+446    	; 0xe7a <current_state+0x258>
			continue;
			
			// if earlier than the first event => current state is the last event
			if (time < events[event_indices[0]].time)
     cbc:	ea 81       	ldd	r30, Y+2	; 0x02
     cbe:	8e 9e       	mul	r8, r30
     cc0:	f0 01       	movw	r30, r0
     cc2:	11 24       	eor	r1, r1
     cc4:	e5 5a       	subi	r30, 0xA5	; 165
     cc6:	fa 4f       	sbci	r31, 0xFA	; 250
     cc8:	81 81       	ldd	r24, Z+1	; 0x01
     cca:	92 81       	ldd	r25, Z+2	; 0x02
     ccc:	a3 81       	ldd	r26, Z+3	; 0x03
     cce:	b4 81       	ldd	r27, Z+4	; 0x04
     cd0:	48 16       	cp	r4, r24
     cd2:	59 06       	cpc	r5, r25
     cd4:	6a 06       	cpc	r6, r26
     cd6:	7b 06       	cpc	r7, r27
     cd8:	6c f5       	brge	.+90     	; 0xd34 <current_state+0x112>
			{
				if ((events[event_indices[indices_count - 1]].duration > 0) | (actual_events[a] != event_indices[indices_count - 1]))
     cda:	e1 e0       	ldi	r30, 0x01	; 1
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	ec 0f       	add	r30, r28
     ce0:	fd 1f       	adc	r31, r29
     ce2:	e2 0f       	add	r30, r18
     ce4:	f1 1d       	adc	r31, r1
     ce6:	80 81       	ld	r24, Z
     ce8:	28 2f       	mov	r18, r24
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	f7 01       	movw	r30, r14
     cee:	40 81       	ld	r20, Z
     cf0:	55 27       	eor	r21, r21
     cf2:	47 fd       	sbrc	r20, 7
     cf4:	50 95       	com	r21
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	24 17       	cp	r18, r20
     cfa:	35 07       	cpc	r19, r21
     cfc:	09 f4       	brne	.+2      	; 0xd00 <current_state+0xde>
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	91 11       	cpse	r25, r1
     d02:	15 c0       	rjmp	.+42     	; 0xd2e <current_state+0x10c>
     d04:	82 9e       	mul	r8, r18
     d06:	f0 01       	movw	r30, r0
     d08:	83 9e       	mul	r8, r19
     d0a:	f0 0d       	add	r31, r0
     d0c:	11 24       	eor	r1, r1
     d0e:	e5 5a       	subi	r30, 0xA5	; 165
     d10:	fa 4f       	sbci	r31, 0xFA	; 250
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	47 81       	ldd	r20, Z+7	; 0x07
     d16:	50 85       	ldd	r21, Z+8	; 0x08
     d18:	61 85       	ldd	r22, Z+9	; 0x09
     d1a:	72 85       	ldd	r23, Z+10	; 0x0a
     d1c:	14 16       	cp	r1, r20
     d1e:	15 06       	cpc	r1, r21
     d20:	16 06       	cpc	r1, r22
     d22:	17 06       	cpc	r1, r23
     d24:	0c f0       	brlt	.+2      	; 0xd28 <current_state+0x106>
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	99 23       	and	r25, r25
     d2a:	09 f4       	brne	.+2      	; 0xd2e <current_state+0x10c>
     d2c:	a6 c0       	rjmp	.+332    	; 0xe7a <current_state+0x258>
				set_event(event_indices[indices_count - 1]);
     d2e:	0e 94 a1 05 	call	0xb42	; 0xb42 <set_event>
     d32:	a3 c0       	rjmp	.+326    	; 0xe7a <current_state+0x258>
			}
			// if last event or later
			else if (time >= events[event_indices[indices_count - 1]].time)
     d34:	e1 e0       	ldi	r30, 0x01	; 1
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	ec 0f       	add	r30, r28
     d3a:	fd 1f       	adc	r31, r29
     d3c:	e2 0f       	add	r30, r18
     d3e:	f1 1d       	adc	r31, r1
     d40:	80 81       	ld	r24, Z
     d42:	e8 2f       	mov	r30, r24
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	8e 9e       	mul	r8, r30
     d48:	d0 01       	movw	r26, r0
     d4a:	8f 9e       	mul	r8, r31
     d4c:	b0 0d       	add	r27, r0
     d4e:	11 24       	eor	r1, r1
     d50:	a5 5a       	subi	r26, 0xA5	; 165
     d52:	ba 4f       	sbci	r27, 0xFA	; 250
     d54:	11 96       	adiw	r26, 0x01	; 1
     d56:	4d 91       	ld	r20, X+
     d58:	5d 91       	ld	r21, X+
     d5a:	6d 91       	ld	r22, X+
     d5c:	7c 91       	ld	r23, X
     d5e:	14 97       	sbiw	r26, 0x04	; 4
     d60:	44 16       	cp	r4, r20
     d62:	55 06       	cpc	r5, r21
     d64:	66 06       	cpc	r6, r22
     d66:	77 06       	cpc	r7, r23
     d68:	1c f4       	brge	.+6      	; 0xd70 <current_state+0x14e>
				set_event(event_indices[indices_count - 1]);
			}
			else
			{
				// find events in middle
				for (uint8_t i = 1; i < indices_count; i++)
     d6a:	22 30       	cpi	r18, 0x02	; 2
     d6c:	30 f5       	brcc	.+76     	; 0xdba <current_state+0x198>
     d6e:	85 c0       	rjmp	.+266    	; 0xe7a <current_state+0x258>
				set_event(event_indices[indices_count - 1]);
			}
			// if last event or later
			else if (time >= events[event_indices[indices_count - 1]].time)
			{
				if ((events[event_indices[indices_count - 1]].duration > 0) | (actual_events[a] != event_indices[indices_count - 1]))
     d70:	d7 01       	movw	r26, r14
     d72:	2c 91       	ld	r18, X
     d74:	33 27       	eor	r19, r19
     d76:	27 fd       	sbrc	r18, 7
     d78:	30 95       	com	r19
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	e2 17       	cp	r30, r18
     d7e:	f3 07       	cpc	r31, r19
     d80:	09 f4       	brne	.+2      	; 0xd84 <current_state+0x162>
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	91 11       	cpse	r25, r1
     d86:	16 c0       	rjmp	.+44     	; 0xdb4 <current_state+0x192>
     d88:	8e 9e       	mul	r8, r30
     d8a:	90 01       	movw	r18, r0
     d8c:	8f 9e       	mul	r8, r31
     d8e:	30 0d       	add	r19, r0
     d90:	11 24       	eor	r1, r1
     d92:	f9 01       	movw	r30, r18
     d94:	e5 5a       	subi	r30, 0xA5	; 165
     d96:	fa 4f       	sbci	r31, 0xFA	; 250
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	47 81       	ldd	r20, Z+7	; 0x07
     d9c:	50 85       	ldd	r21, Z+8	; 0x08
     d9e:	61 85       	ldd	r22, Z+9	; 0x09
     da0:	72 85       	ldd	r23, Z+10	; 0x0a
     da2:	14 16       	cp	r1, r20
     da4:	15 06       	cpc	r1, r21
     da6:	16 06       	cpc	r1, r22
     da8:	17 06       	cpc	r1, r23
     daa:	0c f0       	brlt	.+2      	; 0xdae <current_state+0x18c>
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	99 23       	and	r25, r25
     db0:	09 f4       	brne	.+2      	; 0xdb4 <current_state+0x192>
     db2:	63 c0       	rjmp	.+198    	; 0xe7a <current_state+0x258>
				set_event(event_indices[indices_count - 1]);
     db4:	0e 94 a1 05 	call	0xb42	; 0xb42 <set_event>
     db8:	60 c0       	rjmp	.+192    	; 0xe7a <current_state+0x258>
			}
			else
			{
				// find events in middle
				for (uint8_t i = 1; i < indices_count; i++)
     dba:	99 24       	eor	r9, r9
     dbc:	93 94       	inc	r9
				{
					if ((time >= events[event_indices[i - 1]].time) & (time < events[event_indices[i]].time))
     dbe:	49 2d       	mov	r20, r9
     dc0:	50 e0       	ldi	r21, 0x00	; 0
     dc2:	e1 e0       	ldi	r30, 0x01	; 1
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	ec 0f       	add	r30, r28
     dc8:	fd 1f       	adc	r31, r29
     dca:	e4 0f       	add	r30, r20
     dcc:	f5 1f       	adc	r31, r21
     dce:	80 81       	ld	r24, Z
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	e2 e0       	ldi	r30, 0x02	; 2
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	ec 0f       	add	r30, r28
     dda:	fd 1f       	adc	r31, r29
     ddc:	e4 0f       	add	r30, r20
     dde:	f5 1f       	adc	r31, r21
     de0:	e0 81       	ld	r30, Z
     de2:	8e 9e       	mul	r8, r30
     de4:	f0 01       	movw	r30, r0
     de6:	11 24       	eor	r1, r1
     de8:	e5 5a       	subi	r30, 0xA5	; 165
     dea:	fa 4f       	sbci	r31, 0xFA	; 250
     dec:	93 2d       	mov	r25, r3
     dee:	41 81       	ldd	r20, Z+1	; 0x01
     df0:	52 81       	ldd	r21, Z+2	; 0x02
     df2:	63 81       	ldd	r22, Z+3	; 0x03
     df4:	74 81       	ldd	r23, Z+4	; 0x04
     df6:	44 16       	cp	r4, r20
     df8:	55 06       	cpc	r5, r21
     dfa:	66 06       	cpc	r6, r22
     dfc:	77 06       	cpc	r7, r23
     dfe:	0c f0       	brlt	.+2      	; 0xe02 <current_state+0x1e0>
     e00:	92 2d       	mov	r25, r2
     e02:	99 23       	and	r25, r25
     e04:	a9 f1       	breq	.+106    	; 0xe70 <current_state+0x24e>
     e06:	82 9e       	mul	r8, r18
     e08:	f0 01       	movw	r30, r0
     e0a:	83 9e       	mul	r8, r19
     e0c:	f0 0d       	add	r31, r0
     e0e:	11 24       	eor	r1, r1
     e10:	e5 5a       	subi	r30, 0xA5	; 165
     e12:	fa 4f       	sbci	r31, 0xFA	; 250
     e14:	93 2d       	mov	r25, r3
     e16:	41 81       	ldd	r20, Z+1	; 0x01
     e18:	52 81       	ldd	r21, Z+2	; 0x02
     e1a:	63 81       	ldd	r22, Z+3	; 0x03
     e1c:	74 81       	ldd	r23, Z+4	; 0x04
     e1e:	44 16       	cp	r4, r20
     e20:	55 06       	cpc	r5, r21
     e22:	66 06       	cpc	r6, r22
     e24:	77 06       	cpc	r7, r23
     e26:	0c f4       	brge	.+2      	; 0xe2a <current_state+0x208>
     e28:	92 2d       	mov	r25, r2
     e2a:	99 23       	and	r25, r25
     e2c:	09 f1       	breq	.+66     	; 0xe70 <current_state+0x24e>
					{
						if ((events[event_indices[i - 1]].duration > 0) | (actual_events[a] != event_indices[i - 1]))
     e2e:	f7 01       	movw	r30, r14
     e30:	40 81       	ld	r20, Z
     e32:	55 27       	eor	r21, r21
     e34:	47 fd       	sbrc	r20, 7
     e36:	50 95       	com	r21
     e38:	93 2d       	mov	r25, r3
     e3a:	24 17       	cp	r18, r20
     e3c:	35 07       	cpc	r19, r21
     e3e:	09 f4       	brne	.+2      	; 0xe42 <current_state+0x220>
     e40:	92 2d       	mov	r25, r2
     e42:	91 11       	cpse	r25, r1
     e44:	13 c0       	rjmp	.+38     	; 0xe6c <current_state+0x24a>
     e46:	82 9e       	mul	r8, r18
     e48:	f0 01       	movw	r30, r0
     e4a:	83 9e       	mul	r8, r19
     e4c:	f0 0d       	add	r31, r0
     e4e:	11 24       	eor	r1, r1
     e50:	e5 5a       	subi	r30, 0xA5	; 165
     e52:	fa 4f       	sbci	r31, 0xFA	; 250
     e54:	93 2d       	mov	r25, r3
     e56:	47 81       	ldd	r20, Z+7	; 0x07
     e58:	50 85       	ldd	r21, Z+8	; 0x08
     e5a:	61 85       	ldd	r22, Z+9	; 0x09
     e5c:	72 85       	ldd	r23, Z+10	; 0x0a
     e5e:	14 16       	cp	r1, r20
     e60:	15 06       	cpc	r1, r21
     e62:	16 06       	cpc	r1, r22
     e64:	17 06       	cpc	r1, r23
     e66:	0c f0       	brlt	.+2      	; 0xe6a <current_state+0x248>
     e68:	92 2d       	mov	r25, r2
     e6a:	91 11       	cpse	r25, r1
						set_event(event_indices[i - 1]);
     e6c:	0e 94 a1 05 	call	0xb42	; 0xb42 <set_event>
				set_event(event_indices[indices_count - 1]);
			}
			else
			{
				// find events in middle
				for (uint8_t i = 1; i < indices_count; i++)
     e70:	93 94       	inc	r9
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	98 16       	cp	r9, r24
     e76:	08 f4       	brcc	.+2      	; 0xe7a <current_state+0x258>
     e78:	a2 cf       	rjmp	.-188    	; 0xdbe <current_state+0x19c>
     e7a:	0f 5f       	subi	r16, 0xFF	; 255
     e7c:	1f 4f       	sbci	r17, 0xFF	; 255
	
	// indices for every pin
	uint8_t indices_count = 0;
	uint8_t event_indices[EVENTS_SIZE];
	
	for (uint8_t a = 0; a < sizeof(actual_events); a++)
     e7e:	0c 15       	cp	r16, r12
     e80:	1d 05       	cpc	r17, r13
     e82:	09 f0       	breq	.+2      	; 0xe86 <current_state+0x264>
     e84:	08 cf       	rjmp	.-496    	; 0xc96 <current_state+0x74>
					}
				}
			}
		}
	}
}
     e86:	65 96       	adiw	r28, 0x15	; 21
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	de bf       	out	0x3e, r29	; 62
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	cd bf       	out	0x3d, r28	; 61
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	ff 90       	pop	r15
     e9c:	ef 90       	pop	r14
     e9e:	df 90       	pop	r13
     ea0:	cf 90       	pop	r12
     ea2:	bf 90       	pop	r11
     ea4:	af 90       	pop	r10
     ea6:	9f 90       	pop	r9
     ea8:	8f 90       	pop	r8
     eaa:	7f 90       	pop	r7
     eac:	6f 90       	pop	r6
     eae:	5f 90       	pop	r5
     eb0:	4f 90       	pop	r4
     eb2:	3f 90       	pop	r3
     eb4:	2f 90       	pop	r2
     eb6:	08 95       	ret

00000eb8 <load_events>:

void load_events()
{
     eb8:	cf 92       	push	r12
     eba:	df 92       	push	r13
     ebc:	ef 92       	push	r14
     ebe:	ff 92       	push	r15
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	6e 97       	sbiw	r28, 0x1e	; 30
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
	// initialize random number generator; it has to be done only once (after reset)
	srand(current_time());
     ed4:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <current_time>
     ed8:	cb 01       	movw	r24, r22
     eda:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <srand>
	
	events_count = eeprom_read_byte(&events_count_ee);
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 38 1b 	call	0x3670	; 0x3670 <__eerd_byte_m328p>
     ee6:	80 93 0c 01 	sts	0x010C, r24
	send_string("add_default\r\n");
	add_default_events();
	}
	*/
	
	if (events_count == 0)
     eea:	81 11       	cpse	r24, r1
     eec:	08 c0       	rjmp	.+16     	; 0xefe <load_events+0x46>
	{
		send_line("No events => MANUAL_MODE");
     eee:	8c e0       	ldi	r24, 0x0C	; 12
     ef0:	92 e0       	ldi	r25, 0x02	; 2
     ef2:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <send_line>
		event_mode = MANUAL_MODE;
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	80 93 56 05 	sts	0x0556, r24
     efc:	23 c0       	rjmp	.+70     	; 0xf44 <load_events+0x8c>
		return;
	}
	
	// load events into ram
	eeprom_read_block(&events, &events_ee, sizeof(struct Event) * EVENTS_SIZE);
     efe:	44 ea       	ldi	r20, 0xA4	; 164
     f00:	51 e0       	ldi	r21, 0x01	; 1
     f02:	61 e0       	ldi	r22, 0x01	; 1
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	8b e5       	ldi	r24, 0x5B	; 91
     f08:	95 e0       	ldi	r25, 0x05	; 5
     f0a:	0e 94 28 1b 	call	0x3650	; 0x3650 <__eerd_block_m328p>
	
	// prepare
	prepare_actual_events();
     f0e:	0e 94 c5 01 	call	0x38a	; 0x38a <prepare_actual_events>
	
	// print events
	print_events();
     f12:	0e 94 35 03 	call	0x66a	; 0x66a <print_events>
	
	// check current state of pins
	// if the device is power off, and later power on - it doesn't know what should be current state of pins
	
	int32_t time = current_time();
     f16:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <current_time>
     f1a:	6b 01       	movw	r12, r22
     f1c:	7c 01       	movw	r14, r24
	send_string(" start time: ");
     f1e:	85 e2       	ldi	r24, 0x25	; 37
     f20:	92 e0       	ldi	r25, 0x02	; 2
     f22:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	
	char formatted_date[30];
	timeToString(time, formatted_date);
     f26:	ae 01       	movw	r20, r28
     f28:	4f 5f       	subi	r20, 0xFF	; 255
     f2a:	5f 4f       	sbci	r21, 0xFF	; 255
     f2c:	c7 01       	movw	r24, r14
     f2e:	b6 01       	movw	r22, r12
     f30:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <timeToString>
	send_string(formatted_date);
     f34:	ce 01       	movw	r24, r28
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	send_enter();
     f3c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <send_enter>
	
	current_state();
     f40:	0e 94 11 06 	call	0xc22	; 0xc22 <current_state>
}
     f44:	6e 96       	adiw	r28, 0x1e	; 30
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	ff 90       	pop	r15
     f56:	ef 90       	pop	r14
     f58:	df 90       	pop	r13
     f5a:	cf 90       	pop	r12
     f5c:	08 95       	ret

00000f5e <set_event_mode>:
	event_mode = MANUAL_MODE;
}

void set_event_mode()
{
	event_mode = EVENT_MODE;
     f5e:	10 92 56 05 	sts	0x0556, r1
	load_events();
     f62:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <load_events>
     f66:	08 95       	ret

00000f68 <timer_event>:
/*
Additional timer event
*/
void timer_event()
{
	if (event_mode == MANUAL_MODE) {
     f68:	80 91 56 05 	lds	r24, 0x0556
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	11 f0       	breq	.+4      	; 0xf74 <timer_event+0xc>
		return;
	}

	// for pwm time dependent events - always keep up to date
	current_state();
     f70:	0e 94 11 06 	call	0xc22	; 0xc22 <current_state>
     f74:	08 95       	ret

00000f76 <setup_pwm>:

void setup_pwm()
{
	// set pins as outputs
	// set pin as output
	DDRD |= (1 << DDD6); // PWM0, OC0A
     f76:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1 << DDD5); // PWM1, OC0B
     f78:	55 9a       	sbi	0x0a, 5	; 10
	//TIMSK0 |= (1 << TOIE0);
	//TIFR0 |= (1 << TOV0);
	
	// mode 3, Fast PWM
	// def TCCR0B = TCCR0B & ~(1 << WGM02);
	TCCR0A = TCCR0A | (1 << WGM01);
     f7a:	84 b5       	in	r24, 0x24	; 36
     f7c:	82 60       	ori	r24, 0x02	; 2
     f7e:	84 bd       	out	0x24, r24	; 36
	TCCR0A = TCCR0A | (1 << WGM00);
     f80:	84 b5       	in	r24, 0x24	; 36
     f82:	81 60       	ori	r24, 0x01	; 1
     f84:	84 bd       	out	0x24, r24	; 36
	
	// clkio/1
	//TCCR0B |= (0b001 << CS00);
	
	// clkio/8
	TCCR0B |= (0b010 << CS00);
     f86:	85 b5       	in	r24, 0x25	; 37
     f88:	82 60       	ori	r24, 0x02	; 2
     f8a:	85 bd       	out	0x25, r24	; 37
	// toggle
	//TCCR0A |= (1 << COM0A0);
	//TCCR0A &=~ (1 << COM0A1);
	
	// clear/set
	TCCR0A &=~ (1 << COM0A0);
     f8c:	84 b5       	in	r24, 0x24	; 36
     f8e:	8f 7b       	andi	r24, 0xBF	; 191
     f90:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0A1);
     f92:	84 b5       	in	r24, 0x24	; 36
     f94:	80 68       	ori	r24, 0x80	; 128
     f96:	84 bd       	out	0x24, r24	; 36
     f98:	08 95       	ret

00000f9a <set_pwm0>:
value: 0..255
*/
void set_pwm0(uint8_t value)
{
	// write timer register
	OCR0A = ~ value;
     f9a:	80 95       	com	r24
     f9c:	87 bd       	out	0x27, r24	; 39
     f9e:	08 95       	ret

00000fa0 <set_pwm1>:
value: 0..255
*/
void set_pwm1(uint8_t value)
{
	// write timer register
	OCR0B = value;
     fa0:	88 bd       	out	0x28, r24	; 40
     fa2:	08 95       	ret

00000fa4 <set_pin>:
}

void set_pin(uint8_t pin, uint8_t pin_state)
{
	
	switch(pin)
     fa4:	85 30       	cpi	r24, 0x05	; 5
     fa6:	49 f0       	breq	.+18     	; 0xfba <set_pin+0x16>
     fa8:	18 f4       	brcc	.+6      	; 0xfb0 <set_pin+0xc>
     faa:	84 30       	cpi	r24, 0x04	; 4
     fac:	09 f5       	brne	.+66     	; 0xff0 <set_pin+0x4c>
     fae:	13 c0       	rjmp	.+38     	; 0xfd6 <set_pin+0x32>
     fb0:	86 30       	cpi	r24, 0x06	; 6
     fb2:	51 f0       	breq	.+20     	; 0xfc8 <set_pin+0x24>
     fb4:	87 30       	cpi	r24, 0x07	; 7
     fb6:	e1 f4       	brne	.+56     	; 0xff0 <set_pin+0x4c>
     fb8:	15 c0       	rjmp	.+42     	; 0xfe4 <set_pin+0x40>
	{
		case EXP1_PD4:
		// set pin as output
		DDRD |= (1 << DDD4);
     fba:	54 9a       	sbi	0x0a, 4	; 10
		
		if (pin_state == HIGH_STATE)
     fbc:	61 30       	cpi	r22, 0x01	; 1
     fbe:	11 f4       	brne	.+4      	; 0xfc4 <set_pin+0x20>
		// set high state
		PORTD |= (1 << DDD4);
     fc0:	5c 9a       	sbi	0x0b, 4	; 11
     fc2:	08 95       	ret
		else
		// set low state
		PORTD &=~ (1 << DDD4);
     fc4:	5c 98       	cbi	0x0b, 4	; 11
     fc6:	08 95       	ret
		break;
		
		case EXP2_PD7:
		// set pin as output
		DDRD |= (1 << DDD7);
     fc8:	57 9a       	sbi	0x0a, 7	; 10
		
		if (pin_state == HIGH_STATE)
     fca:	61 30       	cpi	r22, 0x01	; 1
     fcc:	11 f4       	brne	.+4      	; 0xfd2 <set_pin+0x2e>
		// set high state
		PORTD |= (1 << DDD7);
     fce:	5f 9a       	sbi	0x0b, 7	; 11
     fd0:	08 95       	ret
		else
		// set low state
		PORTD &=~ (1 << DDD7);
     fd2:	5f 98       	cbi	0x0b, 7	; 11
     fd4:	08 95       	ret
		break;
		
		case EXP0_PC2:
		// set pin as output
		DDRC |= (1 << DDC2);
     fd6:	3a 9a       	sbi	0x07, 2	; 7
		
		if (pin_state == HIGH_STATE)
     fd8:	61 30       	cpi	r22, 0x01	; 1
     fda:	11 f4       	brne	.+4      	; 0xfe0 <set_pin+0x3c>
		// set high state
		PORTC |=(1 << DDC2);
     fdc:	42 9a       	sbi	0x08, 2	; 8
     fde:	08 95       	ret
		else
		// set low state
		PORTC &=~ (1 << DDC2);
     fe0:	42 98       	cbi	0x08, 2	; 8
     fe2:	08 95       	ret
		break;
		
		case EXP3_PB0:
		// set pin as output
		DDRB |= (1 << DDB0);
     fe4:	20 9a       	sbi	0x04, 0	; 4
		
		if (pin_state == HIGH_STATE)
     fe6:	61 30       	cpi	r22, 0x01	; 1
     fe8:	11 f4       	brne	.+4      	; 0xfee <set_pin+0x4a>
		// set high state
		PORTB |= (1 << DDB0);
     fea:	28 9a       	sbi	0x05, 0	; 5
     fec:	08 95       	ret
		else
		// set low state
		PORTB &=~ (1 << DDB0);
     fee:	28 98       	cbi	0x05, 0	; 5
     ff0:	08 95       	ret

00000ff2 <twi_init>:
//** twi

void twi_init()
{
	// disable power reduction for TWI
	PRR &=~ (1 << PRTWI);
     ff2:	e4 e6       	ldi	r30, 0x64	; 100
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	8f 77       	andi	r24, 0x7F	; 127
     ffa:	80 83       	st	Z, r24
	// 1MHz (prescaler == 1, twbr == 7) => 400kHz
	//TWBR = 7;
	// TWSR, TWPS1, TWPS0
	
	// prescaler 1/16
	TWBR = 108;
     ffc:	8c e6       	ldi	r24, 0x6C	; 108
     ffe:	80 93 b8 00 	sts	0x00B8, r24
	TWSR |= (1 << TWPS1);
    1002:	e9 eb       	ldi	r30, 0xB9	; 185
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	82 60       	ori	r24, 0x02	; 2
    100a:	80 83       	st	Z, r24
	
	// enable twi
	TWCR |= (1 << TWEN);
    100c:	ec eb       	ldi	r30, 0xBC	; 188
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	84 60       	ori	r24, 0x04	; 4
    1014:	80 83       	st	Z, r24
    1016:	08 95       	ret

00001018 <error>:
}

void error(char string[])
{
    1018:	0f 93       	push	r16
    101a:	1f 93       	push	r17
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	2f 97       	sbiw	r28, 0x0f	; 15
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	cd bf       	out	0x3d, r28	; 61
	send_string(string);
    1030:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	
	char ts[15];
	sprintf(ts, "%#x", TWSR & 0xF8);
    1034:	80 91 b9 00 	lds	r24, 0x00B9
    1038:	88 7f       	andi	r24, 0xF8	; 248
    103a:	1f 92       	push	r1
    103c:	8f 93       	push	r24
    103e:	83 e3       	ldi	r24, 0x33	; 51
    1040:	92 e0       	ldi	r25, 0x02	; 2
    1042:	9f 93       	push	r25
    1044:	8f 93       	push	r24
    1046:	8e 01       	movw	r16, r28
    1048:	0f 5f       	subi	r16, 0xFF	; 255
    104a:	1f 4f       	sbci	r17, 0xFF	; 255
    104c:	1f 93       	push	r17
    104e:	0f 93       	push	r16
    1050:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <sprintf>
	send_string(ts);
    1054:	c8 01       	movw	r24, r16
    1056:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
}
    1066:	2f 96       	adiw	r28, 0x0f	; 15
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	1f 91       	pop	r17
    1078:	0f 91       	pop	r16
    107a:	08 95       	ret

0000107c <twi_start>:

void twi_start()
{
	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    107c:	84 ea       	ldi	r24, 0xA4	; 164
    107e:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait for TWINT flag
	while (!(TWCR & (1<<TWINT)));
    1082:	ec eb       	ldi	r30, 0xBC	; 188
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	88 23       	and	r24, r24
    108a:	ec f7       	brge	.-6      	; 0x1086 <twi_start+0xa>
	
	// if error
	if (((TWSR & 0xF8) != TW_START) & ((TWSR & 0xF8) != TW_REP_START))
    108c:	e9 eb       	ldi	r30, 0xB9	; 185
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	20 81       	ld	r18, Z
    1092:	90 81       	ld	r25, Z
    1094:	98 7f       	andi	r25, 0xF8	; 248
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 31       	cpi	r25, 0x10	; 16
    109a:	09 f4       	brne	.+2      	; 0x109e <twi_start+0x22>
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	88 23       	and	r24, r24
    10a0:	59 f0       	breq	.+22     	; 0x10b8 <twi_start+0x3c>
    10a2:	28 7f       	andi	r18, 0xF8	; 248
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	28 30       	cpi	r18, 0x08	; 8
    10a8:	09 f4       	brne	.+2      	; 0x10ac <twi_start+0x30>
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	88 23       	and	r24, r24
    10ae:	21 f0       	breq	.+8      	; 0x10b8 <twi_start+0x3c>
	error("err_start ");
    10b0:	87 e3       	ldi	r24, 0x37	; 55
    10b2:	92 e0       	ldi	r25, 0x02	; 2
    10b4:	0e 94 0c 08 	call	0x1018	; 0x1018 <error>
    10b8:	08 95       	ret

000010ba <twi_address_read>:
}

void twi_address_read(uint8_t address)
{
	// transmit address
	TWDR = address;
    10ba:	80 93 bb 00 	sts	0x00BB, r24
	
	// start transmission
	TWCR = (1<<TWINT) | (1<<TWEN);
    10be:	84 e8       	ldi	r24, 0x84	; 132
    10c0:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait for TWINT flag
	while (!(TWCR & (1<<TWINT)));
    10c4:	ec eb       	ldi	r30, 0xBC	; 188
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	88 23       	and	r24, r24
    10cc:	ec f7       	brge	.-6      	; 0x10c8 <twi_address_read+0xe>
	
	// if error
	if ((TWSR & 0xF8) != TW_MR_SLA_ACK)
    10ce:	80 91 b9 00 	lds	r24, 0x00B9
    10d2:	88 7f       	andi	r24, 0xF8	; 248
    10d4:	80 34       	cpi	r24, 0x40	; 64
    10d6:	21 f0       	breq	.+8      	; 0x10e0 <twi_address_read+0x26>
	error("err_address_read ");
    10d8:	82 e4       	ldi	r24, 0x42	; 66
    10da:	92 e0       	ldi	r25, 0x02	; 2
    10dc:	0e 94 0c 08 	call	0x1018	; 0x1018 <error>
    10e0:	08 95       	ret

000010e2 <twi_address_write>:
}

void twi_address_write(uint8_t address)
{
	// transmit address
	TWDR = address;
    10e2:	80 93 bb 00 	sts	0x00BB, r24
	
	// start transmission
	TWCR = (1<<TWINT) | (1<<TWEN);
    10e6:	84 e8       	ldi	r24, 0x84	; 132
    10e8:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait for TWINT flag
	while (!(TWCR & (1<<TWINT)));
    10ec:	ec eb       	ldi	r30, 0xBC	; 188
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	88 23       	and	r24, r24
    10f4:	ec f7       	brge	.-6      	; 0x10f0 <twi_address_write+0xe>
	
	// if error
	if ((TWSR & 0xF8) != TW_MT_SLA_ACK)
    10f6:	80 91 b9 00 	lds	r24, 0x00B9
    10fa:	88 7f       	andi	r24, 0xF8	; 248
    10fc:	88 31       	cpi	r24, 0x18	; 24
    10fe:	21 f0       	breq	.+8      	; 0x1108 <twi_address_write+0x26>
	error("err_address_write ");
    1100:	84 e5       	ldi	r24, 0x54	; 84
    1102:	92 e0       	ldi	r25, 0x02	; 2
    1104:	0e 94 0c 08 	call	0x1018	; 0x1018 <error>
    1108:	08 95       	ret

0000110a <twi_send>:
}

void twi_send(uint8_t data)
{
	// transmit data
	TWDR = data;
    110a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    110e:	84 e8       	ldi	r24, 0x84	; 132
    1110:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait for TWINT flag
	while (!(TWCR & (1<<TWINT)));
    1114:	ec eb       	ldi	r30, 0xBC	; 188
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	88 23       	and	r24, r24
    111c:	ec f7       	brge	.-6      	; 0x1118 <twi_send+0xe>
	
	// if error
	if ((TWSR & 0xF8) != TW_MT_DATA_ACK)
    111e:	80 91 b9 00 	lds	r24, 0x00B9
    1122:	88 7f       	andi	r24, 0xF8	; 248
    1124:	88 32       	cpi	r24, 0x28	; 40
    1126:	21 f0       	breq	.+8      	; 0x1130 <twi_send+0x26>
	error("err_send ");
    1128:	87 e6       	ldi	r24, 0x67	; 103
    112a:	92 e0       	ldi	r25, 0x02	; 2
    112c:	0e 94 0c 08 	call	0x1018	; 0x1018 <error>
    1130:	08 95       	ret

00001132 <twi_receive>:
}

uint8_t twi_receive()
{
	// receive data
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1132:	84 ec       	ldi	r24, 0xC4	; 196
    1134:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait for TWINT flag
	while (!(TWCR & (1<<TWINT)));
    1138:	ec eb       	ldi	r30, 0xBC	; 188
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	88 23       	and	r24, r24
    1140:	ec f7       	brge	.-6      	; 0x113c <twi_receive+0xa>
	
	// if error
	if ((TWSR & 0xF8) != TW_MR_DATA_ACK)
    1142:	80 91 b9 00 	lds	r24, 0x00B9
    1146:	88 7f       	andi	r24, 0xF8	; 248
    1148:	80 35       	cpi	r24, 0x50	; 80
    114a:	21 f0       	breq	.+8      	; 0x1154 <twi_receive+0x22>
	error("err_receive ");
    114c:	81 e7       	ldi	r24, 0x71	; 113
    114e:	92 e0       	ldi	r25, 0x02	; 2
    1150:	0e 94 0c 08 	call	0x1018	; 0x1018 <error>
	
	return TWDR;
    1154:	80 91 bb 00 	lds	r24, 0x00BB
}
    1158:	08 95       	ret

0000115a <twi_receive_last>:

uint8_t twi_receive_last()
{
	// receive data
	TWCR = (1 << TWINT) | (1 << TWEN);
    115a:	84 e8       	ldi	r24, 0x84	; 132
    115c:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait for TWINT flag
	while (!(TWCR & (1<<TWINT)));
    1160:	ec eb       	ldi	r30, 0xBC	; 188
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	88 23       	and	r24, r24
    1168:	ec f7       	brge	.-6      	; 0x1164 <twi_receive_last+0xa>

	// if error
	if ((TWSR & 0xF8) != TW_MR_DATA_NACK)
    116a:	80 91 b9 00 	lds	r24, 0x00B9
    116e:	88 7f       	andi	r24, 0xF8	; 248
    1170:	88 35       	cpi	r24, 0x58	; 88
    1172:	21 f0       	breq	.+8      	; 0x117c <twi_receive_last+0x22>
	error("err_receive_last ");
    1174:	8e e7       	ldi	r24, 0x7E	; 126
    1176:	92 e0       	ldi	r25, 0x02	; 2
    1178:	0e 94 0c 08 	call	0x1018	; 0x1018 <error>

	return TWDR;
    117c:	80 91 bb 00 	lds	r24, 0x00BB
}
    1180:	08 95       	ret

00001182 <twi_stop>:

void twi_stop()
{
	// send STOP
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    1182:	84 e9       	ldi	r24, 0x94	; 148
    1184:	80 93 bc 00 	sts	0x00BC, r24
    1188:	08 95       	ret

0000118a <timeToBcd>:

#define VL_BIT 7
#define CENTURY_BIT 7

void timeToBcd(struct Time time, uint8_t *hour_bcd, uint8_t *minute_bcd, uint8_t *second_bcd)
{
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
	// seconds
	*second_bcd = ((time.second / 10) << 4) + (time.second % 10);
    118e:	9d ec       	ldi	r25, 0xCD	; 205
    1190:	89 9f       	mul	r24, r25
    1192:	e1 2d       	mov	r30, r1
    1194:	11 24       	eor	r1, r1
    1196:	e6 95       	lsr	r30
    1198:	e6 95       	lsr	r30
    119a:	e6 95       	lsr	r30
    119c:	fe 2f       	mov	r31, r30
    119e:	ff 0f       	add	r31, r31
    11a0:	af 2f       	mov	r26, r31
    11a2:	aa 0f       	add	r26, r26
    11a4:	aa 0f       	add	r26, r26
    11a6:	fa 0f       	add	r31, r26
    11a8:	8f 1b       	sub	r24, r31
    11aa:	f0 e1       	ldi	r31, 0x10	; 16
    11ac:	ef 9f       	mul	r30, r31
    11ae:	80 0d       	add	r24, r0
    11b0:	11 24       	eor	r1, r1
    11b2:	f8 01       	movw	r30, r16
    11b4:	80 83       	st	Z, r24
	
	// minutes
	uint8_t tbcd = ((time.minute / 10) << 4) + (time.minute % 10);
    11b6:	79 9f       	mul	r23, r25
    11b8:	81 2d       	mov	r24, r1
    11ba:	11 24       	eor	r1, r1
    11bc:	86 95       	lsr	r24
    11be:	86 95       	lsr	r24
    11c0:	86 95       	lsr	r24
    11c2:	e8 2f       	mov	r30, r24
    11c4:	ee 0f       	add	r30, r30
    11c6:	fe 2f       	mov	r31, r30
    11c8:	ff 0f       	add	r31, r31
    11ca:	ff 0f       	add	r31, r31
    11cc:	ef 0f       	add	r30, r31
    11ce:	7e 1b       	sub	r23, r30
    11d0:	f0 e1       	ldi	r31, 0x10	; 16
    11d2:	8f 9f       	mul	r24, r31
    11d4:	70 0d       	add	r23, r0
    11d6:	11 24       	eor	r1, r1
	*minute_bcd = tbcd;
    11d8:	f9 01       	movw	r30, r18
    11da:	70 83       	st	Z, r23
	
	// hour
	tbcd = ((time.hour / 10) << 4) + (time.hour % 10);
    11dc:	69 9f       	mul	r22, r25
    11de:	91 2d       	mov	r25, r1
    11e0:	11 24       	eor	r1, r1
    11e2:	96 95       	lsr	r25
    11e4:	96 95       	lsr	r25
    11e6:	96 95       	lsr	r25
    11e8:	89 2f       	mov	r24, r25
    11ea:	88 0f       	add	r24, r24
    11ec:	28 2f       	mov	r18, r24
    11ee:	22 0f       	add	r18, r18
    11f0:	22 0f       	add	r18, r18
    11f2:	82 0f       	add	r24, r18
    11f4:	68 1b       	sub	r22, r24
    11f6:	f0 e1       	ldi	r31, 0x10	; 16
    11f8:	9f 9f       	mul	r25, r31
    11fa:	60 0d       	add	r22, r0
    11fc:	11 24       	eor	r1, r1
	*hour_bcd = tbcd;
    11fe:	fa 01       	movw	r30, r20
    1200:	60 83       	st	Z, r22
}
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	08 95       	ret

00001208 <set_time>:

void set_time(struct Time *time)
{
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	00 d0       	rcall	.+0      	; 0x1212 <set_time+0xa>
    1212:	1f 92       	push	r1
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
	uint8_t hour_bcd;
	uint8_t minute_bcd;
	uint8_t second_bcd;
	timeToBcd(* time, &hour_bcd, &minute_bcd, &second_bcd);
    1218:	fc 01       	movw	r30, r24
    121a:	60 81       	ld	r22, Z
    121c:	71 81       	ldd	r23, Z+1	; 0x01
    121e:	82 81       	ldd	r24, Z+2	; 0x02
    1220:	8e 01       	movw	r16, r28
    1222:	0d 5f       	subi	r16, 0xFD	; 253
    1224:	1f 4f       	sbci	r17, 0xFF	; 255
    1226:	9e 01       	movw	r18, r28
    1228:	2e 5f       	subi	r18, 0xFE	; 254
    122a:	3f 4f       	sbci	r19, 0xFF	; 255
    122c:	ae 01       	movw	r20, r28
    122e:	4f 5f       	subi	r20, 0xFF	; 255
    1230:	5f 4f       	sbci	r21, 0xFF	; 255
    1232:	0e 94 c5 08 	call	0x118a	; 0x118a <timeToBcd>
	
	// send data
	twi_start();
    1236:	0e 94 3e 08 	call	0x107c	; 0x107c <twi_start>
	twi_address_write(0xA2);
    123a:	82 ea       	ldi	r24, 0xA2	; 162
    123c:	0e 94 71 08 	call	0x10e2	; 0x10e2 <twi_address_write>
	
	twi_send(0x02);
    1240:	82 e0       	ldi	r24, 0x02	; 2
    1242:	0e 94 85 08 	call	0x110a	; 0x110a <twi_send>
	twi_send(second_bcd);
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	0e 94 85 08 	call	0x110a	; 0x110a <twi_send>
	twi_send(minute_bcd);
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	0e 94 85 08 	call	0x110a	; 0x110a <twi_send>
	twi_send(hour_bcd);
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	0e 94 85 08 	call	0x110a	; 0x110a <twi_send>
	
	twi_stop();
    1258:	0e 94 c1 08 	call	0x1182	; 0x1182 <twi_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    125c:	83 ed       	ldi	r24, 0xD3	; 211
    125e:	90 e3       	ldi	r25, 0x30	; 48
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	f1 f7       	brne	.-4      	; 0x1260 <set_time+0x58>
    1264:	00 c0       	rjmp	.+0      	; 0x1266 <set_time+0x5e>
    1266:	00 00       	nop
	_delay_ms(50);
	
}
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	1f 91       	pop	r17
    1274:	0f 91       	pop	r16
    1276:	08 95       	ret

00001278 <bcdToTime>:

/*
Converts bcd time to Time struct
*/
void bcdToTime(uint8_t hour_bcd, uint8_t minute_bcd, uint8_t second_bcd, struct Time *time)
{
    1278:	f9 01       	movw	r30, r18
	
	// minutes 6:4 and 3:0 bits
	uint8_t second = ((0b01110000 & second_bcd) >> 4) * 10 + (0b00001111 & second_bcd);
    127a:	94 2f       	mov	r25, r20
    127c:	90 77       	andi	r25, 0x70	; 112
    127e:	96 95       	lsr	r25
    1280:	96 95       	lsr	r25
    1282:	96 95       	lsr	r25
    1284:	29 2f       	mov	r18, r25
    1286:	22 0f       	add	r18, r18
    1288:	22 0f       	add	r18, r18
    128a:	92 0f       	add	r25, r18
    128c:	4f 70       	andi	r20, 0x0F	; 15
    128e:	94 0f       	add	r25, r20
	uint8_t minute = ((0b01110000 & minute_bcd) >> 4) * 10 + (0b00001111 & minute_bcd);
	
	// hours 5:4 and 3:0 bits
	uint8_t hour = ((0b00110000 & hour_bcd) >> 4) * 10 + (0b00001111 & hour_bcd);
	
	time->second = second;
    1290:	92 83       	std	Z+2, r25	; 0x02
	
	// minutes 6:4 and 3:0 bits
	uint8_t second = ((0b01110000 & second_bcd) >> 4) * 10 + (0b00001111 & second_bcd);
	
	// minutes 6:4 and 3:0 bits
	uint8_t minute = ((0b01110000 & minute_bcd) >> 4) * 10 + (0b00001111 & minute_bcd);
    1292:	96 2f       	mov	r25, r22
    1294:	90 77       	andi	r25, 0x70	; 112
    1296:	96 95       	lsr	r25
    1298:	96 95       	lsr	r25
    129a:	96 95       	lsr	r25
    129c:	29 2f       	mov	r18, r25
    129e:	22 0f       	add	r18, r18
    12a0:	22 0f       	add	r18, r18
    12a2:	92 0f       	add	r25, r18
    12a4:	6f 70       	andi	r22, 0x0F	; 15
    12a6:	96 0f       	add	r25, r22
	
	// hours 5:4 and 3:0 bits
	uint8_t hour = ((0b00110000 & hour_bcd) >> 4) * 10 + (0b00001111 & hour_bcd);
	
	time->second = second;
	time->minute = minute;
    12a8:	91 83       	std	Z+1, r25	; 0x01
	
	// minutes 6:4 and 3:0 bits
	uint8_t minute = ((0b01110000 & minute_bcd) >> 4) * 10 + (0b00001111 & minute_bcd);
	
	// hours 5:4 and 3:0 bits
	uint8_t hour = ((0b00110000 & hour_bcd) >> 4) * 10 + (0b00001111 & hour_bcd);
    12aa:	98 2f       	mov	r25, r24
    12ac:	90 73       	andi	r25, 0x30	; 48
    12ae:	96 95       	lsr	r25
    12b0:	96 95       	lsr	r25
    12b2:	96 95       	lsr	r25
    12b4:	29 2f       	mov	r18, r25
    12b6:	22 0f       	add	r18, r18
    12b8:	22 0f       	add	r18, r18
    12ba:	92 0f       	add	r25, r18
    12bc:	8f 70       	andi	r24, 0x0F	; 15
    12be:	98 0f       	add	r25, r24
	
	time->second = second;
	time->minute = minute;
	time->hour = hour;
    12c0:	90 83       	st	Z, r25
    12c2:	08 95       	ret

000012c4 <get_time>:
}

void get_time(struct Time *time)
{
    12c4:	ff 92       	push	r15
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	ec 01       	movw	r28, r24
	// PCF8563 - address for read: 0xA3, address for write: 0xA2
	
	twi_start();
    12d0:	0e 94 3e 08 	call	0x107c	; 0x107c <twi_start>
	twi_address_write(0xA2);
    12d4:	82 ea       	ldi	r24, 0xA2	; 162
    12d6:	0e 94 71 08 	call	0x10e2	; 0x10e2 <twi_address_write>
	twi_send(0x02);
    12da:	82 e0       	ldi	r24, 0x02	; 2
    12dc:	0e 94 85 08 	call	0x110a	; 0x110a <twi_send>
	
	twi_start();
    12e0:	0e 94 3e 08 	call	0x107c	; 0x107c <twi_start>
	twi_address_read(0xA3);
    12e4:	83 ea       	ldi	r24, 0xA3	; 163
    12e6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <twi_address_read>
	
	uint8_t received[3];
	
	for (uint8_t i = 0; i < 2; i++)
	received[i] = twi_receive();
    12ea:	0e 94 99 08 	call	0x1132	; 0x1132 <twi_receive>
    12ee:	f8 2e       	mov	r15, r24
    12f0:	0e 94 99 08 	call	0x1132	; 0x1132 <twi_receive>
    12f4:	08 2f       	mov	r16, r24
	
	received[2] = twi_receive_last();
    12f6:	0e 94 ad 08 	call	0x115a	; 0x115a <twi_receive_last>
    12fa:	18 2f       	mov	r17, r24
	
	twi_stop();
    12fc:	0e 94 c1 08 	call	0x1182	; 0x1182 <twi_stop>
    1300:	83 ed       	ldi	r24, 0xD3	; 211
    1302:	90 e3       	ldi	r25, 0x30	; 48
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	f1 f7       	brne	.-4      	; 0x1304 <get_time+0x40>
    1308:	00 c0       	rjmp	.+0      	; 0x130a <get_time+0x46>
    130a:	00 00       	nop
	_delay_ms(50);

	//struct Time time;
	bcdToTime(received[2], received[1], received[0], time);
    130c:	9e 01       	movw	r18, r28
    130e:	4f 2d       	mov	r20, r15
    1310:	60 2f       	mov	r22, r16
    1312:	81 2f       	mov	r24, r17
    1314:	0e 94 3c 09 	call	0x1278	; 0x1278 <bcdToTime>
}
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	1f 91       	pop	r17
    131e:	0f 91       	pop	r16
    1320:	ff 90       	pop	r15
    1322:	08 95       	ret

00001324 <read_time>:

void read_time()
{
    1324:	ef 92       	push	r14
    1326:	ff 92       	push	r15
    1328:	0f 93       	push	r16
    132a:	1f 93       	push	r17
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	a1 97       	sbiw	r28, 0x21	; 33
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
	struct Time time;
	get_time(&time);
    1340:	ce 01       	movw	r24, r28
    1342:	01 96       	adiw	r24, 0x01	; 1
    1344:	0e 94 62 09 	call	0x12c4	; 0x12c4 <get_time>
	
	char ts[30];
	send_string("time: ");
    1348:	8c e2       	ldi	r24, 0x2C	; 44
    134a:	92 e0       	ldi	r25, 0x02	; 2
    134c:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	sprintf(ts, "%d", time.hour);
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	1f 92       	push	r1
    1354:	8f 93       	push	r24
    1356:	8d e0       	ldi	r24, 0x0D	; 13
    1358:	91 e0       	ldi	r25, 0x01	; 1
    135a:	9f 93       	push	r25
    135c:	8f 93       	push	r24
    135e:	8e 01       	movw	r16, r28
    1360:	0c 5f       	subi	r16, 0xFC	; 252
    1362:	1f 4f       	sbci	r17, 0xFF	; 255
    1364:	1f 93       	push	r17
    1366:	0f 93       	push	r16
    1368:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <sprintf>
	send_string(ts);
    136c:	c8 01       	movw	r24, r16
    136e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	send_string(":");
    1372:	80 e9       	ldi	r24, 0x90	; 144
    1374:	92 e0       	ldi	r25, 0x02	; 2
    1376:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	sprintf(ts, "%02d", time.minute);
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	1f 92       	push	r1
    137e:	8f 93       	push	r24
    1380:	0f 2e       	mov	r0, r31
    1382:	f2 e9       	ldi	r31, 0x92	; 146
    1384:	ef 2e       	mov	r14, r31
    1386:	f2 e0       	ldi	r31, 0x02	; 2
    1388:	ff 2e       	mov	r15, r31
    138a:	f0 2d       	mov	r31, r0
    138c:	ff 92       	push	r15
    138e:	ef 92       	push	r14
    1390:	1f 93       	push	r17
    1392:	0f 93       	push	r16
    1394:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <sprintf>
	send_string(ts);
    1398:	c8 01       	movw	r24, r16
    139a:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	send_string(":");
    139e:	80 e9       	ldi	r24, 0x90	; 144
    13a0:	92 e0       	ldi	r25, 0x02	; 2
    13a2:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	sprintf(ts, "%02d", time.second);
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	1f 92       	push	r1
    13aa:	8f 93       	push	r24
    13ac:	ff 92       	push	r15
    13ae:	ef 92       	push	r14
    13b0:	1f 93       	push	r17
    13b2:	0f 93       	push	r16
    13b4:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <sprintf>
	send_string(ts);
    13b8:	c8 01       	movw	r24, r16
    13ba:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	send_string("\r\n");
    13be:	83 e5       	ldi	r24, 0x53	; 83
    13c0:	95 e0       	ldi	r25, 0x05	; 5
    13c2:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	cd bf       	out	0x3d, r28	; 61
}
    13d0:	a1 96       	adiw	r28, 0x21	; 33
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	ff 90       	pop	r15
    13e6:	ef 90       	pop	r14
    13e8:	08 95       	ret

000013ea <bcdToDate>:

/*
Converts bcd date to Date struct
*/
void bcdToDate(uint8_t year_bcd, uint8_t month_bcd, uint8_t day_bcd, uint8_t week_day_bcd, struct Date *date)
{
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	f8 01       	movw	r30, r16
	// day 5:4 and 3:0 bits
	uint8_t day = ((0b00110000 & day_bcd) >> 4) * 10 + (0b00001111 & day_bcd);
    13f4:	94 2f       	mov	r25, r20
    13f6:	90 73       	andi	r25, 0x30	; 48
    13f8:	96 95       	lsr	r25
    13fa:	96 95       	lsr	r25
    13fc:	96 95       	lsr	r25
    13fe:	39 2f       	mov	r19, r25
    1400:	33 0f       	add	r19, r19
    1402:	33 0f       	add	r19, r19
    1404:	93 0f       	add	r25, r19
    1406:	4f 70       	andi	r20, 0x0F	; 15
    1408:	49 0f       	add	r20, r25
	
	// week_day 2:0 bits
	// Sunday is 0, Saturday is 6
	uint8_t week_day = 0b00000111 & week_day_bcd;
    140a:	27 70       	andi	r18, 0x07	; 7
	
	// month 4:4 and 3:0 bits
	uint8_t month = ((0b00010000 & month_bcd) >> 4) * 10 + (0b00001111 & month_bcd);
    140c:	64 fb       	bst	r22, 4
    140e:	99 27       	eor	r25, r25
    1410:	90 f9       	bld	r25, 0
    1412:	99 0f       	add	r25, r25
    1414:	39 2f       	mov	r19, r25
    1416:	33 0f       	add	r19, r19
    1418:	33 0f       	add	r19, r19
    141a:	93 0f       	add	r25, r19
    141c:	36 2f       	mov	r19, r22
    141e:	3f 70       	andi	r19, 0x0F	; 15
    1420:	93 0f       	add	r25, r19
	
	// century
	uint8_t century = month_bcd & (1 << 7);
	
	// year 7:4 and 3:0 bits
	uint16_t year = ((0b11110000 & year_bcd) >> 4) * 10 + (0b00001111 & year_bcd);
    1422:	a8 2f       	mov	r26, r24
    1424:	a2 95       	swap	r26
    1426:	af 70       	andi	r26, 0x0F	; 15
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	aa 0f       	add	r26, r26
    142c:	bb 1f       	adc	r27, r27
    142e:	ed 01       	movw	r28, r26
    1430:	cc 0f       	add	r28, r28
    1432:	dd 1f       	adc	r29, r29
    1434:	cc 0f       	add	r28, r28
    1436:	dd 1f       	adc	r29, r29
    1438:	ac 0f       	add	r26, r28
    143a:	bd 1f       	adc	r27, r29
    143c:	8f 70       	andi	r24, 0x0F	; 15
    143e:	a8 0f       	add	r26, r24
    1440:	b1 1d       	adc	r27, r1
	
	if (century)
    1442:	66 23       	and	r22, r22
    1444:	1c f4       	brge	.+6      	; 0x144c <bcdToDate+0x62>
	year += 2000;
    1446:	a0 53       	subi	r26, 0x30	; 48
    1448:	b8 4f       	sbci	r27, 0xF8	; 248
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <bcdToDate+0x66>
	else
	year += 1900;
    144c:	a4 59       	subi	r26, 0x94	; 148
    144e:	b8 4f       	sbci	r27, 0xF8	; 248
	
	date->day = day;
    1450:	40 83       	st	Z, r20
	date->week_day = week_day;
    1452:	21 83       	std	Z+1, r18	; 0x01
	date->month = month;
    1454:	92 83       	std	Z+2, r25	; 0x02
	date->year = year;
    1456:	b4 83       	std	Z+4, r27	; 0x04
    1458:	a3 83       	std	Z+3, r26	; 0x03
}
    145a:	df 91       	pop	r29
    145c:	cf 91       	pop	r28
    145e:	1f 91       	pop	r17
    1460:	0f 91       	pop	r16
    1462:	08 95       	ret

00001464 <dateToBcd>:

void dateToBcd(struct Date date, uint8_t *year_bcd, uint8_t *month_bcd, uint8_t *day_bcd, uint8_t *week_day_bcd)
{
    1464:	7f 92       	push	r7
    1466:	8f 92       	push	r8
    1468:	9f 92       	push	r9
    146a:	af 92       	push	r10
    146c:	bf 92       	push	r11
    146e:	cf 92       	push	r12
    1470:	df 92       	push	r13
    1472:	ef 92       	push	r14
    1474:	ff 92       	push	r15
    1476:	0f 93       	push	r16
    1478:	1f 93       	push	r17
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	00 d0       	rcall	.+0      	; 0x1480 <dateToBcd+0x1c>
    1480:	00 d0       	rcall	.+0      	; 0x1482 <dateToBcd+0x1e>
    1482:	1f 92       	push	r1
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	7c 83       	std	Y+4, r23	; 0x04
    148a:	8d 83       	std	Y+5, r24	; 0x05
    148c:	59 01       	movw	r10, r18
    148e:	76 2e       	mov	r7, r22
    1490:	ec 81       	ldd	r30, Y+4	; 0x04
    1492:	fd 81       	ldd	r31, Y+5	; 0x05
	// year
	if (date.year >= 2000)
    1494:	e0 3d       	cpi	r30, 0xD0	; 208
    1496:	27 e0       	ldi	r18, 0x07	; 7
    1498:	f2 07       	cpc	r31, r18
    149a:	08 f4       	brcc	.+2      	; 0x149e <dateToBcd+0x3a>
    149c:	41 c0       	rjmp	.+130    	; 0x1520 <dateToBcd+0xbc>
	*year_bcd = (((date.year - 2000) / 10) << 4) + (date.year % 10);
    149e:	9f 01       	movw	r18, r30
    14a0:	20 5d       	subi	r18, 0xD0	; 208
    14a2:	37 40       	sbci	r19, 0x07	; 7
    14a4:	ad ec       	ldi	r26, 0xCD	; 205
    14a6:	bc ec       	ldi	r27, 0xCC	; 204
    14a8:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <__umulhisi3>
    14ac:	4c 01       	movw	r8, r24
    14ae:	96 94       	lsr	r9
    14b0:	87 94       	ror	r8
    14b2:	96 94       	lsr	r9
    14b4:	87 94       	ror	r8
    14b6:	96 94       	lsr	r9
    14b8:	87 94       	ror	r8
    14ba:	9f 01       	movw	r18, r30
    14bc:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <__umulhisi3>
    14c0:	96 95       	lsr	r25
    14c2:	87 95       	ror	r24
    14c4:	96 95       	lsr	r25
    14c6:	87 95       	ror	r24
    14c8:	96 95       	lsr	r25
    14ca:	87 95       	ror	r24
    14cc:	9c 01       	movw	r18, r24
    14ce:	22 0f       	add	r18, r18
    14d0:	33 1f       	adc	r19, r19
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	82 0f       	add	r24, r18
    14e0:	93 1f       	adc	r25, r19
    14e2:	e8 1b       	sub	r30, r24
    14e4:	f9 0b       	sbc	r31, r25
    14e6:	80 e1       	ldi	r24, 0x10	; 16
    14e8:	88 9e       	mul	r8, r24
    14ea:	e0 0d       	add	r30, r0
    14ec:	11 24       	eor	r1, r1
    14ee:	d5 01       	movw	r26, r10
    14f0:	ec 93       	st	X, r30
	else
	*year_bcd = (((date.year - 1900) / 10) << 4) + (date.year % 10);
	
	// month
	uint8_t tbcd = ((date.month / 10) << 4) + (date.month % 10);
    14f2:	8d ec       	ldi	r24, 0xCD	; 205
    14f4:	78 9e       	mul	r7, r24
    14f6:	81 2d       	mov	r24, r1
    14f8:	11 24       	eor	r1, r1
    14fa:	86 95       	lsr	r24
    14fc:	86 95       	lsr	r24
    14fe:	86 95       	lsr	r24
    1500:	98 2f       	mov	r25, r24
    1502:	99 0f       	add	r25, r25
    1504:	29 2f       	mov	r18, r25
    1506:	22 0f       	add	r18, r18
    1508:	22 0f       	add	r18, r18
    150a:	92 0f       	add	r25, r18
    150c:	79 1a       	sub	r7, r25
    150e:	b0 e1       	ldi	r27, 0x10	; 16
    1510:	8b 9f       	mul	r24, r27
    1512:	70 0c       	add	r7, r0
    1514:	11 24       	eor	r1, r1
    1516:	87 2d       	mov	r24, r7
	*month_bcd = tbcd;
	
	// set century flag
	if (date.year >= 2000)
	*month_bcd |= (1 << CENTURY_BIT);
    1518:	80 68       	ori	r24, 0x80	; 128
    151a:	f8 01       	movw	r30, r16
    151c:	80 83       	st	Z, r24
    151e:	3e c0       	rjmp	.+124    	; 0x159c <dateToBcd+0x138>
{
	// year
	if (date.year >= 2000)
	*year_bcd = (((date.year - 2000) / 10) << 4) + (date.year % 10);
	else
	*year_bcd = (((date.year - 1900) / 10) << 4) + (date.year % 10);
    1520:	9f 01       	movw	r18, r30
    1522:	2c 56       	subi	r18, 0x6C	; 108
    1524:	37 40       	sbci	r19, 0x07	; 7
    1526:	ad ec       	ldi	r26, 0xCD	; 205
    1528:	bc ec       	ldi	r27, 0xCC	; 204
    152a:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <__umulhisi3>
    152e:	4c 01       	movw	r8, r24
    1530:	96 94       	lsr	r9
    1532:	87 94       	ror	r8
    1534:	96 94       	lsr	r9
    1536:	87 94       	ror	r8
    1538:	96 94       	lsr	r9
    153a:	87 94       	ror	r8
    153c:	9f 01       	movw	r18, r30
    153e:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <__umulhisi3>
    1542:	96 95       	lsr	r25
    1544:	87 95       	ror	r24
    1546:	96 95       	lsr	r25
    1548:	87 95       	ror	r24
    154a:	96 95       	lsr	r25
    154c:	87 95       	ror	r24
    154e:	9c 01       	movw	r18, r24
    1550:	22 0f       	add	r18, r18
    1552:	33 1f       	adc	r19, r19
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	82 0f       	add	r24, r18
    1562:	93 1f       	adc	r25, r19
    1564:	e8 1b       	sub	r30, r24
    1566:	f9 0b       	sbc	r31, r25
    1568:	20 e1       	ldi	r18, 0x10	; 16
    156a:	82 9e       	mul	r8, r18
    156c:	e0 0d       	add	r30, r0
    156e:	11 24       	eor	r1, r1
    1570:	d5 01       	movw	r26, r10
    1572:	ec 93       	st	X, r30
	
	// month
	uint8_t tbcd = ((date.month / 10) << 4) + (date.month % 10);
    1574:	8d ec       	ldi	r24, 0xCD	; 205
    1576:	78 9e       	mul	r7, r24
    1578:	81 2d       	mov	r24, r1
    157a:	11 24       	eor	r1, r1
    157c:	86 95       	lsr	r24
    157e:	86 95       	lsr	r24
    1580:	86 95       	lsr	r24
    1582:	98 2f       	mov	r25, r24
    1584:	99 0f       	add	r25, r25
    1586:	29 2f       	mov	r18, r25
    1588:	22 0f       	add	r18, r18
    158a:	22 0f       	add	r18, r18
    158c:	92 0f       	add	r25, r18
    158e:	79 1a       	sub	r7, r25
    1590:	b0 e1       	ldi	r27, 0x10	; 16
    1592:	8b 9f       	mul	r24, r27
    1594:	70 0c       	add	r7, r0
    1596:	11 24       	eor	r1, r1
	*month_bcd = tbcd;
    1598:	f8 01       	movw	r30, r16
    159a:	70 82       	st	Z, r7
	// set century flag
	if (date.year >= 2000)
	*month_bcd |= (1 << CENTURY_BIT);
	
	// day
	tbcd = ((date.day / 10) << 4) + (date.day % 10);
    159c:	8d ec       	ldi	r24, 0xCD	; 205
    159e:	48 9f       	mul	r20, r24
    15a0:	91 2d       	mov	r25, r1
    15a2:	11 24       	eor	r1, r1
    15a4:	96 95       	lsr	r25
    15a6:	96 95       	lsr	r25
    15a8:	96 95       	lsr	r25
    15aa:	29 2f       	mov	r18, r25
    15ac:	22 0f       	add	r18, r18
    15ae:	32 2f       	mov	r19, r18
    15b0:	33 0f       	add	r19, r19
    15b2:	33 0f       	add	r19, r19
    15b4:	23 0f       	add	r18, r19
    15b6:	42 1b       	sub	r20, r18
    15b8:	f0 e1       	ldi	r31, 0x10	; 16
    15ba:	9f 9f       	mul	r25, r31
    15bc:	40 0d       	add	r20, r0
    15be:	11 24       	eor	r1, r1
	*day_bcd = tbcd;
    15c0:	d7 01       	movw	r26, r14
    15c2:	4c 93       	st	X, r20
	
	// week_day
	tbcd = ((date.week_day / 10) << 4) + (date.week_day % 10);
    15c4:	58 9f       	mul	r21, r24
    15c6:	81 2d       	mov	r24, r1
    15c8:	11 24       	eor	r1, r1
    15ca:	86 95       	lsr	r24
    15cc:	86 95       	lsr	r24
    15ce:	86 95       	lsr	r24
    15d0:	98 2f       	mov	r25, r24
    15d2:	99 0f       	add	r25, r25
    15d4:	29 2f       	mov	r18, r25
    15d6:	22 0f       	add	r18, r18
    15d8:	22 0f       	add	r18, r18
    15da:	92 0f       	add	r25, r18
    15dc:	59 1b       	sub	r21, r25
    15de:	b0 e1       	ldi	r27, 0x10	; 16
    15e0:	8b 9f       	mul	r24, r27
    15e2:	50 0d       	add	r21, r0
    15e4:	11 24       	eor	r1, r1
	*week_day_bcd = tbcd;
    15e6:	f6 01       	movw	r30, r12
    15e8:	50 83       	st	Z, r21
	
}
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	1f 91       	pop	r17
    15fa:	0f 91       	pop	r16
    15fc:	ff 90       	pop	r15
    15fe:	ef 90       	pop	r14
    1600:	df 90       	pop	r13
    1602:	cf 90       	pop	r12
    1604:	bf 90       	pop	r11
    1606:	af 90       	pop	r10
    1608:	9f 90       	pop	r9
    160a:	8f 90       	pop	r8
    160c:	7f 90       	pop	r7
    160e:	08 95       	ret

00001610 <get_date>:

void get_date(struct Date *date)
{
    1610:	ef 92       	push	r14
    1612:	ff 92       	push	r15
    1614:	0f 93       	push	r16
    1616:	1f 93       	push	r17
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	8c 01       	movw	r16, r24
	// PCF8563 - address for read: 0xA3, address for write: 0xA2
	
	twi_start();
    161e:	0e 94 3e 08 	call	0x107c	; 0x107c <twi_start>
	twi_address_write(0xA2);
    1622:	82 ea       	ldi	r24, 0xA2	; 162
    1624:	0e 94 71 08 	call	0x10e2	; 0x10e2 <twi_address_write>
	twi_send(0x05);
    1628:	85 e0       	ldi	r24, 0x05	; 5
    162a:	0e 94 85 08 	call	0x110a	; 0x110a <twi_send>
	
	twi_start();
    162e:	0e 94 3e 08 	call	0x107c	; 0x107c <twi_start>
	twi_address_read(0xA3);
    1632:	83 ea       	ldi	r24, 0xA3	; 163
    1634:	0e 94 5d 08 	call	0x10ba	; 0x10ba <twi_address_read>
	
	uint8_t received[4];
	
	for (uint8_t i = 0; i < 3; i++)
	received[i] = twi_receive();
    1638:	0e 94 99 08 	call	0x1132	; 0x1132 <twi_receive>
    163c:	f8 2e       	mov	r15, r24
    163e:	0e 94 99 08 	call	0x1132	; 0x1132 <twi_receive>
    1642:	e8 2e       	mov	r14, r24
    1644:	0e 94 99 08 	call	0x1132	; 0x1132 <twi_receive>
    1648:	d8 2f       	mov	r29, r24
	
	received[3] = twi_receive_last();
    164a:	0e 94 ad 08 	call	0x115a	; 0x115a <twi_receive_last>
    164e:	c8 2f       	mov	r28, r24
	
	twi_stop();
    1650:	0e 94 c1 08 	call	0x1182	; 0x1182 <twi_stop>

	// year, month, day, week_day
	bcdToDate(received[3], received[2], received[0], received[1], date);
    1654:	2e 2d       	mov	r18, r14
    1656:	4f 2d       	mov	r20, r15
    1658:	6d 2f       	mov	r22, r29
    165a:	8c 2f       	mov	r24, r28
    165c:	0e 94 f5 09 	call	0x13ea	; 0x13ea <bcdToDate>
	
}
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	1f 91       	pop	r17
    1666:	0f 91       	pop	r16
    1668:	ff 90       	pop	r15
    166a:	ef 90       	pop	r14
    166c:	08 95       	ret

0000166e <set_date>:

void set_date(struct Date *date)
{
    166e:	cf 92       	push	r12
    1670:	df 92       	push	r13
    1672:	ef 92       	push	r14
    1674:	ff 92       	push	r15
    1676:	0f 93       	push	r16
    1678:	1f 93       	push	r17
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	00 d0       	rcall	.+0      	; 0x1680 <set_date+0x12>
    1680:	00 d0       	rcall	.+0      	; 0x1682 <set_date+0x14>
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	fc 01       	movw	r30, r24
	uint8_t year_bcd;
	uint8_t month_bcd;
	uint8_t day_bcd;
	uint8_t week_day_bcd;
	
	dateToBcd(*date, &year_bcd, &month_bcd, &day_bcd, &week_day_bcd);
    1688:	68 94       	set
    168a:	cc 24       	eor	r12, r12
    168c:	c2 f8       	bld	r12, 2
    168e:	d1 2c       	mov	r13, r1
    1690:	cc 0e       	add	r12, r28
    1692:	dd 1e       	adc	r13, r29
    1694:	0f 2e       	mov	r0, r31
    1696:	f3 e0       	ldi	r31, 0x03	; 3
    1698:	ef 2e       	mov	r14, r31
    169a:	f1 2c       	mov	r15, r1
    169c:	f0 2d       	mov	r31, r0
    169e:	ec 0e       	add	r14, r28
    16a0:	fd 1e       	adc	r15, r29
    16a2:	8e 01       	movw	r16, r28
    16a4:	0e 5f       	subi	r16, 0xFE	; 254
    16a6:	1f 4f       	sbci	r17, 0xFF	; 255
    16a8:	9e 01       	movw	r18, r28
    16aa:	2f 5f       	subi	r18, 0xFF	; 255
    16ac:	3f 4f       	sbci	r19, 0xFF	; 255
    16ae:	40 81       	ld	r20, Z
    16b0:	51 81       	ldd	r21, Z+1	; 0x01
    16b2:	62 81       	ldd	r22, Z+2	; 0x02
    16b4:	73 81       	ldd	r23, Z+3	; 0x03
    16b6:	84 81       	ldd	r24, Z+4	; 0x04
    16b8:	0e 94 32 0a 	call	0x1464	; 0x1464 <dateToBcd>
	
	// send data
	twi_start();
    16bc:	0e 94 3e 08 	call	0x107c	; 0x107c <twi_start>
	twi_address_write(0xA2);
    16c0:	82 ea       	ldi	r24, 0xA2	; 162
    16c2:	0e 94 71 08 	call	0x10e2	; 0x10e2 <twi_address_write>
	
	twi_send(0x05);
    16c6:	85 e0       	ldi	r24, 0x05	; 5
    16c8:	0e 94 85 08 	call	0x110a	; 0x110a <twi_send>
	twi_send(day_bcd);
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	0e 94 85 08 	call	0x110a	; 0x110a <twi_send>
	twi_send(week_day_bcd);
    16d2:	8c 81       	ldd	r24, Y+4	; 0x04
    16d4:	0e 94 85 08 	call	0x110a	; 0x110a <twi_send>
	twi_send(month_bcd);
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	0e 94 85 08 	call	0x110a	; 0x110a <twi_send>
	twi_send(year_bcd);
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	0e 94 85 08 	call	0x110a	; 0x110a <twi_send>
	
	twi_stop();
    16e4:	0e 94 c1 08 	call	0x1182	; 0x1182 <twi_stop>
    16e8:	83 ed       	ldi	r24, 0xD3	; 211
    16ea:	90 e3       	ldi	r25, 0x30	; 48
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	f1 f7       	brne	.-4      	; 0x16ec <set_date+0x7e>
    16f0:	00 c0       	rjmp	.+0      	; 0x16f2 <set_date+0x84>
    16f2:	00 00       	nop
	_delay_ms(50);
}
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	1f 91       	pop	r17
    1702:	0f 91       	pop	r16
    1704:	ff 90       	pop	r15
    1706:	ef 90       	pop	r14
    1708:	df 90       	pop	r13
    170a:	cf 90       	pop	r12
    170c:	08 95       	ret

0000170e <parse_time>:

/*
Converts string date (for example: "1530") to time and date (number of seconds)
*/
int32_t parse_time(char *time)
{
    170e:	0f 93       	push	r16
    1710:	1f 93       	push	r17
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	2a 97       	sbiw	r28, 0x0a	; 10
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	cd bf       	out	0x3d, r28	; 61
    1726:	8c 01       	movw	r16, r24
	char tca[6];
	
	strncpy(tca, time, 2);
    1728:	42 e0       	ldi	r20, 0x02	; 2
    172a:	50 e0       	ldi	r21, 0x00	; 0
    172c:	bc 01       	movw	r22, r24
    172e:	ce 01       	movw	r24, r28
    1730:	01 96       	adiw	r24, 0x01	; 1
    1732:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <strncpy>
	
	tca[2] = 0; // string has to have null on its end
    1736:	1b 82       	std	Y+3, r1	; 0x03
	int16_t hour = 0;
    1738:	18 86       	std	Y+8, r1	; 0x08
    173a:	1f 82       	std	Y+7, r1	; 0x07
	int result = parse_int(tca, &hour);
    173c:	be 01       	movw	r22, r28
    173e:	69 5f       	subi	r22, 0xF9	; 249
    1740:	7f 4f       	sbci	r23, 0xFF	; 255
    1742:	ce 01       	movw	r24, r28
    1744:	01 96       	adiw	r24, 0x01	; 1
    1746:	0e 94 59 00 	call	0xb2	; 0xb2 <parse_int>
	
	if (result == 0)
    174a:	89 2b       	or	r24, r25
    174c:	69 f1       	breq	.+90     	; 0x17a8 <parse_time+0x9a>
		return -1;
	
	strncpy(tca, time + 2, 2);
    174e:	b8 01       	movw	r22, r16
    1750:	6e 5f       	subi	r22, 0xFE	; 254
    1752:	7f 4f       	sbci	r23, 0xFF	; 255
    1754:	42 e0       	ldi	r20, 0x02	; 2
    1756:	50 e0       	ldi	r21, 0x00	; 0
    1758:	ce 01       	movw	r24, r28
    175a:	01 96       	adiw	r24, 0x01	; 1
    175c:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <strncpy>
	tca[2] = 0; // string has to have null on its end
    1760:	1b 82       	std	Y+3, r1	; 0x03
	int16_t minute = 0;
    1762:	1a 86       	std	Y+10, r1	; 0x0a
    1764:	19 86       	std	Y+9, r1	; 0x09
	result = parse_int(tca, &minute);
    1766:	be 01       	movw	r22, r28
    1768:	67 5f       	subi	r22, 0xF7	; 247
    176a:	7f 4f       	sbci	r23, 0xFF	; 255
    176c:	ce 01       	movw	r24, r28
    176e:	01 96       	adiw	r24, 0x01	; 1
    1770:	0e 94 59 00 	call	0xb2	; 0xb2 <parse_int>
	
	if (result == 0)
    1774:	89 2b       	or	r24, r25
    1776:	e1 f0       	breq	.+56     	; 0x17b0 <parse_time+0xa2>
	return -1;
	
	int32_t ti = ((int32_t) hour * 60 * 60) + (minute * 60);
    1778:	af 81       	ldd	r26, Y+7	; 0x07
    177a:	b8 85       	ldd	r27, Y+8	; 0x08
    177c:	20 e1       	ldi	r18, 0x10	; 16
    177e:	3e e0       	ldi	r19, 0x0E	; 14
    1780:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <__usmulhisi3>
    1784:	49 85       	ldd	r20, Y+9	; 0x09
    1786:	5a 85       	ldd	r21, Y+10	; 0x0a
    1788:	ec e3       	ldi	r30, 0x3C	; 60
    178a:	e4 9f       	mul	r30, r20
    178c:	90 01       	movw	r18, r0
    178e:	e5 9f       	mul	r30, r21
    1790:	30 0d       	add	r19, r0
    1792:	11 24       	eor	r1, r1
    1794:	89 01       	movw	r16, r18
    1796:	22 27       	eor	r18, r18
    1798:	17 fd       	sbrc	r17, 7
    179a:	20 95       	com	r18
    179c:	32 2f       	mov	r19, r18
    179e:	06 0f       	add	r16, r22
    17a0:	17 1f       	adc	r17, r23
    17a2:	28 1f       	adc	r18, r24
    17a4:	39 1f       	adc	r19, r25
    17a6:	07 c0       	rjmp	.+14     	; 0x17b6 <parse_time+0xa8>
	tca[2] = 0; // string has to have null on its end
	int16_t hour = 0;
	int result = parse_int(tca, &hour);
	
	if (result == 0)
		return -1;
    17a8:	0f ef       	ldi	r16, 0xFF	; 255
    17aa:	1f ef       	ldi	r17, 0xFF	; 255
    17ac:	98 01       	movw	r18, r16
    17ae:	03 c0       	rjmp	.+6      	; 0x17b6 <parse_time+0xa8>
	tca[2] = 0; // string has to have null on its end
	int16_t minute = 0;
	result = parse_int(tca, &minute);
	
	if (result == 0)
	return -1;
    17b0:	0f ef       	ldi	r16, 0xFF	; 255
    17b2:	1f ef       	ldi	r17, 0xFF	; 255
    17b4:	98 01       	movw	r18, r16
	
	int32_t ti = ((int32_t) hour * 60 * 60) + (minute * 60);
	
	return ti;
}
    17b6:	60 2f       	mov	r22, r16
    17b8:	71 2f       	mov	r23, r17
    17ba:	82 2f       	mov	r24, r18
    17bc:	93 2f       	mov	r25, r19
    17be:	2a 96       	adiw	r28, 0x0a	; 10
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	de bf       	out	0x3e, r29	; 62
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	cd bf       	out	0x3d, r28	; 61
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	1f 91       	pop	r17
    17d0:	0f 91       	pop	r16
    17d2:	08 95       	ret

000017d4 <timeToString>:

/*
Converts time from an integer to format like 1530
*/
void timeToString(int32_t time_value, char *string)
{
    17d4:	8f 92       	push	r8
    17d6:	9f 92       	push	r9
    17d8:	af 92       	push	r10
    17da:	bf 92       	push	r11
    17dc:	cf 92       	push	r12
    17de:	df 92       	push	r13
    17e0:	ef 92       	push	r14
    17e2:	ff 92       	push	r15
    17e4:	0f 93       	push	r16
    17e6:	1f 93       	push	r17
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	6e 97       	sbiw	r28, 0x1e	; 30
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	8a 01       	movw	r16, r20
	time_value = time_value % ((int32_t) 24 *60 * 60);
    17fe:	20 e8       	ldi	r18, 0x80	; 128
    1800:	31 e5       	ldi	r19, 0x51	; 81
    1802:	41 e0       	ldi	r20, 0x01	; 1
    1804:	50 e0       	ldi	r21, 0x00	; 0
    1806:	0e 94 12 15 	call	0x2a24	; 0x2a24 <__divmodsi4>
	int32_t hour = time_value / (60 * 60);
    180a:	20 e1       	ldi	r18, 0x10	; 16
    180c:	3e e0       	ldi	r19, 0x0E	; 14
    180e:	40 e0       	ldi	r20, 0x00	; 0
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	0e 94 12 15 	call	0x2a24	; 0x2a24 <__divmodsi4>
    1816:	6b 01       	movw	r12, r22
    1818:	7c 01       	movw	r14, r24
	time_value = time_value % (60 * 60);
	int16_t minute = time_value / (60);
	
	char ts[30];
	
	sprintf(ts, "%02d", (int8_t) hour);
    181a:	82 2f       	mov	r24, r18
    181c:	99 27       	eor	r25, r25
    181e:	87 fd       	sbrc	r24, 7
    1820:	90 95       	com	r25
    1822:	9f 93       	push	r25
    1824:	2f 93       	push	r18
    1826:	0f 2e       	mov	r0, r31
    1828:	f2 e9       	ldi	r31, 0x92	; 146
    182a:	8f 2e       	mov	r8, r31
    182c:	f2 e0       	ldi	r31, 0x02	; 2
    182e:	9f 2e       	mov	r9, r31
    1830:	f0 2d       	mov	r31, r0
    1832:	9f 92       	push	r9
    1834:	8f 92       	push	r8
    1836:	aa 24       	eor	r10, r10
    1838:	a3 94       	inc	r10
    183a:	b1 2c       	mov	r11, r1
    183c:	ac 0e       	add	r10, r28
    183e:	bd 1e       	adc	r11, r29
    1840:	bf 92       	push	r11
    1842:	af 92       	push	r10
    1844:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <sprintf>
	strncpy(string, ts, 2);
    1848:	42 e0       	ldi	r20, 0x02	; 2
    184a:	50 e0       	ldi	r21, 0x00	; 0
    184c:	b5 01       	movw	r22, r10
    184e:	c8 01       	movw	r24, r16
    1850:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <strncpy>
{
	time_value = time_value % ((int32_t) 24 *60 * 60);
	int32_t hour = time_value / (60 * 60);
	
	time_value = time_value % (60 * 60);
	int16_t minute = time_value / (60);
    1854:	c7 01       	movw	r24, r14
    1856:	b6 01       	movw	r22, r12
    1858:	2c e3       	ldi	r18, 0x3C	; 60
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	40 e0       	ldi	r20, 0x00	; 0
    185e:	50 e0       	ldi	r21, 0x00	; 0
    1860:	0e 94 12 15 	call	0x2a24	; 0x2a24 <__divmodsi4>
	char ts[30];
	
	sprintf(ts, "%02d", (int8_t) hour);
	strncpy(string, ts, 2);
	
	sprintf(ts, "%02d", (int8_t) minute);
    1864:	82 2f       	mov	r24, r18
    1866:	99 27       	eor	r25, r25
    1868:	87 fd       	sbrc	r24, 7
    186a:	90 95       	com	r25
    186c:	9f 93       	push	r25
    186e:	2f 93       	push	r18
    1870:	9f 92       	push	r9
    1872:	8f 92       	push	r8
    1874:	bf 92       	push	r11
    1876:	af 92       	push	r10
    1878:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <sprintf>
	strncpy(string + 2, ts, 2);
    187c:	42 e0       	ldi	r20, 0x02	; 2
    187e:	50 e0       	ldi	r21, 0x00	; 0
    1880:	b5 01       	movw	r22, r10
    1882:	c8 01       	movw	r24, r16
    1884:	02 96       	adiw	r24, 0x02	; 2
    1886:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <strncpy>
	
	string[4] = 0x00;
    188a:	f8 01       	movw	r30, r16
    188c:	14 82       	std	Z+4, r1	; 0x04
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
}
    1898:	6e 96       	adiw	r28, 0x1e	; 30
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	de bf       	out	0x3e, r29	; 62
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	cd bf       	out	0x3d, r28	; 61
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	1f 91       	pop	r17
    18aa:	0f 91       	pop	r16
    18ac:	ff 90       	pop	r15
    18ae:	ef 90       	pop	r14
    18b0:	df 90       	pop	r13
    18b2:	cf 90       	pop	r12
    18b4:	bf 90       	pop	r11
    18b6:	af 90       	pop	r10
    18b8:	9f 90       	pop	r9
    18ba:	8f 90       	pop	r8
    18bc:	08 95       	ret

000018be <weekdays>:
/*
Converts name of the day to a number
for example: MON => 1
*/
int weekdays(char *day)
{
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	ec 01       	movw	r28, r24
	if (strcmp(day, "MON") == 0)
    18c4:	67 e9       	ldi	r22, 0x97	; 151
    18c6:	72 e0       	ldi	r23, 0x02	; 2
    18c8:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    18cc:	28 2f       	mov	r18, r24
    18ce:	39 2f       	mov	r19, r25
    18d0:	23 2b       	or	r18, r19
    18d2:	81 f1       	breq	.+96     	; 0x1934 <weekdays+0x76>
	return 1;
	else if (strcmp(day, "TUE") == 0)
    18d4:	6b e9       	ldi	r22, 0x9B	; 155
    18d6:	72 e0       	ldi	r23, 0x02	; 2
    18d8:	ce 01       	movw	r24, r28
    18da:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    18de:	28 2f       	mov	r18, r24
    18e0:	39 2f       	mov	r19, r25
    18e2:	23 2b       	or	r18, r19
    18e4:	51 f1       	breq	.+84     	; 0x193a <weekdays+0x7c>
	return 2;
	else if (strcmp(day, "WED") == 0)
    18e6:	6f e9       	ldi	r22, 0x9F	; 159
    18e8:	72 e0       	ldi	r23, 0x02	; 2
    18ea:	ce 01       	movw	r24, r28
    18ec:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    18f0:	28 2f       	mov	r18, r24
    18f2:	39 2f       	mov	r19, r25
    18f4:	23 2b       	or	r18, r19
    18f6:	21 f1       	breq	.+72     	; 0x1940 <weekdays+0x82>
	return 3;
	else if (strcmp(day, "THU") == 0)
    18f8:	63 ea       	ldi	r22, 0xA3	; 163
    18fa:	72 e0       	ldi	r23, 0x02	; 2
    18fc:	ce 01       	movw	r24, r28
    18fe:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    1902:	28 2f       	mov	r18, r24
    1904:	39 2f       	mov	r19, r25
    1906:	23 2b       	or	r18, r19
    1908:	f1 f0       	breq	.+60     	; 0x1946 <weekdays+0x88>
	return 4;
	else if (strcmp(day, "FRI") == 0)
    190a:	67 ea       	ldi	r22, 0xA7	; 167
    190c:	72 e0       	ldi	r23, 0x02	; 2
    190e:	ce 01       	movw	r24, r28
    1910:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    1914:	28 2f       	mov	r18, r24
    1916:	39 2f       	mov	r19, r25
    1918:	23 2b       	or	r18, r19
    191a:	c1 f0       	breq	.+48     	; 0x194c <weekdays+0x8e>
	return 5;
	else if (strcmp(day, "SAT") == 0)
    191c:	6b ea       	ldi	r22, 0xAB	; 171
    191e:	72 e0       	ldi	r23, 0x02	; 2
    1920:	ce 01       	movw	r24, r28
    1922:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    1926:	28 2f       	mov	r18, r24
    1928:	39 2f       	mov	r19, r25
    192a:	23 2b       	or	r18, r19
    192c:	91 f4       	brne	.+36     	; 0x1952 <weekdays+0x94>
	return 6;
    192e:	26 e0       	ldi	r18, 0x06	; 6
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	11 c0       	rjmp	.+34     	; 0x1956 <weekdays+0x98>
for example: MON => 1
*/
int weekdays(char *day)
{
	if (strcmp(day, "MON") == 0)
	return 1;
    1934:	21 e0       	ldi	r18, 0x01	; 1
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	0e c0       	rjmp	.+28     	; 0x1956 <weekdays+0x98>
	else if (strcmp(day, "TUE") == 0)
	return 2;
    193a:	22 e0       	ldi	r18, 0x02	; 2
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	0b c0       	rjmp	.+22     	; 0x1956 <weekdays+0x98>
	else if (strcmp(day, "WED") == 0)
	return 3;
    1940:	23 e0       	ldi	r18, 0x03	; 3
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	08 c0       	rjmp	.+16     	; 0x1956 <weekdays+0x98>
	else if (strcmp(day, "THU") == 0)
	return 4;
    1946:	24 e0       	ldi	r18, 0x04	; 4
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	05 c0       	rjmp	.+10     	; 0x1956 <weekdays+0x98>
	else if (strcmp(day, "FRI") == 0)
	return 5;
    194c:	25 e0       	ldi	r18, 0x05	; 5
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <weekdays+0x98>
	else if (strcmp(day, "SAT") == 0)
	return 6;
	else if (strcmp(day, "SUN") == 0)
	return 0;
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
	
	return 0;
}
    1956:	82 2f       	mov	r24, r18
    1958:	93 2f       	mov	r25, r19
    195a:	df 91       	pop	r29
    195c:	cf 91       	pop	r28
    195e:	08 95       	ret

00001960 <days>:
Converts number of day to its name
For example: 5 => FRI
*/
char * days(int weekday)
{
	if (weekday == 0)
    1960:	00 97       	sbiw	r24, 0x00	; 0
    1962:	a1 f0       	breq	.+40     	; 0x198c <days+0x2c>
	return "SUN";
	else if (weekday == 1)
    1964:	81 30       	cpi	r24, 0x01	; 1
    1966:	91 05       	cpc	r25, r1
    1968:	a1 f0       	breq	.+40     	; 0x1992 <days+0x32>
	return "MON";
	else if (weekday == 2)
    196a:	82 30       	cpi	r24, 0x02	; 2
    196c:	91 05       	cpc	r25, r1
    196e:	a1 f0       	breq	.+40     	; 0x1998 <days+0x38>
	return "TUE";
	else if (weekday == 3)
    1970:	83 30       	cpi	r24, 0x03	; 3
    1972:	91 05       	cpc	r25, r1
    1974:	a1 f0       	breq	.+40     	; 0x199e <days+0x3e>
	return "WED";
	else if (weekday == 4)
    1976:	84 30       	cpi	r24, 0x04	; 4
    1978:	91 05       	cpc	r25, r1
    197a:	a1 f0       	breq	.+40     	; 0x19a4 <days+0x44>
	return "THU";
	else if (weekday == 5)
    197c:	85 30       	cpi	r24, 0x05	; 5
    197e:	91 05       	cpc	r25, r1
    1980:	a1 f0       	breq	.+40     	; 0x19aa <days+0x4a>
	return "FRI";
	else if (weekday == 6)
    1982:	06 97       	sbiw	r24, 0x06	; 6
    1984:	a9 f4       	brne	.+42     	; 0x19b0 <days+0x50>
	return "SAT";
    1986:	2b ea       	ldi	r18, 0xAB	; 171
    1988:	32 e0       	ldi	r19, 0x02	; 2
    198a:	14 c0       	rjmp	.+40     	; 0x19b4 <days+0x54>
For example: 5 => FRI
*/
char * days(int weekday)
{
	if (weekday == 0)
	return "SUN";
    198c:	2f ea       	ldi	r18, 0xAF	; 175
    198e:	32 e0       	ldi	r19, 0x02	; 2
    1990:	11 c0       	rjmp	.+34     	; 0x19b4 <days+0x54>
	else if (weekday == 1)
	return "MON";
    1992:	27 e9       	ldi	r18, 0x97	; 151
    1994:	32 e0       	ldi	r19, 0x02	; 2
    1996:	0e c0       	rjmp	.+28     	; 0x19b4 <days+0x54>
	else if (weekday == 2)
	return "TUE";
    1998:	2b e9       	ldi	r18, 0x9B	; 155
    199a:	32 e0       	ldi	r19, 0x02	; 2
    199c:	0b c0       	rjmp	.+22     	; 0x19b4 <days+0x54>
	else if (weekday == 3)
	return "WED";
    199e:	2f e9       	ldi	r18, 0x9F	; 159
    19a0:	32 e0       	ldi	r19, 0x02	; 2
    19a2:	08 c0       	rjmp	.+16     	; 0x19b4 <days+0x54>
	else if (weekday == 4)
	return "THU";
    19a4:	23 ea       	ldi	r18, 0xA3	; 163
    19a6:	32 e0       	ldi	r19, 0x02	; 2
    19a8:	05 c0       	rjmp	.+10     	; 0x19b4 <days+0x54>
	else if (weekday == 5)
	return "FRI";
    19aa:	27 ea       	ldi	r18, 0xA7	; 167
    19ac:	32 e0       	ldi	r19, 0x02	; 2
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <days+0x54>
	else if (weekday == 6)
	return "SAT";
	
	return "unknown day";
    19b0:	23 eb       	ldi	r18, 0xB3	; 179
    19b2:	32 e0       	ldi	r19, 0x02	; 2
}
    19b4:	82 2f       	mov	r24, r18
    19b6:	93 2f       	mov	r25, r19
    19b8:	08 95       	ret

000019ba <current_time>:
It converts time to format similar to milliseconds format.
But in this case it is "number of minutes from beginning of the week".
Resolution of the event is 1 minute.
*/
uint32_t current_time()
{
    19ba:	cf 92       	push	r12
    19bc:	df 92       	push	r13
    19be:	ef 92       	push	r14
    19c0:	ff 92       	push	r15
    19c2:	0f 93       	push	r16
    19c4:	1f 93       	push	r17
    19c6:	cf 93       	push	r28
    19c8:	df 93       	push	r29
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    19ce:	28 97       	sbiw	r28, 0x08	; 8
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
	struct Time time;
	get_time(&time);
    19da:	ce 01       	movw	r24, r28
    19dc:	01 96       	adiw	r24, 0x01	; 1
    19de:	0e 94 62 09 	call	0x12c4	; 0x12c4 <get_time>
	
	struct Date date;
	get_date(&date);
    19e2:	ce 01       	movw	r24, r28
    19e4:	04 96       	adiw	r24, 0x04	; 4
    19e6:	0e 94 08 0b 	call	0x1610	; 0x1610 <get_date>
	
	// whole cycle is 7 days, resolution is 1 second
	//return ((int32_t) date.week_day * 24 * 60 * 60) + ((int32_t)  time.hour * 60 * 60) + ((int32_t) time.minute * 60) + time.second;
	
	// whole cycle is 24 hours, resolution is 1 second
	return ((int32_t)  time.hour * 60 * 60) + ((int32_t) time.minute * 60) + time.second;
    19ea:	29 81       	ldd	r18, Y+1	; 0x01
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	a0 e1       	ldi	r26, 0x10	; 16
    19f0:	be e0       	ldi	r27, 0x0E	; 14
    19f2:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <__umulhisi3>
    19f6:	6b 01       	movw	r12, r22
    19f8:	7c 01       	movw	r14, r24
    19fa:	2a 81       	ldd	r18, Y+2	; 0x02
    19fc:	ac e3       	ldi	r26, 0x3C	; 60
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <__umulhisi3>
    1a04:	97 01       	movw	r18, r14
    1a06:	86 01       	movw	r16, r12
    1a08:	06 0f       	add	r16, r22
    1a0a:	17 1f       	adc	r17, r23
    1a0c:	28 1f       	adc	r18, r24
    1a0e:	39 1f       	adc	r19, r25
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	08 0f       	add	r16, r24
    1a14:	11 1d       	adc	r17, r1
    1a16:	21 1d       	adc	r18, r1
    1a18:	31 1d       	adc	r19, r1
	// for tests: whole cycle is 60 minutes, resolution 1 second
	//return (time.minute * 60) + (time.second);
	
	// for tests: whole cycle is 60 seconds, resolution 1 second
	//return time.second;
}
    1a1a:	60 2f       	mov	r22, r16
    1a1c:	71 2f       	mov	r23, r17
    1a1e:	82 2f       	mov	r24, r18
    1a20:	93 2f       	mov	r25, r19
    1a22:	28 96       	adiw	r28, 0x08	; 8
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	f8 94       	cli
    1a28:	de bf       	out	0x3e, r29	; 62
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	cd bf       	out	0x3d, r28	; 61
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	1f 91       	pop	r17
    1a34:	0f 91       	pop	r16
    1a36:	ff 90       	pop	r15
    1a38:	ef 90       	pop	r14
    1a3a:	df 90       	pop	r13
    1a3c:	cf 90       	pop	r12
    1a3e:	08 95       	ret

00001a40 <disable_clkout>:


void disable_clkout()
{
	// send data
	twi_start();
    1a40:	0e 94 3e 08 	call	0x107c	; 0x107c <twi_start>
	twi_address_write(0xA2);
    1a44:	82 ea       	ldi	r24, 0xA2	; 162
    1a46:	0e 94 71 08 	call	0x10e2	; 0x10e2 <twi_address_write>
	
	// unset (clear) FE bit in register CLKOUT_control
	twi_send(0x0D);
    1a4a:	8d e0       	ldi	r24, 0x0D	; 13
    1a4c:	0e 94 85 08 	call	0x110a	; 0x110a <twi_send>
	twi_send(0b00000000);
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	0e 94 85 08 	call	0x110a	; 0x110a <twi_send>
	
	twi_stop();
    1a56:	0e 94 c1 08 	call	0x1182	; 0x1182 <twi_stop>
    1a5a:	83 ed       	ldi	r24, 0xD3	; 211
    1a5c:	90 e3       	ldi	r25, 0x30	; 48
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <disable_clkout+0x1e>
    1a62:	00 c0       	rjmp	.+0      	; 0x1a64 <disable_clkout+0x24>
    1a64:	00 00       	nop
    1a66:	08 95       	ret

00001a68 <get_vl>:

/*
if VL bit is set, it means the back up power is discharged and is empty; it needs to replace backup battery.
*/
int get_vl()
{
    1a68:	cf 93       	push	r28
	// PCF8563 - address for read: 0xA3, address for write: 0xA2
	
	twi_start();
    1a6a:	0e 94 3e 08 	call	0x107c	; 0x107c <twi_start>
	twi_address_write(0xA2);
    1a6e:	82 ea       	ldi	r24, 0xA2	; 162
    1a70:	0e 94 71 08 	call	0x10e2	; 0x10e2 <twi_address_write>
	twi_send(0x02);
    1a74:	82 e0       	ldi	r24, 0x02	; 2
    1a76:	0e 94 85 08 	call	0x110a	; 0x110a <twi_send>
	
	twi_start();
    1a7a:	0e 94 3e 08 	call	0x107c	; 0x107c <twi_start>
	twi_address_read(0xA3);
    1a7e:	83 ea       	ldi	r24, 0xA3	; 163
    1a80:	0e 94 5d 08 	call	0x10ba	; 0x10ba <twi_address_read>
	
	uint8_t received = twi_receive_last();
    1a84:	0e 94 ad 08 	call	0x115a	; 0x115a <twi_receive_last>
    1a88:	c8 2f       	mov	r28, r24
	twi_stop();
    1a8a:	0e 94 c1 08 	call	0x1182	; 0x1182 <twi_stop>
	
	if (received & (1 << VL_BIT))
    1a8e:	8c 2f       	mov	r24, r28
    1a90:	99 27       	eor	r25, r25
    1a92:	87 fd       	sbrc	r24, 7
    1a94:	90 95       	com	r25
	return 1;
	else
	return 0;
	
}
    1a96:	89 2f       	mov	r24, r25
    1a98:	88 1f       	adc	r24, r24
    1a9a:	88 27       	eor	r24, r24
    1a9c:	88 1f       	adc	r24, r24
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	cf 91       	pop	r28
    1aa2:	08 95       	ret

00001aa4 <reset_vl>:
*/
void reset_vl()
{
	// PCF8563 - address for read: 0xA3, address for write: 0xA2
	
	twi_start();
    1aa4:	0e 94 3e 08 	call	0x107c	; 0x107c <twi_start>
	twi_address_write(0xA2);
    1aa8:	82 ea       	ldi	r24, 0xA2	; 162
    1aaa:	0e 94 71 08 	call	0x10e2	; 0x10e2 <twi_address_write>
	twi_send(0x02);
    1aae:	82 e0       	ldi	r24, 0x02	; 2
    1ab0:	0e 94 85 08 	call	0x110a	; 0x110a <twi_send>
	twi_send(0x00);
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	0e 94 85 08 	call	0x110a	; 0x110a <twi_send>
	
	twi_stop();
    1aba:	0e 94 c1 08 	call	0x1182	; 0x1182 <twi_stop>
    1abe:	08 95       	ret

00001ac0 <read_date>:
}



void read_date()
{
    1ac0:	ef 92       	push	r14
    1ac2:	ff 92       	push	r15
    1ac4:	0f 93       	push	r16
    1ac6:	1f 93       	push	r17
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	a3 97       	sbiw	r28, 0x23	; 35
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	de bf       	out	0x3e, r29	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	cd bf       	out	0x3d, r28	; 61
	struct Date date;
	get_date(&date);
    1adc:	ce 01       	movw	r24, r28
    1ade:	01 96       	adiw	r24, 0x01	; 1
    1ae0:	0e 94 08 0b 	call	0x1610	; 0x1610 <get_date>
	
	char ts[30];
	send_string("date: ");
    1ae4:	8f eb       	ldi	r24, 0xBF	; 191
    1ae6:	92 e0       	ldi	r25, 0x02	; 2
    1ae8:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	sprintf(ts, "%d", date.year);
    1aec:	8d 81       	ldd	r24, Y+5	; 0x05
    1aee:	8f 93       	push	r24
    1af0:	8c 81       	ldd	r24, Y+4	; 0x04
    1af2:	8f 93       	push	r24
    1af4:	8d e0       	ldi	r24, 0x0D	; 13
    1af6:	91 e0       	ldi	r25, 0x01	; 1
    1af8:	9f 93       	push	r25
    1afa:	8f 93       	push	r24
    1afc:	8e 01       	movw	r16, r28
    1afe:	0a 5f       	subi	r16, 0xFA	; 250
    1b00:	1f 4f       	sbci	r17, 0xFF	; 255
    1b02:	1f 93       	push	r17
    1b04:	0f 93       	push	r16
    1b06:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <sprintf>
	send_string(ts);
    1b0a:	c8 01       	movw	r24, r16
    1b0c:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	
	send_string("/");
    1b10:	84 eb       	ldi	r24, 0xB4	; 180
    1b12:	91 e0       	ldi	r25, 0x01	; 1
    1b14:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	sprintf(ts, "%02d", date.month);
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	1f 92       	push	r1
    1b1c:	8f 93       	push	r24
    1b1e:	0f 2e       	mov	r0, r31
    1b20:	f2 e9       	ldi	r31, 0x92	; 146
    1b22:	ef 2e       	mov	r14, r31
    1b24:	f2 e0       	ldi	r31, 0x02	; 2
    1b26:	ff 2e       	mov	r15, r31
    1b28:	f0 2d       	mov	r31, r0
    1b2a:	ff 92       	push	r15
    1b2c:	ef 92       	push	r14
    1b2e:	1f 93       	push	r17
    1b30:	0f 93       	push	r16
    1b32:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <sprintf>
	send_string(ts);
    1b36:	c8 01       	movw	r24, r16
    1b38:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	
	send_string("/");
    1b3c:	84 eb       	ldi	r24, 0xB4	; 180
    1b3e:	91 e0       	ldi	r25, 0x01	; 1
    1b40:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	sprintf(ts, "%02d", date.day);
    1b44:	89 81       	ldd	r24, Y+1	; 0x01
    1b46:	1f 92       	push	r1
    1b48:	8f 93       	push	r24
    1b4a:	ff 92       	push	r15
    1b4c:	ef 92       	push	r14
    1b4e:	1f 93       	push	r17
    1b50:	0f 93       	push	r16
    1b52:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <sprintf>
	send_string(ts);
    1b56:	c8 01       	movw	r24, r16
    1b58:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	
	send_string(" ");
    1b5c:	89 ea       	ldi	r24, 0xA9	; 169
    1b5e:	91 e0       	ldi	r25, 0x01	; 1
    1b60:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	char *td = days(date.week_day);
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	0e 94 b0 0c 	call	0x1960	; 0x1960 <days>
	send_string(td);
    1b6c:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	
	send_string("\r\n");
    1b70:	83 e5       	ldi	r24, 0x53	; 83
    1b72:	95 e0       	ldi	r25, 0x05	; 5
    1b74:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	de bf       	out	0x3e, r29	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	cd bf       	out	0x3d, r28	; 61

}
    1b82:	a3 96       	adiw	r28, 0x23	; 35
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61
    1b8e:	df 91       	pop	r29
    1b90:	cf 91       	pop	r28
    1b92:	1f 91       	pop	r17
    1b94:	0f 91       	pop	r16
    1b96:	ff 90       	pop	r15
    1b98:	ef 90       	pop	r14
    1b9a:	08 95       	ret

00001b9c <clear_buffer>:
enum {STANDARD, PASS};
int mode = STANDARD;


void clear_buffer()
{
    1b9c:	ef ef       	ldi	r30, 0xFF	; 255
    1b9e:	f6 e0       	ldi	r31, 0x06	; 6

enum {STANDARD, PASS};
int mode = STANDARD;


void clear_buffer()
    1ba0:	8f e7       	ldi	r24, 0x7F	; 127
    1ba2:	98 e0       	ldi	r25, 0x08	; 8
{
	// clear buffer
	for (uint16_t i = 0; i < BUFFER_SIZE; i++)
	buffer[i] = 0x00;
    1ba4:	11 92       	st	Z+, r1


void clear_buffer()
{
	// clear buffer
	for (uint16_t i = 0; i < BUFFER_SIZE; i++)
    1ba6:	e8 17       	cp	r30, r24
    1ba8:	f9 07       	cpc	r31, r25
    1baa:	e1 f7       	brne	.-8      	; 0x1ba4 <clear_buffer+0x8>
	buffer[i] = 0x00;
	pos = 0;
    1bac:	10 92 5a 05 	sts	0x055A, r1
    1bb0:	10 92 59 05 	sts	0x0559, r1
    1bb4:	08 95       	ret

00001bb6 <send_char>:
}

void send_char(unsigned char letter)
{
	while (!( UCSR0A & (1<<UDRE0)));
    1bb6:	e0 ec       	ldi	r30, 0xC0	; 192
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	90 81       	ld	r25, Z
    1bbc:	95 ff       	sbrs	r25, 5
    1bbe:	fd cf       	rjmp	.-6      	; 0x1bba <send_char+0x4>

	// write to buffer to send	
	UDR0 = letter;
    1bc0:	80 93 c6 00 	sts	0x00C6, r24
    1bc4:	08 95       	ret

00001bc6 <send_string>:
}

void send_string(char *StringPtr)
{
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00)
    1bcc:	88 81       	ld	r24, Y
    1bce:	88 23       	and	r24, r24
    1bd0:	31 f0       	breq	.+12     	; 0x1bde <send_string+0x18>

	// write to buffer to send	
	UDR0 = letter;
}

void send_string(char *StringPtr)
    1bd2:	21 96       	adiw	r28, 0x01	; 1
{
	while(*StringPtr != 0x00)
	{
		send_char(*StringPtr);
    1bd4:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <send_char>
	UDR0 = letter;
}

void send_string(char *StringPtr)
{
	while(*StringPtr != 0x00)
    1bd8:	89 91       	ld	r24, Y+
    1bda:	81 11       	cpse	r24, r1
    1bdc:	fb cf       	rjmp	.-10     	; 0x1bd4 <send_string+0xe>
	{
		send_char(*StringPtr);
		StringPtr++;
	}
}
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	08 95       	ret

00001be4 <send_enter>:

void send_enter()
{
	send_string("\r\n");
    1be4:	83 e5       	ldi	r24, 0x53	; 83
    1be6:	95 e0       	ldi	r25, 0x05	; 5
    1be8:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    1bec:	08 95       	ret

00001bee <send_line>:
}

void send_line(char *StringPtr)
{
	send_string(StringPtr);
    1bee:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	send_string("\r\n");
    1bf2:	83 e5       	ldi	r24, 0x53	; 83
    1bf4:	95 e0       	ldi	r25, 0x05	; 5
    1bf6:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    1bfa:	08 95       	ret

00001bfc <send_int>:
}

void send_int(int32_t value)
{
    1bfc:	0f 93       	push	r16
    1bfe:	1f 93       	push	r17
    1c00:	cf 93       	push	r28
    1c02:	df 93       	push	r29
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	6e 97       	sbiw	r28, 0x1e	; 30
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	f8 94       	cli
    1c0e:	de bf       	out	0x3e, r29	; 62
    1c10:	0f be       	out	0x3f, r0	; 63
    1c12:	cd bf       	out	0x3d, r28	; 61
	char ts[30];
	sprintf(ts, "%ld", value);
    1c14:	9f 93       	push	r25
    1c16:	8f 93       	push	r24
    1c18:	7f 93       	push	r23
    1c1a:	6f 93       	push	r22
    1c1c:	86 ec       	ldi	r24, 0xC6	; 198
    1c1e:	92 e0       	ldi	r25, 0x02	; 2
    1c20:	9f 93       	push	r25
    1c22:	8f 93       	push	r24
    1c24:	8e 01       	movw	r16, r28
    1c26:	0f 5f       	subi	r16, 0xFF	; 255
    1c28:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2a:	1f 93       	push	r17
    1c2c:	0f 93       	push	r16
    1c2e:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <sprintf>
	send_string(ts);
    1c32:	c8 01       	movw	r24, r16
    1c34:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	de bf       	out	0x3e, r29	; 62
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	cd bf       	out	0x3d, r28	; 61
}
    1c42:	6e 96       	adiw	r28, 0x1e	; 30
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	cd bf       	out	0x3d, r28	; 61
    1c4e:	df 91       	pop	r29
    1c50:	cf 91       	pop	r28
    1c52:	1f 91       	pop	r17
    1c54:	0f 91       	pop	r16
    1c56:	08 95       	ret

00001c58 <parse_command>:

//************************
//* interpreter

void parse_command(char *value)
{
    1c58:	2f 92       	push	r2
    1c5a:	3f 92       	push	r3
    1c5c:	4f 92       	push	r4
    1c5e:	5f 92       	push	r5
    1c60:	6f 92       	push	r6
    1c62:	7f 92       	push	r7
    1c64:	8f 92       	push	r8
    1c66:	9f 92       	push	r9
    1c68:	af 92       	push	r10
    1c6a:	bf 92       	push	r11
    1c6c:	cf 92       	push	r12
    1c6e:	df 92       	push	r13
    1c70:	ef 92       	push	r14
    1c72:	ff 92       	push	r15
    1c74:	0f 93       	push	r16
    1c76:	1f 93       	push	r17
    1c78:	cf 93       	push	r28
    1c7a:	df 93       	push	r29
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	a0 97       	sbiw	r28, 0x20	; 32
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cd bf       	out	0x3d, r28	; 61
			reset();
		}
		else
		send_string("?\r\n");
	}
}
    1c8c:	ad b6       	in	r10, 0x3d	; 61
    1c8e:	be b6       	in	r11, 0x3e	; 62
    1c90:	ab 8e       	std	Y+27, r10	; 0x1b
    1c92:	3e b7       	in	r19, 0x3e	; 62
    1c94:	3c 8f       	std	Y+28, r19	; 0x1c

void parse_command(char *value)
{
	// AT+SOMETHINGr => SOMETHING
	
	uint16_t size = strlen(value);
    1c96:	e8 2f       	mov	r30, r24
    1c98:	f9 2f       	mov	r31, r25
    1c9a:	df 01       	movw	r26, r30
    1c9c:	0d 90       	ld	r0, X+
    1c9e:	00 20       	and	r0, r0
    1ca0:	e9 f7       	brne	.-6      	; 0x1c9c <parse_command+0x44>
    1ca2:	11 97       	sbiw	r26, 0x01	; 1
    1ca4:	6d 01       	movw	r12, r26
    1ca6:	ce 1a       	sub	r12, r30
    1ca8:	df 0a       	sbc	r13, r31
	
	// copy string
	char tca[size + 1];
    1caa:	86 01       	movw	r16, r12
    1cac:	0f 5f       	subi	r16, 0xFF	; 255
    1cae:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb0:	ed b7       	in	r30, 0x3d	; 61
    1cb2:	fe b7       	in	r31, 0x3e	; 62
    1cb4:	e0 1b       	sub	r30, r16
    1cb6:	f1 0b       	sbc	r31, r17
    1cb8:	0f b6       	in	r0, 0x3f	; 63
    1cba:	f8 94       	cli
    1cbc:	fe bf       	out	0x3e, r31	; 62
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	ed bf       	out	0x3d, r30	; 61
    1cc2:	ed b6       	in	r14, 0x3d	; 61
    1cc4:	fe b6       	in	r15, 0x3e	; 62
    1cc6:	21 e0       	ldi	r18, 0x01	; 1
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	e2 0e       	add	r14, r18
    1ccc:	f3 1e       	adc	r15, r19
	strncpy(tca, value, size);
    1cce:	a6 01       	movw	r20, r12
    1cd0:	68 2f       	mov	r22, r24
    1cd2:	79 2f       	mov	r23, r25
    1cd4:	c7 01       	movw	r24, r14
    1cd6:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <strncpy>
	tca[size] = 0x00;
    1cda:	f7 01       	movw	r30, r14
    1cdc:	ec 0d       	add	r30, r12
    1cde:	fd 1d       	adc	r31, r13
    1ce0:	10 82       	st	Z, r1
	
	// param (for example: MODE=LAST)
	char *found = strchr(tca, '=');
    1ce2:	6d e3       	ldi	r22, 0x3D	; 61
    1ce4:	70 e0       	ldi	r23, 0x00	; 0
    1ce6:	c7 01       	movw	r24, r14
    1ce8:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <strchr>
	if (found != NULL)
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	09 f4       	brne	.+2      	; 0x1cf2 <parse_command+0x9a>
    1cf0:	36 c3       	rjmp	.+1644   	; 0x235e <parse_command+0x706>
    1cf2:	3d b7       	in	r19, 0x3d	; 61
    1cf4:	3d 8f       	std	Y+29, r19	; 0x1d
    1cf6:	ee b7       	in	r30, 0x3e	; 62
    1cf8:	ee 8f       	std	Y+30, r30	; 0x1e
	{
		uint16_t where = found - tca;
    1cfa:	4c 01       	movw	r8, r24
    1cfc:	8e 18       	sub	r8, r14
    1cfe:	9f 08       	sbc	r9, r15
		
		// copy command
		char command[where + 1];
    1d00:	24 01       	movw	r4, r8
    1d02:	ff ef       	ldi	r31, 0xFF	; 255
    1d04:	4f 1a       	sub	r4, r31
    1d06:	5f 0a       	sbc	r5, r31
    1d08:	2d b7       	in	r18, 0x3d	; 61
    1d0a:	3e b7       	in	r19, 0x3e	; 62
    1d0c:	24 19       	sub	r18, r4
    1d0e:	35 09       	sbc	r19, r5
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	3e bf       	out	0x3e, r19	; 62
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	2d bf       	out	0x3d, r18	; 61
    1d1a:	0d b7       	in	r16, 0x3d	; 61
    1d1c:	1e b7       	in	r17, 0x3e	; 62
    1d1e:	0f 5f       	subi	r16, 0xFF	; 255
    1d20:	1f 4f       	sbci	r17, 0xFF	; 255
		strncpy(command, tca, where);
    1d22:	a4 01       	movw	r20, r8
    1d24:	b7 01       	movw	r22, r14
    1d26:	80 2f       	mov	r24, r16
    1d28:	91 2f       	mov	r25, r17
    1d2a:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <strncpy>
		command[sizeof(command) - 1] = 0x00;
    1d2e:	f8 01       	movw	r30, r16
    1d30:	e8 0d       	add	r30, r8
    1d32:	f9 1d       	adc	r31, r9
    1d34:	10 82       	st	Z, r1
		
		// copy param
		char param[size - where + 1];
    1d36:	c6 01       	movw	r24, r12
    1d38:	88 19       	sub	r24, r8
    1d3a:	99 09       	sbc	r25, r9
    1d3c:	4c 01       	movw	r8, r24
    1d3e:	01 96       	adiw	r24, 0x01	; 1
    1d40:	ed b7       	in	r30, 0x3d	; 61
    1d42:	fe b7       	in	r31, 0x3e	; 62
    1d44:	e8 1b       	sub	r30, r24
    1d46:	f9 0b       	sbc	r31, r25
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	fe bf       	out	0x3e, r31	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	ed bf       	out	0x3d, r30	; 61
    1d52:	cd b6       	in	r12, 0x3d	; 61
    1d54:	de b6       	in	r13, 0x3e	; 62
    1d56:	21 e0       	ldi	r18, 0x01	; 1
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	c2 0e       	add	r12, r18
    1d5c:	d3 1e       	adc	r13, r19
    1d5e:	16 01       	movw	r2, r12
		strncpy(param, tca + where + 1, size - where - 1);
    1d60:	31 e0       	ldi	r19, 0x01	; 1
    1d62:	83 1a       	sub	r8, r19
    1d64:	91 08       	sbc	r9, r1
    1d66:	cf 8e       	std	Y+31, r12	; 0x1f
    1d68:	d8 a2       	std	Y+32, r13	; 0x20
    1d6a:	b7 01       	movw	r22, r14
    1d6c:	64 0d       	add	r22, r4
    1d6e:	75 1d       	adc	r23, r5
    1d70:	a4 01       	movw	r20, r8
    1d72:	8c 2d       	mov	r24, r12
    1d74:	9d 2d       	mov	r25, r13
    1d76:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <strncpy>
		param[size - where - 1] = 0x00;
    1d7a:	f6 01       	movw	r30, r12
    1d7c:	e8 0d       	add	r30, r8
    1d7e:	f9 1d       	adc	r31, r9
    1d80:	10 82       	st	Z, r1
		
		// ***
		
		// sets time: AT+TIME=17:33:45r
		// always 2 digits for every number: AT+TIME=03:05:07
		if (strcmp(command, "TIME") == 0)
    1d82:	6a ec       	ldi	r22, 0xCA	; 202
    1d84:	72 e0       	ldi	r23, 0x02	; 2
    1d86:	80 2f       	mov	r24, r16
    1d88:	91 2f       	mov	r25, r17
    1d8a:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    1d8e:	28 2f       	mov	r18, r24
    1d90:	39 2f       	mov	r19, r25
    1d92:	23 2b       	or	r18, r19
    1d94:	c9 f5       	brne	.+114    	; 0x1e08 <parse_command+0x1b0>
		{
			if (get_event_mode() != MANUAL_MODE) {
    1d96:	0e 94 93 00 	call	0x126	; 0x126 <get_event_mode>
    1d9a:	81 30       	cpi	r24, 0x01	; 1
    1d9c:	29 f0       	breq	.+10     	; 0x1da8 <parse_command+0x150>
				send_string("Switch to MANUAL mode first!\r\n");
    1d9e:	8f ec       	ldi	r24, 0xCF	; 207
    1da0:	92 e0       	ldi	r25, 0x02	; 2
    1da2:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    1da6:	d1 c2       	rjmp	.+1442   	; 0x234a <parse_command+0x6f2>
    1da8:	ef 8c       	ldd	r14, Y+31	; 0x1f
    1daa:	f8 a0       	ldd	r15, Y+32	; 0x20
		
		// sets time: AT+TIME=17:33:45r
		// always 2 digits for every number: AT+TIME=03:05:07
		if (strcmp(command, "TIME") == 0)
		{
			if (get_event_mode() != MANUAL_MODE) {
    1dac:	00 e0       	ldi	r16, 0x00	; 0
    1dae:	10 e0       	ldi	r17, 0x00	; 0
			int16_t tia[3];
			long int result = 0;
			
			for (unsigned int i = 0; i < 3; i++)
			{
				strncpy(value, param + i * 3, 2);
    1db0:	42 e0       	ldi	r20, 0x02	; 2
    1db2:	50 e0       	ldi	r21, 0x00	; 0
    1db4:	b7 01       	movw	r22, r14
    1db6:	ce 01       	movw	r24, r28
    1db8:	0e 96       	adiw	r24, 0x0e	; 14
    1dba:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <strncpy>
				value[2] = 0x00; // string has to have null on its end
    1dbe:	18 8a       	std	Y+16, r1	; 0x10
				result = parse_int(value, &tia[i]);
    1dc0:	b8 01       	movw	r22, r16
    1dc2:	66 0f       	add	r22, r22
    1dc4:	77 1f       	adc	r23, r23
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	8c 0f       	add	r24, r28
    1dcc:	9d 1f       	adc	r25, r29
    1dce:	68 0f       	add	r22, r24
    1dd0:	79 1f       	adc	r23, r25
    1dd2:	ce 01       	movw	r24, r28
    1dd4:	0e 96       	adiw	r24, 0x0e	; 14
    1dd6:	0e 94 59 00 	call	0xb2	; 0xb2 <parse_int>
				
				if (result == 0)
    1dda:	89 2b       	or	r24, r25
    1ddc:	39 f4       	brne	.+14     	; 0x1dec <parse_command+0x194>
				{
					send_string("WRONG TIME PARSE\r\n");
    1dde:	8e ee       	ldi	r24, 0xEE	; 238
    1de0:	92 e0       	ldi	r25, 0x02	; 2
    1de2:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
					break;
				}
			}
			send_enter();
    1de6:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <send_enter>
    1dea:	09 c0       	rjmp	.+18     	; 0x1dfe <parse_command+0x1a6>
			
			char value[3];
			int16_t tia[3];
			long int result = 0;
			
			for (unsigned int i = 0; i < 3; i++)
    1dec:	0f 5f       	subi	r16, 0xFF	; 255
    1dee:	1f 4f       	sbci	r17, 0xFF	; 255
    1df0:	93 e0       	ldi	r25, 0x03	; 3
    1df2:	e9 0e       	add	r14, r25
    1df4:	f1 1c       	adc	r15, r1
    1df6:	03 30       	cpi	r16, 0x03	; 3
    1df8:	11 05       	cpc	r17, r1
    1dfa:	d1 f6       	brne	.-76     	; 0x1db0 <parse_command+0x158>
    1dfc:	0b c4       	rjmp	.+2070   	; 0x2614 <parse_command+0x9bc>
				set_time(&time);
				
				read_time();
			}
			
			send_string("Remember to pass always 2 digits for every value: 05:30:00 is ok, but 5:30:00 is wrong!\r\n");
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	93 e0       	ldi	r25, 0x03	; 3
    1e02:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    1e06:	97 c2       	rjmp	.+1326   	; 0x2336 <parse_command+0x6de>
		}
		// AT+DATE=2014/10/29 WED ; 3 on the end is week_day
		// year - 4 digits, month and day are 2 digits, week_day is 1 digit
		// AT+DATE=2014/02/07/0
		else if (strcmp(command, "DATE") == 0)
    1e08:	6b e5       	ldi	r22, 0x5B	; 91
    1e0a:	73 e0       	ldi	r23, 0x03	; 3
    1e0c:	80 2f       	mov	r24, r16
    1e0e:	91 2f       	mov	r25, r17
    1e10:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    1e14:	28 2f       	mov	r18, r24
    1e16:	39 2f       	mov	r19, r25
    1e18:	23 2b       	or	r18, r19
    1e1a:	09 f0       	breq	.+2      	; 0x1e1e <parse_command+0x1c6>
    1e1c:	83 c0       	rjmp	.+262    	; 0x1f24 <parse_command+0x2cc>
		{
			if (get_event_mode() != MANUAL_MODE) {
    1e1e:	0e 94 93 00 	call	0x126	; 0x126 <get_event_mode>
    1e22:	81 30       	cpi	r24, 0x01	; 1
    1e24:	29 f0       	breq	.+10     	; 0x1e30 <parse_command+0x1d8>
				send_string("Switch to MANUAL mode first!\r\n");
    1e26:	8f ec       	ldi	r24, 0xCF	; 207
    1e28:	92 e0       	ldi	r25, 0x02	; 2
    1e2a:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    1e2e:	8d c2       	rjmp	.+1306   	; 0x234a <parse_command+0x6f2>
		// AT+DATE=2014/10/29 WED ; 3 on the end is week_day
		// year - 4 digits, month and day are 2 digits, week_day is 1 digit
		// AT+DATE=2014/02/07/0
		else if (strcmp(command, "DATE") == 0)
		{
			if (get_event_mode() != MANUAL_MODE) {
    1e30:	00 e0       	ldi	r16, 0x00	; 0
    1e32:	10 e0       	ldi	r17, 0x00	; 0
    1e34:	41 2c       	mov	r4, r1
    1e36:	51 2c       	mov	r5, r1
    1e38:	32 01       	movw	r6, r4
					strncpy(value, param, 4);
					value[4] = 0x00;
					break;
					
					case 1:
					strncpy(value, param + 5, 2);
    1e3a:	76 01       	movw	r14, r12
    1e3c:	e5 e0       	ldi	r30, 0x05	; 5
    1e3e:	ee 0e       	add	r14, r30
    1e40:	f1 1c       	adc	r15, r1
					value[2] = 0x00;
					break;
					
					case 2:
					strncpy(value, param + 8, 2);
    1e42:	f8 e0       	ldi	r31, 0x08	; 8
    1e44:	2f 0e       	add	r2, r31
    1e46:	31 1c       	adc	r3, r1
			long int result = 0;
			
			for (unsigned int i = 0; i < 4; i++)
			{
				// parse string
				switch (i)
    1e48:	01 30       	cpi	r16, 0x01	; 1
    1e4a:	11 05       	cpc	r17, r1
    1e4c:	91 f0       	breq	.+36     	; 0x1e72 <parse_command+0x21a>
    1e4e:	38 f0       	brcs	.+14     	; 0x1e5e <parse_command+0x206>
    1e50:	02 30       	cpi	r16, 0x02	; 2
    1e52:	11 05       	cpc	r17, r1
    1e54:	b9 f0       	breq	.+46     	; 0x1e84 <parse_command+0x22c>
    1e56:	03 30       	cpi	r16, 0x03	; 3
    1e58:	11 05       	cpc	r17, r1
    1e5a:	41 f5       	brne	.+80     	; 0x1eac <parse_command+0x254>
    1e5c:	1c c0       	rjmp	.+56     	; 0x1e96 <parse_command+0x23e>
				{
					case 0:
					strncpy(value, param, 4);
    1e5e:	44 e0       	ldi	r20, 0x04	; 4
    1e60:	50 e0       	ldi	r21, 0x00	; 0
    1e62:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e64:	78 a1       	ldd	r23, Y+32	; 0x20
    1e66:	ce 01       	movw	r24, r28
    1e68:	0e 96       	adiw	r24, 0x0e	; 14
    1e6a:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <strncpy>
					value[4] = 0x00;
    1e6e:	1a 8a       	std	Y+18, r1	; 0x12
					break;
    1e70:	20 c0       	rjmp	.+64     	; 0x1eb2 <parse_command+0x25a>
					
					case 1:
					strncpy(value, param + 5, 2);
    1e72:	42 e0       	ldi	r20, 0x02	; 2
    1e74:	50 e0       	ldi	r21, 0x00	; 0
    1e76:	b7 01       	movw	r22, r14
    1e78:	ce 01       	movw	r24, r28
    1e7a:	0e 96       	adiw	r24, 0x0e	; 14
    1e7c:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <strncpy>
					value[2] = 0x00;
    1e80:	18 8a       	std	Y+16, r1	; 0x10
					break;
    1e82:	17 c0       	rjmp	.+46     	; 0x1eb2 <parse_command+0x25a>
					
					case 2:
					strncpy(value, param + 8, 2);
    1e84:	42 e0       	ldi	r20, 0x02	; 2
    1e86:	50 e0       	ldi	r21, 0x00	; 0
    1e88:	b1 01       	movw	r22, r2
    1e8a:	ce 01       	movw	r24, r28
    1e8c:	0e 96       	adiw	r24, 0x0e	; 14
    1e8e:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <strncpy>
					value[2] = 0x00;
    1e92:	18 8a       	std	Y+16, r1	; 0x10
					break;
    1e94:	0e c0       	rjmp	.+28     	; 0x1eb2 <parse_command+0x25a>
					
					case 3:
					strncpy(value, param + 11, 3);
    1e96:	b6 01       	movw	r22, r12
    1e98:	65 5f       	subi	r22, 0xF5	; 245
    1e9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9c:	43 e0       	ldi	r20, 0x03	; 3
    1e9e:	50 e0       	ldi	r21, 0x00	; 0
    1ea0:	ce 01       	movw	r24, r28
    1ea2:	0e 96       	adiw	r24, 0x0e	; 14
    1ea4:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <strncpy>
					value[4] = 0x00;
    1ea8:	1a 8a       	std	Y+18, r1	; 0x12
    1eaa:	1c c0       	rjmp	.+56     	; 0x1ee4 <parse_command+0x28c>
					break;
				}
				
				if (i != 3)
    1eac:	03 30       	cpi	r16, 0x03	; 3
    1eae:	11 05       	cpc	r17, r1
    1eb0:	c9 f0       	breq	.+50     	; 0x1ee4 <parse_command+0x28c>
				result = parse_int(value, &tia[i]);
    1eb2:	b8 01       	movw	r22, r16
    1eb4:	66 0f       	add	r22, r22
    1eb6:	77 1f       	adc	r23, r23
    1eb8:	21 e0       	ldi	r18, 0x01	; 1
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	2c 0f       	add	r18, r28
    1ebe:	3d 1f       	adc	r19, r29
    1ec0:	62 0f       	add	r22, r18
    1ec2:	73 1f       	adc	r23, r19
    1ec4:	ce 01       	movw	r24, r28
    1ec6:	0e 96       	adiw	r24, 0x0e	; 14
    1ec8:	0e 94 59 00 	call	0xb2	; 0xb2 <parse_int>
    1ecc:	2c 01       	movw	r4, r24
    1ece:	66 24       	eor	r6, r6
    1ed0:	57 fc       	sbrc	r5, 7
    1ed2:	60 94       	com	r6
    1ed4:	76 2c       	mov	r7, r6
			
			char value[5];
			int16_t tia[4];
			long int result = 0;
			
			for (unsigned int i = 0; i < 4; i++)
    1ed6:	0f 5f       	subi	r16, 0xFF	; 255
    1ed8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eda:	04 30       	cpi	r16, 0x04	; 4
    1edc:	11 05       	cpc	r17, r1
    1ede:	09 f0       	breq	.+2      	; 0x1ee2 <parse_command+0x28a>
    1ee0:	b3 cf       	rjmp	.-154    	; 0x1e48 <parse_command+0x1f0>
    1ee2:	06 c0       	rjmp	.+12     	; 0x1ef0 <parse_command+0x298>
				}
				
				if (i != 3)
				result = parse_int(value, &tia[i]);
				else
				tia[i] = weekdays(value);
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	0e 96       	adiw	r24, 0x0e	; 14
    1ee8:	0e 94 5f 0c 	call	0x18be	; 0x18be <weekdays>
    1eec:	98 87       	std	Y+8, r25	; 0x08
    1eee:	8f 83       	std	Y+7, r24	; 0x07
			}
			
			if (result == 0)
    1ef0:	45 28       	or	r4, r5
    1ef2:	46 28       	or	r4, r6
    1ef4:	47 28       	or	r4, r7
    1ef6:	29 f4       	brne	.+10     	; 0x1f02 <parse_command+0x2aa>
			{
				send_string("WRONG DATE PARSE\r\n");
    1ef8:	80 e6       	ldi	r24, 0x60	; 96
    1efa:	93 e0       	ldi	r25, 0x03	; 3
    1efc:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    1f00:	1a c2       	rjmp	.+1076   	; 0x2336 <parse_command+0x6de>
			} else
			{
				struct Date date;
				date.year = tia[0];
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	9a 81       	ldd	r25, Y+2	; 0x02
    1f06:	9d 87       	std	Y+13, r25	; 0x0d
    1f08:	8c 87       	std	Y+12, r24	; 0x0c
				date.month = tia[1];
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	8b 87       	std	Y+11, r24	; 0x0b
				date.day = tia[2];
    1f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f10:	89 87       	std	Y+9, r24	; 0x09
				date.week_day = tia[3];
    1f12:	8f 81       	ldd	r24, Y+7	; 0x07
    1f14:	8a 87       	std	Y+10, r24	; 0x0a
				
				set_date(&date);
    1f16:	ce 01       	movw	r24, r28
    1f18:	09 96       	adiw	r24, 0x09	; 9
    1f1a:	0e 94 37 0b 	call	0x166e	; 0x166e <set_date>
				
				read_date();
    1f1e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <read_date>
    1f22:	09 c2       	rjmp	.+1042   	; 0x2336 <parse_command+0x6de>
		}
		// EXP1 WED 15h30 disable
		// AT+ADD=EXP1;WED1530;DISABLE
		// AT+ADD=PWM0;SAT2015;35
		// AT+ADD=PWM0;SAT2015;35;50;20
		else if (strcmp(command, "ADD") == 0)
    1f24:	63 e7       	ldi	r22, 0x73	; 115
    1f26:	73 e0       	ldi	r23, 0x03	; 3
    1f28:	80 2f       	mov	r24, r16
    1f2a:	91 2f       	mov	r25, r17
    1f2c:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    1f30:	28 2f       	mov	r18, r24
    1f32:	39 2f       	mov	r19, r25
    1f34:	23 2b       	or	r18, r19
    1f36:	09 f0       	breq	.+2      	; 0x1f3a <parse_command+0x2e2>
    1f38:	9c c0       	rjmp	.+312    	; 0x2072 <parse_command+0x41a>
		{
			if (get_event_mode() != MANUAL_MODE) {
    1f3a:	0e 94 93 00 	call	0x126	; 0x126 <get_event_mode>
    1f3e:	81 30       	cpi	r24, 0x01	; 1
    1f40:	29 f0       	breq	.+10     	; 0x1f4c <parse_command+0x2f4>
				send_string("Switch to MANUAL mode first!\r\n");
    1f42:	8f ec       	ldi	r24, 0xCF	; 207
    1f44:	92 e0       	ldi	r25, 0x02	; 2
    1f46:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    1f4a:	ff c1       	rjmp	.+1022   	; 0x234a <parse_command+0x6f2>
			
			char *pch;
			char *saveptr;
			
			// what pin
			pch = strtok_r(param, ";", &saveptr);
    1f4c:	ae 01       	movw	r20, r28
    1f4e:	47 5e       	subi	r20, 0xE7	; 231
    1f50:	5f 4f       	sbci	r21, 0xFF	; 255
    1f52:	67 e7       	ldi	r22, 0x77	; 119
    1f54:	73 e0       	ldi	r23, 0x03	; 3
    1f56:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f58:	98 a1       	ldd	r25, Y+32	; 0x20
    1f5a:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <strtok_r>
			int pin = what_pin(pch);
    1f5e:	0e 94 9a 00 	call	0x134	; 0x134 <what_pin>
    1f62:	6c 01       	movw	r12, r24
			
			// time
			pch = strtok_r(NULL, ";", &saveptr);
    1f64:	ae 01       	movw	r20, r28
    1f66:	47 5e       	subi	r20, 0xE7	; 231
    1f68:	5f 4f       	sbci	r21, 0xFF	; 255
    1f6a:	67 e7       	ldi	r22, 0x77	; 119
    1f6c:	73 e0       	ldi	r23, 0x03	; 3
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <strtok_r>
			int32_t time = parse_time(pch);
    1f76:	0e 94 87 0b 	call	0x170e	; 0x170e <parse_time>
    1f7a:	2b 01       	movw	r4, r22
    1f7c:	3c 01       	movw	r6, r24
			
			// state
			pch = strtok_r(NULL, ";", &saveptr);
    1f7e:	ae 01       	movw	r20, r28
    1f80:	47 5e       	subi	r20, 0xE7	; 231
    1f82:	5f 4f       	sbci	r21, 0xFF	; 255
    1f84:	67 e7       	ldi	r22, 0x77	; 119
    1f86:	73 e0       	ldi	r23, 0x03	; 3
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <strtok_r>
    1f90:	8c 01       	movw	r16, r24
			int pin_state = 0;
    1f92:	18 8e       	std	Y+24, r1	; 0x18
    1f94:	1f 8a       	std	Y+23, r1	; 0x17
			if (strcmp(pch, "LOW") == 0)
    1f96:	69 e7       	ldi	r22, 0x79	; 121
    1f98:	73 e0       	ldi	r23, 0x03	; 3
    1f9a:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	39 2f       	mov	r19, r25
    1fa2:	23 2b       	or	r18, r19
    1fa4:	d1 f0       	breq	.+52     	; 0x1fda <parse_command+0x382>
			pin_state = 0;
			else if (strcmp(pch, "HIGH") == 0)
    1fa6:	6d e7       	ldi	r22, 0x7D	; 125
    1fa8:	73 e0       	ldi	r23, 0x03	; 3
    1faa:	c8 01       	movw	r24, r16
    1fac:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    1fb0:	28 2f       	mov	r18, r24
    1fb2:	39 2f       	mov	r19, r25
    1fb4:	23 2b       	or	r18, r19
    1fb6:	29 f4       	brne	.+10     	; 0x1fc2 <parse_command+0x36a>
			pin_state = 1;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	98 8f       	std	Y+24, r25	; 0x18
    1fbe:	8f 8b       	std	Y+23, r24	; 0x17
    1fc0:	0c c0       	rjmp	.+24     	; 0x1fda <parse_command+0x382>
			else
			{
				// percent value for pwm?
				int result = parse_int(pch, &pin_state);
    1fc2:	be 01       	movw	r22, r28
    1fc4:	69 5e       	subi	r22, 0xE9	; 233
    1fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc8:	c8 01       	movw	r24, r16
    1fca:	0e 94 59 00 	call	0xb2	; 0xb2 <parse_int>
				if (result == 0)
    1fce:	89 2b       	or	r24, r25
    1fd0:	21 f4       	brne	.+8      	; 0x1fda <parse_command+0x382>
				send_string("WRONG PIN STATE PARSE\r\n");
    1fd2:	82 e8       	ldi	r24, 0x82	; 130
    1fd4:	93 e0       	ldi	r25, 0x03	; 3
    1fd6:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
			}
			
			// if PWM duration event
			pch = strtok_r(NULL, ";", &saveptr);
    1fda:	ae 01       	movw	r20, r28
    1fdc:	47 5e       	subi	r20, 0xE7	; 231
    1fde:	5f 4f       	sbci	r21, 0xFF	; 255
    1fe0:	67 e7       	ldi	r22, 0x77	; 119
    1fe2:	73 e0       	ldi	r23, 0x03	; 3
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <strtok_r>
			
			int inc = -1;
    1fec:	2f ef       	ldi	r18, 0xFF	; 255
    1fee:	3f ef       	ldi	r19, 0xFF	; 255
    1ff0:	3e 8b       	std	Y+22, r19	; 0x16
    1ff2:	2d 8b       	std	Y+21, r18	; 0x15
			int16_t duration = -1;
    1ff4:	3c 8b       	std	Y+20, r19	; 0x14
    1ff6:	2b 8b       	std	Y+19, r18	; 0x13
			
			//AT+ADD=PWM0;THU2000;70;-50;30
			if (pch != NULL)
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	29 f1       	breq	.+74     	; 0x2046 <parse_command+0x3ee>
			{
				uint16_t result = parse_int(pch, &inc);
    1ffc:	be 01       	movw	r22, r28
    1ffe:	6b 5e       	subi	r22, 0xEB	; 235
    2000:	7f 4f       	sbci	r23, 0xFF	; 255
    2002:	0e 94 59 00 	call	0xb2	; 0xb2 <parse_int>
				if (result == 0)
    2006:	89 2b       	or	r24, r25
    2008:	21 f4       	brne	.+8      	; 0x2012 <parse_command+0x3ba>
				send_string("WRONG INC PARSE\r\n");
    200a:	8a e9       	ldi	r24, 0x9A	; 154
    200c:	93 e0       	ldi	r25, 0x03	; 3
    200e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
				
				// duration of change
				pch = strtok_r(NULL, ";", &saveptr);
    2012:	ae 01       	movw	r20, r28
    2014:	47 5e       	subi	r20, 0xE7	; 231
    2016:	5f 4f       	sbci	r21, 0xFF	; 255
    2018:	67 e7       	ldi	r22, 0x77	; 119
    201a:	73 e0       	ldi	r23, 0x03	; 3
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <strtok_r>
				
				result = parse_int(pch, &duration);
    2024:	be 01       	movw	r22, r28
    2026:	6d 5e       	subi	r22, 0xED	; 237
    2028:	7f 4f       	sbci	r23, 0xFF	; 255
    202a:	0e 94 59 00 	call	0xb2	; 0xb2 <parse_int>
				if (result == 0)
    202e:	89 2b       	or	r24, r25
    2030:	21 f4       	brne	.+8      	; 0x203a <parse_command+0x3e2>
				send_string("WRONG DURATION PARSE\r\n");
    2032:	8c ea       	ldi	r24, 0xAC	; 172
    2034:	93 e0       	ldi	r25, 0x03	; 3
    2036:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
			}
			
			// add event
			if (duration == -1)
    203a:	eb 88       	ldd	r14, Y+19	; 0x13
    203c:	fc 88       	ldd	r15, Y+20	; 0x14
    203e:	3f ef       	ldi	r19, 0xFF	; 255
    2040:	e3 16       	cp	r14, r19
    2042:	f3 06       	cpc	r15, r19
    2044:	41 f4       	brne	.+16     	; 0x2056 <parse_command+0x3fe>
			add_event(pin, time, pin_state);
    2046:	2f 89       	ldd	r18, Y+23	; 0x17
    2048:	38 8d       	ldd	r19, Y+24	; 0x18
    204a:	b3 01       	movw	r22, r6
    204c:	a2 01       	movw	r20, r4
    204e:	c6 01       	movw	r24, r12
    2050:	0e 94 04 01 	call	0x208	; 0x208 <add_event>
    2054:	09 c0       	rjmp	.+18     	; 0x2068 <parse_command+0x410>
			else
			add_pwm_event(pin, time, pin_state, inc, duration);
    2056:	0d 89       	ldd	r16, Y+21	; 0x15
    2058:	1e 89       	ldd	r17, Y+22	; 0x16
    205a:	2f 89       	ldd	r18, Y+23	; 0x17
    205c:	38 8d       	ldd	r19, Y+24	; 0x18
    205e:	b3 01       	movw	r22, r6
    2060:	a2 01       	movw	r20, r4
    2062:	c6 01       	movw	r24, r12
    2064:	0e 94 4b 01 	call	0x296	; 0x296 <add_pwm_event>
			
			send_string("OK\r\n");
    2068:	8c e1       	ldi	r24, 0x1C	; 28
    206a:	94 e0       	ldi	r25, 0x04	; 4
    206c:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    2070:	62 c1       	rjmp	.+708    	; 0x2336 <parse_command+0x6de>
		}
		// AT+CLOUD=PWM1;WED1530;30;50;30
		// AT+COOUD=pin;time;pin_state;duration;final_state
		else if (strcmp(command, "CLOUD") == 0)
    2072:	63 ec       	ldi	r22, 0xC3	; 195
    2074:	73 e0       	ldi	r23, 0x03	; 3
    2076:	80 2f       	mov	r24, r16
    2078:	91 2f       	mov	r25, r17
    207a:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    207e:	28 2f       	mov	r18, r24
    2080:	39 2f       	mov	r19, r25
    2082:	23 2b       	or	r18, r19
    2084:	09 f0       	breq	.+2      	; 0x2088 <parse_command+0x430>
    2086:	78 c0       	rjmp	.+240    	; 0x2178 <parse_command+0x520>
		{
			if (get_event_mode() != MANUAL_MODE) {
    2088:	0e 94 93 00 	call	0x126	; 0x126 <get_event_mode>
    208c:	81 30       	cpi	r24, 0x01	; 1
    208e:	29 f0       	breq	.+10     	; 0x209a <parse_command+0x442>
				send_string("Switch to MANUAL mode first!\r\n");
    2090:	8f ec       	ldi	r24, 0xCF	; 207
    2092:	92 e0       	ldi	r25, 0x02	; 2
    2094:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    2098:	58 c1       	rjmp	.+688    	; 0x234a <parse_command+0x6f2>
			
			char *pch;
			char *saveptr;
			
			// what pin
			pch = strtok_r(param, ";", &saveptr);
    209a:	ae 01       	movw	r20, r28
    209c:	47 5e       	subi	r20, 0xE7	; 231
    209e:	5f 4f       	sbci	r21, 0xFF	; 255
    20a0:	67 e7       	ldi	r22, 0x77	; 119
    20a2:	73 e0       	ldi	r23, 0x03	; 3
    20a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20a6:	98 a1       	ldd	r25, Y+32	; 0x20
    20a8:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <strtok_r>
			int pin = what_pin(pch);
    20ac:	0e 94 9a 00 	call	0x134	; 0x134 <what_pin>
    20b0:	6c 01       	movw	r12, r24
			
			// time;
			pch = strtok_r(NULL, ";", &saveptr);
    20b2:	ae 01       	movw	r20, r28
    20b4:	47 5e       	subi	r20, 0xE7	; 231
    20b6:	5f 4f       	sbci	r21, 0xFF	; 255
    20b8:	67 e7       	ldi	r22, 0x77	; 119
    20ba:	73 e0       	ldi	r23, 0x03	; 3
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <strtok_r>
			int32_t time = parse_time(pch);
    20c4:	0e 94 87 0b 	call	0x170e	; 0x170e <parse_time>
    20c8:	2b 01       	movw	r4, r22
    20ca:	3c 01       	movw	r6, r24
			
			// state
			pch = strtok_r(NULL, ";", &saveptr);
    20cc:	ae 01       	movw	r20, r28
    20ce:	47 5e       	subi	r20, 0xE7	; 231
    20d0:	5f 4f       	sbci	r21, 0xFF	; 255
    20d2:	67 e7       	ldi	r22, 0x77	; 119
    20d4:	73 e0       	ldi	r23, 0x03	; 3
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <strtok_r>
			int16_t pin_state = 0;
    20de:	18 8e       	std	Y+24, r1	; 0x18
    20e0:	1f 8a       	std	Y+23, r1	; 0x17
			
			// percent value for pwm?
			int result = parse_int(pch, &pin_state);
    20e2:	be 01       	movw	r22, r28
    20e4:	69 5e       	subi	r22, 0xE9	; 233
    20e6:	7f 4f       	sbci	r23, 0xFF	; 255
    20e8:	0e 94 59 00 	call	0xb2	; 0xb2 <parse_int>
			if (result == 0)
    20ec:	89 2b       	or	r24, r25
    20ee:	21 f4       	brne	.+8      	; 0x20f8 <parse_command+0x4a0>
			send_string("WRONG PIN STATE PARSE\r\n");
    20f0:	82 e8       	ldi	r24, 0x82	; 130
    20f2:	93 e0       	ldi	r25, 0x03	; 3
    20f4:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
			
			// duration
			pch = strtok_r(NULL, ";", &saveptr);
    20f8:	ae 01       	movw	r20, r28
    20fa:	47 5e       	subi	r20, 0xE7	; 231
    20fc:	5f 4f       	sbci	r21, 0xFF	; 255
    20fe:	67 e7       	ldi	r22, 0x77	; 119
    2100:	73 e0       	ldi	r23, 0x03	; 3
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <strtok_r>
			int16_t duration = -1;
    210a:	2f ef       	ldi	r18, 0xFF	; 255
    210c:	3f ef       	ldi	r19, 0xFF	; 255
    210e:	3e 8b       	std	Y+22, r19	; 0x16
    2110:	2d 8b       	std	Y+21, r18	; 0x15
			
			result = parse_int(pch, &duration);
    2112:	be 01       	movw	r22, r28
    2114:	6b 5e       	subi	r22, 0xEB	; 235
    2116:	7f 4f       	sbci	r23, 0xFF	; 255
    2118:	0e 94 59 00 	call	0xb2	; 0xb2 <parse_int>
			if (result == 0)
    211c:	89 2b       	or	r24, r25
    211e:	21 f4       	brne	.+8      	; 0x2128 <parse_command+0x4d0>
			send_string("WRONG DURATION PARSE\r\n");
    2120:	8c ea       	ldi	r24, 0xAC	; 172
    2122:	93 e0       	ldi	r25, 0x03	; 3
    2124:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
			
			// final_state
			pch = strtok_r(NULL, ";", &saveptr);
    2128:	ae 01       	movw	r20, r28
    212a:	47 5e       	subi	r20, 0xE7	; 231
    212c:	5f 4f       	sbci	r21, 0xFF	; 255
    212e:	67 e7       	ldi	r22, 0x77	; 119
    2130:	73 e0       	ldi	r23, 0x03	; 3
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <strtok_r>
			int final_state = -1;
    213a:	2f ef       	ldi	r18, 0xFF	; 255
    213c:	3f ef       	ldi	r19, 0xFF	; 255
    213e:	3c 8b       	std	Y+20, r19	; 0x14
    2140:	2b 8b       	std	Y+19, r18	; 0x13
			
			result = parse_int(pch, &final_state);
    2142:	be 01       	movw	r22, r28
    2144:	6d 5e       	subi	r22, 0xED	; 237
    2146:	7f 4f       	sbci	r23, 0xFF	; 255
    2148:	0e 94 59 00 	call	0xb2	; 0xb2 <parse_int>
			if (result == 0)
    214c:	89 2b       	or	r24, r25
    214e:	21 f4       	brne	.+8      	; 0x2158 <parse_command+0x500>
			send_string("WRONG FINAL STATE PARSE\r\n");
    2150:	89 ec       	ldi	r24, 0xC9	; 201
    2152:	93 e0       	ldi	r25, 0x03	; 3
    2154:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
			
			add_clouds_event(pin, time, pin_state, duration, final_state);
    2158:	eb 88       	ldd	r14, Y+19	; 0x13
    215a:	fc 88       	ldd	r15, Y+20	; 0x14
    215c:	0d 89       	ldd	r16, Y+21	; 0x15
    215e:	1e 89       	ldd	r17, Y+22	; 0x16
    2160:	2f 89       	ldd	r18, Y+23	; 0x17
    2162:	38 8d       	ldd	r19, Y+24	; 0x18
    2164:	b3 01       	movw	r22, r6
    2166:	a2 01       	movw	r20, r4
    2168:	c6 01       	movw	r24, r12
    216a:	0e 94 88 01 	call	0x310	; 0x310 <add_clouds_event>
			
			send_string("OK\r\n");
    216e:	8c e1       	ldi	r24, 0x1C	; 28
    2170:	94 e0       	ldi	r25, 0x04	; 4
    2172:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    2176:	df c0       	rjmp	.+446    	; 0x2336 <parse_command+0x6de>
		}
		// AT+PWM0=30 => PWM0 at 30%
		else if (strcmp(command, "PWM0") == 0)
    2178:	64 e2       	ldi	r22, 0x24	; 36
    217a:	71 e0       	ldi	r23, 0x01	; 1
    217c:	80 2f       	mov	r24, r16
    217e:	91 2f       	mov	r25, r17
    2180:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    2184:	28 2f       	mov	r18, r24
    2186:	39 2f       	mov	r19, r25
    2188:	23 2b       	or	r18, r19
    218a:	b1 f4       	brne	.+44     	; 0x21b8 <parse_command+0x560>
		{
			int16_t ti;
			long int result = 0;
			
			result = parse_int(param, &ti);
    218c:	be 01       	movw	r22, r28
    218e:	6d 5e       	subi	r22, 0xED	; 237
    2190:	7f 4f       	sbci	r23, 0xFF	; 255
    2192:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2194:	98 a1       	ldd	r25, Y+32	; 0x20
    2196:	0e 94 59 00 	call	0xb2	; 0xb2 <parse_int>
			
			if (result == 0)
    219a:	89 2b       	or	r24, r25
    219c:	29 f4       	brne	.+10     	; 0x21a8 <parse_command+0x550>
			{
				send_string("WRONG PWM0 PARSE\r\n");
    219e:	83 ee       	ldi	r24, 0xE3	; 227
    21a0:	93 e0       	ldi	r25, 0x03	; 3
    21a2:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    21a6:	c7 c0       	rjmp	.+398    	; 0x2336 <parse_command+0x6de>
			} else
			{
				set_pwm0(ti);
    21a8:	8b 89       	ldd	r24, Y+19	; 0x13
    21aa:	0e 94 cd 07 	call	0xf9a	; 0xf9a <set_pwm0>
				send_string("OK\r\n");
    21ae:	8c e1       	ldi	r24, 0x1C	; 28
    21b0:	94 e0       	ldi	r25, 0x04	; 4
    21b2:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    21b6:	bf c0       	rjmp	.+382    	; 0x2336 <parse_command+0x6de>
			}
			
		}
		// AT+PWM1=45 => PWM4 at 45%
		else if (strcmp(command, "PWM1") == 0)
    21b8:	69 e2       	ldi	r22, 0x29	; 41
    21ba:	71 e0       	ldi	r23, 0x01	; 1
    21bc:	80 2f       	mov	r24, r16
    21be:	91 2f       	mov	r25, r17
    21c0:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    21c4:	28 2f       	mov	r18, r24
    21c6:	39 2f       	mov	r19, r25
    21c8:	23 2b       	or	r18, r19
    21ca:	b1 f4       	brne	.+44     	; 0x21f8 <parse_command+0x5a0>
		{
			int16_t ti;
			long int result = 0;
			
			result = parse_int(param, &ti);
    21cc:	be 01       	movw	r22, r28
    21ce:	6d 5e       	subi	r22, 0xED	; 237
    21d0:	7f 4f       	sbci	r23, 0xFF	; 255
    21d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21d4:	98 a1       	ldd	r25, Y+32	; 0x20
    21d6:	0e 94 59 00 	call	0xb2	; 0xb2 <parse_int>
			
			if (result == 0)
    21da:	89 2b       	or	r24, r25
    21dc:	29 f4       	brne	.+10     	; 0x21e8 <parse_command+0x590>
			{
				send_string("WRONG PWM1 PARSE\r\n");
    21de:	86 ef       	ldi	r24, 0xF6	; 246
    21e0:	93 e0       	ldi	r25, 0x03	; 3
    21e2:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    21e6:	a7 c0       	rjmp	.+334    	; 0x2336 <parse_command+0x6de>
			} else
			{
				set_pwm1(ti);
    21e8:	8b 89       	ldd	r24, Y+19	; 0x13
    21ea:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <set_pwm1>
				send_string("OK\r\n");
    21ee:	8c e1       	ldi	r24, 0x1C	; 28
    21f0:	94 e0       	ldi	r25, 0x04	; 4
    21f2:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    21f6:	9f c0       	rjmp	.+318    	; 0x2336 <parse_command+0x6de>
			}
			
		}
		// AT+EXP0=0 => low state EXP0
		else if (strcmp(command, "EXP0") == 0)
    21f8:	60 e1       	ldi	r22, 0x10	; 16
    21fa:	71 e0       	ldi	r23, 0x01	; 1
    21fc:	80 2f       	mov	r24, r16
    21fe:	91 2f       	mov	r25, r17
    2200:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    2204:	28 2f       	mov	r18, r24
    2206:	39 2f       	mov	r19, r25
    2208:	23 2b       	or	r18, r19
    220a:	91 f4       	brne	.+36     	; 0x2230 <parse_command+0x5d8>
		{
			if (param[0] == '1')
    220c:	f6 01       	movw	r30, r12
    220e:	80 81       	ld	r24, Z
    2210:	81 33       	cpi	r24, 0x31	; 49
    2212:	29 f4       	brne	.+10     	; 0x221e <parse_command+0x5c6>
			set_pin(EXP0_PC2, 1);
    2214:	61 e0       	ldi	r22, 0x01	; 1
    2216:	84 e0       	ldi	r24, 0x04	; 4
    2218:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <set_pin>
    221c:	04 c0       	rjmp	.+8      	; 0x2226 <parse_command+0x5ce>
			else
			set_pin(EXP0_PC2, 0);
    221e:	60 e0       	ldi	r22, 0x00	; 0
    2220:	84 e0       	ldi	r24, 0x04	; 4
    2222:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <set_pin>
			
			send_string("OK\r\n");
    2226:	8c e1       	ldi	r24, 0x1C	; 28
    2228:	94 e0       	ldi	r25, 0x04	; 4
    222a:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    222e:	83 c0       	rjmp	.+262    	; 0x2336 <parse_command+0x6de>
		}
		else if (strcmp(command, "EXP1") == 0)
    2230:	65 e1       	ldi	r22, 0x15	; 21
    2232:	71 e0       	ldi	r23, 0x01	; 1
    2234:	80 2f       	mov	r24, r16
    2236:	91 2f       	mov	r25, r17
    2238:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    223c:	28 2f       	mov	r18, r24
    223e:	39 2f       	mov	r19, r25
    2240:	23 2b       	or	r18, r19
    2242:	91 f4       	brne	.+36     	; 0x2268 <parse_command+0x610>
		{
			if (param[0] == '1')
    2244:	f6 01       	movw	r30, r12
    2246:	80 81       	ld	r24, Z
    2248:	81 33       	cpi	r24, 0x31	; 49
    224a:	29 f4       	brne	.+10     	; 0x2256 <parse_command+0x5fe>
			set_pin(EXP1_PD4, 1);
    224c:	61 e0       	ldi	r22, 0x01	; 1
    224e:	85 e0       	ldi	r24, 0x05	; 5
    2250:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <set_pin>
    2254:	04 c0       	rjmp	.+8      	; 0x225e <parse_command+0x606>
			else
			set_pin(EXP1_PD4, 0);
    2256:	60 e0       	ldi	r22, 0x00	; 0
    2258:	85 e0       	ldi	r24, 0x05	; 5
    225a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <set_pin>
			
			send_string("OK\r\n");
    225e:	8c e1       	ldi	r24, 0x1C	; 28
    2260:	94 e0       	ldi	r25, 0x04	; 4
    2262:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    2266:	67 c0       	rjmp	.+206    	; 0x2336 <parse_command+0x6de>
		}
		else if (strcmp(command, "EXP2") == 0)
    2268:	6a e1       	ldi	r22, 0x1A	; 26
    226a:	71 e0       	ldi	r23, 0x01	; 1
    226c:	80 2f       	mov	r24, r16
    226e:	91 2f       	mov	r25, r17
    2270:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    2274:	28 2f       	mov	r18, r24
    2276:	39 2f       	mov	r19, r25
    2278:	23 2b       	or	r18, r19
    227a:	91 f4       	brne	.+36     	; 0x22a0 <parse_command+0x648>
		{
			if (param[0] == '1')
    227c:	f6 01       	movw	r30, r12
    227e:	80 81       	ld	r24, Z
    2280:	81 33       	cpi	r24, 0x31	; 49
    2282:	29 f4       	brne	.+10     	; 0x228e <parse_command+0x636>
			set_pin(EXP2_PD7, 1);
    2284:	61 e0       	ldi	r22, 0x01	; 1
    2286:	86 e0       	ldi	r24, 0x06	; 6
    2288:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <set_pin>
    228c:	04 c0       	rjmp	.+8      	; 0x2296 <parse_command+0x63e>
			else
			set_pin(EXP2_PD7, 0);
    228e:	60 e0       	ldi	r22, 0x00	; 0
    2290:	86 e0       	ldi	r24, 0x06	; 6
    2292:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <set_pin>
			
			send_string("OK\r\n");
    2296:	8c e1       	ldi	r24, 0x1C	; 28
    2298:	94 e0       	ldi	r25, 0x04	; 4
    229a:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    229e:	4b c0       	rjmp	.+150    	; 0x2336 <parse_command+0x6de>
		}
		else if (strcmp(command, "EXP3") == 0)
    22a0:	6f e1       	ldi	r22, 0x1F	; 31
    22a2:	71 e0       	ldi	r23, 0x01	; 1
    22a4:	80 2f       	mov	r24, r16
    22a6:	91 2f       	mov	r25, r17
    22a8:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    22ac:	28 2f       	mov	r18, r24
    22ae:	39 2f       	mov	r19, r25
    22b0:	23 2b       	or	r18, r19
    22b2:	91 f4       	brne	.+36     	; 0x22d8 <parse_command+0x680>
		{
			if (param[0] == '1')
    22b4:	f6 01       	movw	r30, r12
    22b6:	80 81       	ld	r24, Z
    22b8:	81 33       	cpi	r24, 0x31	; 49
    22ba:	29 f4       	brne	.+10     	; 0x22c6 <parse_command+0x66e>
			set_pin(EXP3_PB0, 1);
    22bc:	61 e0       	ldi	r22, 0x01	; 1
    22be:	87 e0       	ldi	r24, 0x07	; 7
    22c0:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <set_pin>
    22c4:	04 c0       	rjmp	.+8      	; 0x22ce <parse_command+0x676>
			else
			set_pin(EXP3_PB0, 0);
    22c6:	60 e0       	ldi	r22, 0x00	; 0
    22c8:	87 e0       	ldi	r24, 0x07	; 7
    22ca:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <set_pin>
			
			send_string("OK\r\n");
    22ce:	8c e1       	ldi	r24, 0x1C	; 28
    22d0:	94 e0       	ldi	r25, 0x04	; 4
    22d2:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    22d6:	2f c0       	rjmp	.+94     	; 0x2336 <parse_command+0x6de>
		}
		else if (strcmp(command, "PASS") == 0)
    22d8:	69 e0       	ldi	r22, 0x09	; 9
    22da:	74 e0       	ldi	r23, 0x04	; 4
    22dc:	80 2f       	mov	r24, r16
    22de:	91 2f       	mov	r25, r17
    22e0:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    22e4:	28 2f       	mov	r18, r24
    22e6:	39 2f       	mov	r19, r25
    22e8:	23 2b       	or	r18, r19
    22ea:	09 f5       	brne	.+66     	; 0x232e <parse_command+0x6d6>
		{
			if (get_event_mode() != MANUAL_MODE) {
    22ec:	0e 94 93 00 	call	0x126	; 0x126 <get_event_mode>
    22f0:	81 30       	cpi	r24, 0x01	; 1
    22f2:	29 f0       	breq	.+10     	; 0x22fe <parse_command+0x6a6>
				send_string("Switch to MANUAL mode first!\r\n");
    22f4:	8f ec       	ldi	r24, 0xCF	; 207
    22f6:	92 e0       	ldi	r25, 0x02	; 2
    22f8:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    22fc:	26 c0       	rjmp	.+76     	; 0x234a <parse_command+0x6f2>
				return;
			}
			
			clear_buffer();
    22fe:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <clear_buffer>
			
			mode = PASS;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	90 93 58 05 	sts	0x0558, r25
    230a:	80 93 57 05 	sts	0x0557, r24
			
			// pin34 - enable AT mode for BT
			// set high state
			PORTC |= (1 << DDC0);
    230e:	40 9a       	sbi	0x08, 0	; 8
    2310:	8f e4       	ldi	r24, 0x4F	; 79
    2312:	93 ec       	ldi	r25, 0xC3	; 195
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	f1 f7       	brne	.-4      	; 0x2314 <parse_command+0x6bc>
    2318:	00 c0       	rjmp	.+0      	; 0x231a <parse_command+0x6c2>
    231a:	00 00       	nop
			
			_delay_ms(200);
			
			send_string(param);
    231c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    231e:	98 a1       	ldd	r25, Y+32	; 0x20
    2320:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
			send_string("\r\n");
    2324:	83 e5       	ldi	r24, 0x53	; 83
    2326:	95 e0       	ldi	r25, 0x05	; 5
    2328:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    232c:	0e c0       	rjmp	.+28     	; 0x234a <parse_command+0x6f2>
			
			return;
			
		}
		else
		send_string("?\r\n");
    232e:	87 e3       	ldi	r24, 0x37	; 55
    2330:	94 e0       	ldi	r25, 0x04	; 4
    2332:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    2336:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2338:	2e 8d       	ldd	r18, Y+30	; 0x1e
    233a:	83 2f       	mov	r24, r19
    233c:	92 2f       	mov	r25, r18
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	9e bf       	out	0x3e, r25	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	8d bf       	out	0x3d, r24	; 61
    2348:	51 c1       	rjmp	.+674    	; 0x25ec <parse_command+0x994>
    234a:	3d 8d       	ldd	r19, Y+29	; 0x1d
    234c:	2e 8d       	ldd	r18, Y+30	; 0x1e
    234e:	83 2f       	mov	r24, r19
    2350:	92 2f       	mov	r25, r18
    2352:	0f b6       	in	r0, 0x3f	; 63
    2354:	f8 94       	cli
    2356:	9e bf       	out	0x3e, r25	; 62
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	8d bf       	out	0x3d, r24	; 61
    235c:	51 c1       	rjmp	.+674    	; 0x2600 <parse_command+0x9a8>
    235e:	8d b6       	in	r8, 0x3d	; 61
    2360:	9e b6       	in	r9, 0x3e	; 62
		
	} else
	{
		// copy command
		char command[size + 1];
    2362:	ed b7       	in	r30, 0x3d	; 61
    2364:	fe b7       	in	r31, 0x3e	; 62
    2366:	e0 1b       	sub	r30, r16
    2368:	f1 0b       	sbc	r31, r17
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	fe bf       	out	0x3e, r31	; 62
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	ed bf       	out	0x3d, r30	; 61
    2374:	0d b7       	in	r16, 0x3d	; 61
    2376:	1e b7       	in	r17, 0x3e	; 62
    2378:	0f 5f       	subi	r16, 0xFF	; 255
    237a:	1f 4f       	sbci	r17, 0xFF	; 255
		strncpy(command, tca, size);
    237c:	a6 01       	movw	r20, r12
    237e:	b7 01       	movw	r22, r14
    2380:	80 2f       	mov	r24, r16
    2382:	91 2f       	mov	r25, r17
    2384:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <strncpy>
		command[sizeof(command) - 1] = 0x00;
    2388:	f8 01       	movw	r30, r16
    238a:	ec 0d       	add	r30, r12
    238c:	fd 1d       	adc	r31, r13
    238e:	10 82       	st	Z, r1
		
		if (strcmp(command, "MEROPE") == 0)
    2390:	6e e0       	ldi	r22, 0x0E	; 14
    2392:	74 e0       	ldi	r23, 0x04	; 4
    2394:	80 2f       	mov	r24, r16
    2396:	91 2f       	mov	r25, r17
    2398:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    239c:	28 2f       	mov	r18, r24
    239e:	39 2f       	mov	r19, r25
    23a0:	23 2b       	or	r18, r19
    23a2:	29 f4       	brne	.+10     	; 0x23ae <parse_command+0x756>
		send_string("MEROPE OK\r\n");
    23a4:	85 e1       	ldi	r24, 0x15	; 21
    23a6:	94 e0       	ldi	r25, 0x04	; 4
    23a8:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    23ac:	0f c1       	rjmp	.+542    	; 0x25cc <parse_command+0x974>
		else if (strcmp(command, "TIME?") == 0) {
    23ae:	61 e2       	ldi	r22, 0x21	; 33
    23b0:	74 e0       	ldi	r23, 0x04	; 4
    23b2:	80 2f       	mov	r24, r16
    23b4:	91 2f       	mov	r25, r17
    23b6:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    23ba:	28 2f       	mov	r18, r24
    23bc:	39 2f       	mov	r19, r25
    23be:	23 2b       	or	r18, r19
    23c0:	61 f4       	brne	.+24     	; 0x23da <parse_command+0x782>
			if (get_event_mode() == MANUAL_MODE)
    23c2:	0e 94 93 00 	call	0x126	; 0x126 <get_event_mode>
    23c6:	81 30       	cpi	r24, 0x01	; 1
    23c8:	19 f4       	brne	.+6      	; 0x23d0 <parse_command+0x778>
				read_time();
    23ca:	0e 94 92 09 	call	0x1324	; 0x1324 <read_time>
    23ce:	fe c0       	rjmp	.+508    	; 0x25cc <parse_command+0x974>
			else
				send_string("Switch to MANUAL mode first!\r\n");
    23d0:	8f ec       	ldi	r24, 0xCF	; 207
    23d2:	92 e0       	ldi	r25, 0x02	; 2
    23d4:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    23d8:	f9 c0       	rjmp	.+498    	; 0x25cc <parse_command+0x974>
		}
		else if (strcmp(command, "DATE?") == 0) {
    23da:	67 e2       	ldi	r22, 0x27	; 39
    23dc:	74 e0       	ldi	r23, 0x04	; 4
    23de:	80 2f       	mov	r24, r16
    23e0:	91 2f       	mov	r25, r17
    23e2:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    23e6:	28 2f       	mov	r18, r24
    23e8:	39 2f       	mov	r19, r25
    23ea:	23 2b       	or	r18, r19
    23ec:	61 f4       	brne	.+24     	; 0x2406 <parse_command+0x7ae>
			if (get_event_mode() == MANUAL_MODE)
    23ee:	0e 94 93 00 	call	0x126	; 0x126 <get_event_mode>
    23f2:	81 30       	cpi	r24, 0x01	; 1
    23f4:	19 f4       	brne	.+6      	; 0x23fc <parse_command+0x7a4>
				read_date();
    23f6:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <read_date>
    23fa:	e8 c0       	rjmp	.+464    	; 0x25cc <parse_command+0x974>
			else
				send_string("Switch to MANUAL mode first!\r\n");
    23fc:	8f ec       	ldi	r24, 0xCF	; 207
    23fe:	92 e0       	ldi	r25, 0x02	; 2
    2400:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    2404:	e3 c0       	rjmp	.+454    	; 0x25cc <parse_command+0x974>
		}
		else if (strcmp(command, "PASS") == 0)
    2406:	69 e0       	ldi	r22, 0x09	; 9
    2408:	74 e0       	ldi	r23, 0x04	; 4
    240a:	80 2f       	mov	r24, r16
    240c:	91 2f       	mov	r25, r17
    240e:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    2412:	28 2f       	mov	r18, r24
    2414:	39 2f       	mov	r19, r25
    2416:	23 2b       	or	r18, r19
    2418:	e9 f4       	brne	.+58     	; 0x2454 <parse_command+0x7fc>
		{
			if (get_event_mode() != MANUAL_MODE) {
    241a:	0e 94 93 00 	call	0x126	; 0x126 <get_event_mode>
    241e:	81 30       	cpi	r24, 0x01	; 1
    2420:	29 f0       	breq	.+10     	; 0x242c <parse_command+0x7d4>
				send_string("Switch to MANUAL mode first!\r\n");
    2422:	8f ec       	ldi	r24, 0xCF	; 207
    2424:	92 e0       	ldi	r25, 0x02	; 2
    2426:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    242a:	d8 c0       	rjmp	.+432    	; 0x25dc <parse_command+0x984>
				return;
			}
			
			mode = PASS;
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	90 93 58 05 	sts	0x0558, r25
    2434:	80 93 57 05 	sts	0x0557, r24
			clear_buffer();
    2438:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <clear_buffer>
			
			// pin34 - enable AT mode for BT
			// set high state
			PORTC |= (1 << DDC0);
    243c:	40 9a       	sbi	0x08, 0	; 8
    243e:	87 ea       	ldi	r24, 0xA7	; 167
    2440:	91 e6       	ldi	r25, 0x61	; 97
    2442:	01 97       	sbiw	r24, 0x01	; 1
    2444:	f1 f7       	brne	.-4      	; 0x2442 <parse_command+0x7ea>
    2446:	00 c0       	rjmp	.+0      	; 0x2448 <parse_command+0x7f0>
    2448:	00 00       	nop
			
			_delay_ms(100);
			
			send_string("AT+VERSION?\r\n");
    244a:	8d e2       	ldi	r24, 0x2D	; 45
    244c:	94 e0       	ldi	r25, 0x04	; 4
    244e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    2452:	c4 c0       	rjmp	.+392    	; 0x25dc <parse_command+0x984>
			return;
		}
		else if (strcmp(command, "DISABLE_CLKOUT") == 0)
    2454:	6b e3       	ldi	r22, 0x3B	; 59
    2456:	74 e0       	ldi	r23, 0x04	; 4
    2458:	80 2f       	mov	r24, r16
    245a:	91 2f       	mov	r25, r17
    245c:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    2460:	28 2f       	mov	r18, r24
    2462:	39 2f       	mov	r19, r25
    2464:	23 2b       	or	r18, r19
    2466:	39 f4       	brne	.+14     	; 0x2476 <parse_command+0x81e>
		{
			disable_clkout();
    2468:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <disable_clkout>
			send_string("OK\r\n");
    246c:	8c e1       	ldi	r24, 0x1C	; 28
    246e:	94 e0       	ldi	r25, 0x04	; 4
    2470:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    2474:	ab c0       	rjmp	.+342    	; 0x25cc <parse_command+0x974>
		}
		else if (strcmp(command, "CLEAR_EVENTS") == 0)
    2476:	6a e4       	ldi	r22, 0x4A	; 74
    2478:	74 e0       	ldi	r23, 0x04	; 4
    247a:	80 2f       	mov	r24, r16
    247c:	91 2f       	mov	r25, r17
    247e:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    2482:	28 2f       	mov	r18, r24
    2484:	39 2f       	mov	r19, r25
    2486:	23 2b       	or	r18, r19
    2488:	81 f4       	brne	.+32     	; 0x24aa <parse_command+0x852>
		{
			if (get_event_mode() != MANUAL_MODE) {
    248a:	0e 94 93 00 	call	0x126	; 0x126 <get_event_mode>
    248e:	81 30       	cpi	r24, 0x01	; 1
    2490:	29 f0       	breq	.+10     	; 0x249c <parse_command+0x844>
				send_string("Switch to MANUAL mode first!\r\n");
    2492:	8f ec       	ldi	r24, 0xCF	; 207
    2494:	92 e0       	ldi	r25, 0x02	; 2
    2496:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    249a:	a0 c0       	rjmp	.+320    	; 0x25dc <parse_command+0x984>
				return;
			}
			
			clear_events();
    249c:	0e 94 77 03 	call	0x6ee	; 0x6ee <clear_events>
			send_string("OK\r\n");
    24a0:	8c e1       	ldi	r24, 0x1C	; 28
    24a2:	94 e0       	ldi	r25, 0x04	; 4
    24a4:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    24a8:	91 c0       	rjmp	.+290    	; 0x25cc <parse_command+0x974>
		}
		else if (strcmp(command, "PRINT_EVENTS") == 0)
    24aa:	67 e5       	ldi	r22, 0x57	; 87
    24ac:	74 e0       	ldi	r23, 0x04	; 4
    24ae:	80 2f       	mov	r24, r16
    24b0:	91 2f       	mov	r25, r17
    24b2:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    24b6:	28 2f       	mov	r18, r24
    24b8:	39 2f       	mov	r19, r25
    24ba:	23 2b       	or	r18, r19
    24bc:	19 f4       	brne	.+6      	; 0x24c4 <parse_command+0x86c>
		{
			print_events();
    24be:	0e 94 35 03 	call	0x66a	; 0x66a <print_events>
    24c2:	84 c0       	rjmp	.+264    	; 0x25cc <parse_command+0x974>
		}
		else if (strcmp(command, "MANUAL_MODE") == 0)
    24c4:	69 e1       	ldi	r22, 0x19	; 25
    24c6:	72 e0       	ldi	r23, 0x02	; 2
    24c8:	80 2f       	mov	r24, r16
    24ca:	91 2f       	mov	r25, r17
    24cc:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    24d0:	28 2f       	mov	r18, r24
    24d2:	39 2f       	mov	r19, r25
    24d4:	23 2b       	or	r18, r19
    24d6:	81 f4       	brne	.+32     	; 0x24f8 <parse_command+0x8a0>
		{
			if (get_event_mode() == MANUAL_MODE) {
    24d8:	0e 94 93 00 	call	0x126	; 0x126 <get_event_mode>
    24dc:	81 30       	cpi	r24, 0x01	; 1
    24de:	29 f4       	brne	.+10     	; 0x24ea <parse_command+0x892>
				send_string("MANUAL mode already set!\r\n");
    24e0:	84 e6       	ldi	r24, 0x64	; 100
    24e2:	94 e0       	ldi	r25, 0x04	; 4
    24e4:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    24e8:	79 c0       	rjmp	.+242    	; 0x25dc <parse_command+0x984>
				return;
			}
			
			set_manual_mode();
    24ea:	0e 94 96 00 	call	0x12c	; 0x12c <set_manual_mode>
			send_string("OK\r\n");
    24ee:	8c e1       	ldi	r24, 0x1C	; 28
    24f0:	94 e0       	ldi	r25, 0x04	; 4
    24f2:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    24f6:	6a c0       	rjmp	.+212    	; 0x25cc <parse_command+0x974>
		}
		else if (strcmp(command, "EVENT_MODE") == 0)
    24f8:	6f e7       	ldi	r22, 0x7F	; 127
    24fa:	74 e0       	ldi	r23, 0x04	; 4
    24fc:	80 2f       	mov	r24, r16
    24fe:	91 2f       	mov	r25, r17
    2500:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    2504:	28 2f       	mov	r18, r24
    2506:	39 2f       	mov	r19, r25
    2508:	23 2b       	or	r18, r19
    250a:	81 f4       	brne	.+32     	; 0x252c <parse_command+0x8d4>
		{
			if (get_event_mode() == EVENT_MODE) {
    250c:	0e 94 93 00 	call	0x126	; 0x126 <get_event_mode>
    2510:	81 11       	cpse	r24, r1
    2512:	05 c0       	rjmp	.+10     	; 0x251e <parse_command+0x8c6>
				send_string("EVENT mode already set!\r\n");
    2514:	8a e8       	ldi	r24, 0x8A	; 138
    2516:	94 e0       	ldi	r25, 0x04	; 4
    2518:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    251c:	5f c0       	rjmp	.+190    	; 0x25dc <parse_command+0x984>
				return;
			}

			set_event_mode();
    251e:	0e 94 af 07 	call	0xf5e	; 0xf5e <set_event_mode>
			send_string("OK\r\n");
    2522:	8c e1       	ldi	r24, 0x1C	; 28
    2524:	94 e0       	ldi	r25, 0x04	; 4
    2526:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    252a:	50 c0       	rjmp	.+160    	; 0x25cc <parse_command+0x974>
		}
		else if (strcmp(command, "GET_VL") == 0)
    252c:	64 ea       	ldi	r22, 0xA4	; 164
    252e:	74 e0       	ldi	r23, 0x04	; 4
    2530:	80 2f       	mov	r24, r16
    2532:	91 2f       	mov	r25, r17
    2534:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    2538:	28 2f       	mov	r18, r24
    253a:	39 2f       	mov	r19, r25
    253c:	23 2b       	or	r18, r19
    253e:	b9 f4       	brne	.+46     	; 0x256e <parse_command+0x916>
		{
			if (get_event_mode() != MANUAL_MODE) {
    2540:	0e 94 93 00 	call	0x126	; 0x126 <get_event_mode>
    2544:	81 30       	cpi	r24, 0x01	; 1
    2546:	29 f0       	breq	.+10     	; 0x2552 <parse_command+0x8fa>
				send_string("Switch to MANUAL mode first!\r\n");
    2548:	8f ec       	ldi	r24, 0xCF	; 207
    254a:	92 e0       	ldi	r25, 0x02	; 2
    254c:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    2550:	45 c0       	rjmp	.+138    	; 0x25dc <parse_command+0x984>
				return;
			}
			
			// check VL bit in PCF8563
			if (get_vl())
    2552:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <get_vl>
    2556:	89 2b       	or	r24, r25
    2558:	29 f0       	breq	.+10     	; 0x2564 <parse_command+0x90c>
			send_string("VL bit is set. Replace backup battery\r\n");
    255a:	8b ea       	ldi	r24, 0xAB	; 171
    255c:	94 e0       	ldi	r25, 0x04	; 4
    255e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    2562:	34 c0       	rjmp	.+104    	; 0x25cc <parse_command+0x974>
			else
			send_string("VL bit isn't set. Backup battery is ok\r\n");
    2564:	83 ed       	ldi	r24, 0xD3	; 211
    2566:	94 e0       	ldi	r25, 0x04	; 4
    2568:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    256c:	2f c0       	rjmp	.+94     	; 0x25cc <parse_command+0x974>
		}
		else if (strcmp(command, "RESET_VL") == 0)
    256e:	6c ef       	ldi	r22, 0xFC	; 252
    2570:	74 e0       	ldi	r23, 0x04	; 4
    2572:	80 2f       	mov	r24, r16
    2574:	91 2f       	mov	r25, r17
    2576:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    257a:	28 2f       	mov	r18, r24
    257c:	39 2f       	mov	r19, r25
    257e:	23 2b       	or	r18, r19
    2580:	81 f4       	brne	.+32     	; 0x25a2 <parse_command+0x94a>
		{
			if (get_event_mode() != MANUAL_MODE) {
    2582:	0e 94 93 00 	call	0x126	; 0x126 <get_event_mode>
    2586:	81 30       	cpi	r24, 0x01	; 1
    2588:	29 f0       	breq	.+10     	; 0x2594 <parse_command+0x93c>
				send_string("Switch to MANUAL mode first!\r\n");
    258a:	8f ec       	ldi	r24, 0xCF	; 207
    258c:	92 e0       	ldi	r25, 0x02	; 2
    258e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    2592:	24 c0       	rjmp	.+72     	; 0x25dc <parse_command+0x984>
				return;
			}
			
			// resets vl_bit in PCF8563
			reset_vl();
    2594:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <reset_vl>
			send_string("OK\r\n");
    2598:	8c e1       	ldi	r24, 0x1C	; 28
    259a:	94 e0       	ldi	r25, 0x04	; 4
    259c:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    25a0:	15 c0       	rjmp	.+42     	; 0x25cc <parse_command+0x974>
		}
		else if (strcmp(command, "RESET") == 0)
    25a2:	65 e0       	ldi	r22, 0x05	; 5
    25a4:	75 e0       	ldi	r23, 0x05	; 5
    25a6:	80 2f       	mov	r24, r16
    25a8:	91 2f       	mov	r25, r17
    25aa:	0e 94 f6 15 	call	0x2bec	; 0x2bec <strcmp>
    25ae:	28 2f       	mov	r18, r24
    25b0:	39 2f       	mov	r19, r25
    25b2:	23 2b       	or	r18, r19
    25b4:	39 f4       	brne	.+14     	; 0x25c4 <parse_command+0x96c>
		{
			// resets device
			send_string("OK\r\n");
    25b6:	8c e1       	ldi	r24, 0x1C	; 28
    25b8:	94 e0       	ldi	r25, 0x04	; 4
    25ba:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
			reset();
    25be:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <reset>
    25c2:	04 c0       	rjmp	.+8      	; 0x25cc <parse_command+0x974>
		}
		else
		send_string("?\r\n");
    25c4:	87 e3       	ldi	r24, 0x37	; 55
    25c6:	94 e0       	ldi	r25, 0x04	; 4
    25c8:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    25cc:	88 2d       	mov	r24, r8
    25ce:	99 2d       	mov	r25, r9
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	f8 94       	cli
    25d4:	9e bf       	out	0x3e, r25	; 62
    25d6:	0f be       	out	0x3f, r0	; 63
    25d8:	8d bf       	out	0x3d, r24	; 61
    25da:	08 c0       	rjmp	.+16     	; 0x25ec <parse_command+0x994>
    25dc:	88 2d       	mov	r24, r8
    25de:	99 2d       	mov	r25, r9
    25e0:	0f b6       	in	r0, 0x3f	; 63
    25e2:	f8 94       	cli
    25e4:	9e bf       	out	0x3e, r25	; 62
    25e6:	0f be       	out	0x3f, r0	; 63
    25e8:	8d bf       	out	0x3d, r24	; 61
    25ea:	0a c0       	rjmp	.+20     	; 0x2600 <parse_command+0x9a8>
    25ec:	3b 8d       	ldd	r19, Y+27	; 0x1b
    25ee:	2c 8d       	ldd	r18, Y+28	; 0x1c
    25f0:	83 2f       	mov	r24, r19
    25f2:	92 2f       	mov	r25, r18
    25f4:	0f b6       	in	r0, 0x3f	; 63
    25f6:	f8 94       	cli
    25f8:	9e bf       	out	0x3e, r25	; 62
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	8d bf       	out	0x3d, r24	; 61
    25fe:	19 c0       	rjmp	.+50     	; 0x2632 <parse_command+0x9da>
    2600:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2602:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2604:	83 2f       	mov	r24, r19
    2606:	92 2f       	mov	r25, r18
    2608:	0f b6       	in	r0, 0x3f	; 63
    260a:	f8 94       	cli
    260c:	9e bf       	out	0x3e, r25	; 62
    260e:	0f be       	out	0x3f, r0	; 63
    2610:	8d bf       	out	0x3d, r24	; 61
    2612:	0f c0       	rjmp	.+30     	; 0x2632 <parse_command+0x9da>
				{
					send_string("WRONG TIME PARSE\r\n");
					break;
				}
			}
			send_enter();
    2614:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <send_enter>

			if (result != 0) {
				struct Time time;
				time.hour = tia[0];
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	89 87       	std	Y+9, r24	; 0x09
				time.minute = tia[1];
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	8a 87       	std	Y+10, r24	; 0x0a
				time.second = tia[2];
    2620:	8d 81       	ldd	r24, Y+5	; 0x05
    2622:	8b 87       	std	Y+11, r24	; 0x0b
				
				set_time(&time);
    2624:	ce 01       	movw	r24, r28
    2626:	09 96       	adiw	r24, 0x09	; 9
    2628:	0e 94 04 09 	call	0x1208	; 0x1208 <set_time>
				
				read_time();
    262c:	0e 94 92 09 	call	0x1324	; 0x1324 <read_time>
    2630:	e6 cb       	rjmp	.-2100   	; 0x1dfe <parse_command+0x1a6>
			reset();
		}
		else
		send_string("?\r\n");
	}
}
    2632:	0f b6       	in	r0, 0x3f	; 63
    2634:	f8 94       	cli
    2636:	be be       	out	0x3e, r11	; 62
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	ad be       	out	0x3d, r10	; 61
    263c:	a0 96       	adiw	r28, 0x20	; 32
    263e:	0f b6       	in	r0, 0x3f	; 63
    2640:	f8 94       	cli
    2642:	de bf       	out	0x3e, r29	; 62
    2644:	0f be       	out	0x3f, r0	; 63
    2646:	cd bf       	out	0x3d, r28	; 61
    2648:	df 91       	pop	r29
    264a:	cf 91       	pop	r28
    264c:	1f 91       	pop	r17
    264e:	0f 91       	pop	r16
    2650:	ff 90       	pop	r15
    2652:	ef 90       	pop	r14
    2654:	df 90       	pop	r13
    2656:	cf 90       	pop	r12
    2658:	bf 90       	pop	r11
    265a:	af 90       	pop	r10
    265c:	9f 90       	pop	r9
    265e:	8f 90       	pop	r8
    2660:	7f 90       	pop	r7
    2662:	6f 90       	pop	r6
    2664:	5f 90       	pop	r5
    2666:	4f 90       	pop	r4
    2668:	3f 90       	pop	r3
    266a:	2f 90       	pop	r2
    266c:	08 95       	ret

0000266e <check>:


void check()
{
    266e:	0f 93       	push	r16
    2670:	1f 93       	push	r17
    2672:	cf 93       	push	r28
    2674:	df 93       	push	r29
    2676:	cd b7       	in	r28, 0x3d	; 61
    2678:	de b7       	in	r29, 0x3e	; 62
    267a:	c2 55       	subi	r28, 0x52	; 82
    267c:	d1 09       	sbc	r29, r1
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	f8 94       	cli
    2682:	de bf       	out	0x3e, r29	; 62
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	cd bf       	out	0x3d, r28	; 61
	if (mode == PASS)
    2688:	80 91 57 05 	lds	r24, 0x0557
    268c:	90 91 58 05 	lds	r25, 0x0558
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	59 f5       	brne	.+86     	; 0x26ea <check+0x7c>
	{
		// set low state
		PORTC &=~ (1 << DDC0);
    2694:	40 98       	cbi	0x08, 0	; 8
    2696:	87 ea       	ldi	r24, 0xA7	; 167
    2698:	91 e6       	ldi	r25, 0x61	; 97
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	f1 f7       	brne	.-4      	; 0x269a <check+0x2c>
    269e:	00 c0       	rjmp	.+0      	; 0x26a0 <check+0x32>
    26a0:	00 00       	nop
		
		_delay_ms(100);
		
		mode = STANDARD;
    26a2:	10 92 58 05 	sts	0x0558, r1
    26a6:	10 92 57 05 	sts	0x0557, r1
    26aa:	fe 01       	movw	r30, r28
    26ac:	31 96       	adiw	r30, 0x01	; 1
		send_string("?\r\n");
	}
}


void check()
    26ae:	ce 01       	movw	r24, r28
    26b0:	8f 5a       	subi	r24, 0xAF	; 175
    26b2:	9f 4f       	sbci	r25, 0xFF	; 255
		
		char tbuf[80];
		
		// clear buffer
		for (uint16_t i = 0; i < sizeof(tbuf); i++)
			tbuf[i] = 0x00;
    26b4:	11 92       	st	Z+, r1
		mode = STANDARD;
		
		char tbuf[80];
		
		// clear buffer
		for (uint16_t i = 0; i < sizeof(tbuf); i++)
    26b6:	e8 17       	cp	r30, r24
    26b8:	f9 07       	cpc	r31, r25
    26ba:	e1 f7       	brne	.-8      	; 0x26b4 <check+0x46>
			tbuf[i] = 0x00;
		
		strncpy(tbuf, buffer, pos - 1);
    26bc:	40 91 59 05 	lds	r20, 0x0559
    26c0:	50 91 5a 05 	lds	r21, 0x055A
    26c4:	41 50       	subi	r20, 0x01	; 1
    26c6:	51 09       	sbc	r21, r1
    26c8:	6f ef       	ldi	r22, 0xFF	; 255
    26ca:	76 e0       	ldi	r23, 0x06	; 6
    26cc:	ce 01       	movw	r24, r28
    26ce:	01 96       	adiw	r24, 0x01	; 1
    26d0:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <strncpy>
		
		send_string(tbuf);
    26d4:	ce 01       	movw	r24, r28
    26d6:	01 96       	adiw	r24, 0x01	; 1
    26d8:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
		send_string("\r\n");
    26dc:	83 e5       	ldi	r24, 0x53	; 83
    26de:	95 e0       	ldi	r25, 0x05	; 5
    26e0:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
		
		clear_buffer();
    26e4:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <clear_buffer>
    26e8:	64 c0       	rjmp	.+200    	; 0x27b2 <check+0x144>
	} else if (mode == PASS)
	return;
	
	
	// AT command
	else if ((buffer[0] == 'A') & (buffer[1] == 'T'))
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	90 91 00 07 	lds	r25, 0x0700
    26f0:	94 35       	cpi	r25, 0x54	; 84
    26f2:	09 f0       	breq	.+2      	; 0x26f6 <check+0x88>
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	88 23       	and	r24, r24
    26f8:	09 f4       	brne	.+2      	; 0x26fc <check+0x8e>
    26fa:	5b c0       	rjmp	.+182    	; 0x27b2 <check+0x144>
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	90 91 ff 06 	lds	r25, 0x06FF
    2702:	91 34       	cpi	r25, 0x41	; 65
    2704:	09 f0       	breq	.+2      	; 0x2708 <check+0x9a>
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	88 23       	and	r24, r24
    270a:	09 f4       	brne	.+2      	; 0x270e <check+0xa0>
    270c:	52 c0       	rjmp	.+164    	; 0x27b2 <check+0x144>
	{
		// AT + null => size == 3
		if (buffer[2] == 0x00)
    270e:	80 91 01 07 	lds	r24, 0x0701
    2712:	81 11       	cpse	r24, r1
    2714:	05 c0       	rjmp	.+10     	; 0x2720 <check+0xb2>
		{
			send_string("OK\r\n");
    2716:	8c e1       	ldi	r24, 0x1C	; 28
    2718:	94 e0       	ldi	r25, 0x04	; 4
    271a:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
    271e:	47 c0       	rjmp	.+142    	; 0x27ae <check+0x140>
		}
		// AT+SOMETHING or AT+MODE=LAST
		else if (buffer[2] == '+')
    2720:	8b 32       	cpi	r24, 0x2B	; 43
    2722:	09 f0       	breq	.+2      	; 0x2726 <check+0xb8>
    2724:	44 c0       	rjmp	.+136    	; 0x27ae <check+0x140>
		{
			char *full_command;
			char *saveptr;
			
			// PASS mode?
			if ((buffer[3] == 'P') & (buffer[4] == 'A') & (buffer[5] == 'S') & (buffer[6] == 'S'))
    2726:	91 e0       	ldi	r25, 0x01	; 1
    2728:	80 91 03 07 	lds	r24, 0x0703
    272c:	81 34       	cpi	r24, 0x41	; 65
    272e:	09 f0       	breq	.+2      	; 0x2732 <check+0xc4>
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	20 91 02 07 	lds	r18, 0x0702
    2738:	20 35       	cpi	r18, 0x50	; 80
    273a:	09 f0       	breq	.+2      	; 0x273e <check+0xd0>
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	98 23       	and	r25, r24
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	20 91 04 07 	lds	r18, 0x0704
    2746:	23 35       	cpi	r18, 0x53	; 83
    2748:	09 f0       	breq	.+2      	; 0x274c <check+0xde>
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	89 23       	and	r24, r25
    274e:	89 f0       	breq	.+34     	; 0x2772 <check+0x104>
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	90 91 05 07 	lds	r25, 0x0705
    2756:	93 35       	cpi	r25, 0x53	; 83
    2758:	09 f0       	breq	.+2      	; 0x275c <check+0xee>
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	88 23       	and	r24, r24
    275e:	49 f0       	breq	.+18     	; 0x2772 <check+0x104>
			{
				send_line(buffer + 3);
    2760:	82 e0       	ldi	r24, 0x02	; 2
    2762:	97 e0       	ldi	r25, 0x07	; 7
    2764:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <send_line>
				parse_command(buffer + 3);
    2768:	82 e0       	ldi	r24, 0x02	; 2
    276a:	97 e0       	ldi	r25, 0x07	; 7
    276c:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <parse_command>
    2770:	20 c0       	rjmp	.+64     	; 0x27b2 <check+0x144>
			
			// standard mode
			// buffer + 3 => omit "AT+"
			// note: in strtok_r the "\r\n" counts as 1 delimiter
			//full_command = strtok_r(buffer + 3, "+&\r\n", &saveptr);
			full_command = strtok_r(buffer + 3, "+&", &saveptr);
    2772:	ae 01       	movw	r20, r28
    2774:	4f 5a       	subi	r20, 0xAF	; 175
    2776:	5f 4f       	sbci	r21, 0xFF	; 255
    2778:	6b e0       	ldi	r22, 0x0B	; 11
    277a:	75 e0       	ldi	r23, 0x05	; 5
    277c:	82 e0       	ldi	r24, 0x02	; 2
    277e:	97 e0       	ldi	r25, 0x07	; 7
    2780:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <strtok_r>
    2784:	8c 01       	movw	r16, r24
			while (full_command != NULL)
    2786:	00 97       	sbiw	r24, 0x00	; 0
    2788:	91 f0       	breq	.+36     	; 0x27ae <check+0x140>
			{
				send_line(full_command);
    278a:	c8 01       	movw	r24, r16
    278c:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <send_line>
				
				parse_command(full_command);
    2790:	c8 01       	movw	r24, r16
    2792:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <parse_command>
				
				// next command
				//full_command = strtok_r(NULL, "+&\r\n", &saveptr);
				full_command = strtok_r(NULL, "+&", &saveptr);
    2796:	ae 01       	movw	r20, r28
    2798:	4f 5a       	subi	r20, 0xAF	; 175
    279a:	5f 4f       	sbci	r21, 0xFF	; 255
    279c:	6b e0       	ldi	r22, 0x0B	; 11
    279e:	75 e0       	ldi	r23, 0x05	; 5
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <strtok_r>
    27a8:	8c 01       	movw	r16, r24
			// standard mode
			// buffer + 3 => omit "AT+"
			// note: in strtok_r the "\r\n" counts as 1 delimiter
			//full_command = strtok_r(buffer + 3, "+&\r\n", &saveptr);
			full_command = strtok_r(buffer + 3, "+&", &saveptr);
			while (full_command != NULL)
    27aa:	00 97       	sbiw	r24, 0x00	; 0
    27ac:	71 f7       	brne	.-36     	; 0x278a <check+0x11c>
				// next command
				//full_command = strtok_r(NULL, "+&\r\n", &saveptr);
				full_command = strtok_r(NULL, "+&", &saveptr);
			}
		}
		clear_buffer();
    27ae:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <clear_buffer>
	}
}
    27b2:	ce 5a       	subi	r28, 0xAE	; 174
    27b4:	df 4f       	sbci	r29, 0xFF	; 255
    27b6:	0f b6       	in	r0, 0x3f	; 63
    27b8:	f8 94       	cli
    27ba:	de bf       	out	0x3e, r29	; 62
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	cd bf       	out	0x3d, r28	; 61
    27c0:	df 91       	pop	r29
    27c2:	cf 91       	pop	r28
    27c4:	1f 91       	pop	r17
    27c6:	0f 91       	pop	r16
    27c8:	08 95       	ret

000027ca <__vector_18>:

//************************
//* usart

ISR(USART_RX_vect)
{
    27ca:	1f 92       	push	r1
    27cc:	0f 92       	push	r0
    27ce:	0f b6       	in	r0, 0x3f	; 63
    27d0:	0f 92       	push	r0
    27d2:	11 24       	eor	r1, r1
    27d4:	2f 93       	push	r18
    27d6:	3f 93       	push	r19
    27d8:	4f 93       	push	r20
    27da:	5f 93       	push	r21
    27dc:	6f 93       	push	r22
    27de:	7f 93       	push	r23
    27e0:	8f 93       	push	r24
    27e2:	9f 93       	push	r25
    27e4:	af 93       	push	r26
    27e6:	bf 93       	push	r27
    27e8:	cf 93       	push	r28
    27ea:	ef 93       	push	r30
    27ec:	ff 93       	push	r31
	// read the character from the uart
	char tc = UDR0;
    27ee:	c0 91 c6 00 	lds	r28, 0x00C6
	
	if ((tc != '\n') && (tc != '\r')) {
    27f2:	ca 30       	cpi	r28, 0x0A	; 10
    27f4:	d1 f0       	breq	.+52     	; 0x282a <__vector_18+0x60>
    27f6:	cd 30       	cpi	r28, 0x0D	; 13
    27f8:	c1 f0       	breq	.+48     	; 0x282a <__vector_18+0x60>
		// BUFFER_SIZE - 1 => because there has to be a place for null on the end of the string
		if (pos < BUFFER_SIZE - 1) {
    27fa:	80 91 59 05 	lds	r24, 0x0559
    27fe:	90 91 5a 05 	lds	r25, 0x055A
    2802:	8f 37       	cpi	r24, 0x7F	; 127
    2804:	21 e0       	ldi	r18, 0x01	; 1
    2806:	92 07       	cpc	r25, r18
    2808:	50 f4       	brcc	.+20     	; 0x281e <__vector_18+0x54>
			buffer[pos] = tc;
    280a:	fc 01       	movw	r30, r24
    280c:	e1 50       	subi	r30, 0x01	; 1
    280e:	f9 4f       	sbci	r31, 0xF9	; 249
    2810:	c0 83       	st	Z, r28
			pos++;
    2812:	01 96       	adiw	r24, 0x01	; 1
    2814:	90 93 5a 05 	sts	0x055A, r25
    2818:	80 93 59 05 	sts	0x0559, r24
    281c:	06 c0       	rjmp	.+12     	; 0x282a <__vector_18+0x60>
		} else {
			send_string("Error: AT command to long!");
    281e:	8e e0       	ldi	r24, 0x0E	; 14
    2820:	95 e0       	ldi	r25, 0x05	; 5
    2822:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
			send_enter();
    2826:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <send_enter>
	// lf	line feed	\n	0x0a => Unix/Mac
	// \r\n cr + lf => Windows
	*/
	
	// always start with "AT" or ESC
	if ((buffer[0] != 'A') & (buffer[0] != 0x1B)) {
    282a:	20 91 ff 06 	lds	r18, 0x06FF
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	2b 31       	cpi	r18, 0x1B	; 27
    2832:	09 f4       	brne	.+2      	; 0x2836 <__vector_18+0x6c>
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	88 23       	and	r24, r24
    2838:	49 f0       	breq	.+18     	; 0x284c <__vector_18+0x82>
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	21 34       	cpi	r18, 0x41	; 65
    283e:	09 f4       	brne	.+2      	; 0x2842 <__vector_18+0x78>
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	88 23       	and	r24, r24
    2844:	19 f0       	breq	.+6      	; 0x284c <__vector_18+0x82>
		clear_buffer();
    2846:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <clear_buffer>
		
		return;
    284a:	47 c0       	rjmp	.+142    	; 0x28da <__vector_18+0x110>
	}
	
	// if not AT command (but A-something)
	else if ((pos > 1) & (buffer[0] == 'A') & (buffer[1] != 'T'))
    284c:	31 e0       	ldi	r19, 0x01	; 1
    284e:	80 91 59 05 	lds	r24, 0x0559
    2852:	90 91 5a 05 	lds	r25, 0x055A
    2856:	02 97       	sbiw	r24, 0x02	; 2
    2858:	08 f4       	brcc	.+2      	; 0x285c <__vector_18+0x92>
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	90 91 00 07 	lds	r25, 0x0700
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	21 34       	cpi	r18, 0x41	; 65
    2864:	09 f0       	breq	.+2      	; 0x2868 <__vector_18+0x9e>
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	83 23       	and	r24, r19
    286a:	69 f0       	breq	.+26     	; 0x2886 <__vector_18+0xbc>
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	94 35       	cpi	r25, 0x54	; 84
    2870:	09 f4       	brne	.+2      	; 0x2874 <__vector_18+0xaa>
    2872:	80 e0       	ldi	r24, 0x00	; 0
    2874:	88 23       	and	r24, r24
    2876:	39 f0       	breq	.+14     	; 0x2886 <__vector_18+0xbc>
	{
		send_string("?\r\n");
    2878:	87 e3       	ldi	r24, 0x37	; 55
    287a:	94 e0       	ldi	r25, 0x04	; 4
    287c:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
		clear_buffer();
    2880:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <clear_buffer>
		
		return;
    2884:	2a c0       	rjmp	.+84     	; 0x28da <__vector_18+0x110>
	}
	
	// automatic reset before programming by BT and AVRDUDE
	else if ((buffer[0] == 0x1B) & (pos > 1) & (buffer[1] == 'S'))
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	2b 31       	cpi	r18, 0x1B	; 27
    288a:	09 f0       	breq	.+2      	; 0x288e <__vector_18+0xc4>
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	38 23       	and	r19, r24
    2890:	61 f0       	breq	.+24     	; 0x28aa <__vector_18+0xe0>
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	93 35       	cpi	r25, 0x53	; 83
    2896:	09 f0       	breq	.+2      	; 0x289a <__vector_18+0xd0>
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	88 23       	and	r24, r24
    289c:	31 f0       	breq	.+12     	; 0x28aa <__vector_18+0xe0>
	{
		// send '?' to force AVRDUDE repeat start sequence
		send_char('?');
    289e:	8f e3       	ldi	r24, 0x3F	; 63
    28a0:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <send_char>
		
		// reset
		reset();
    28a4:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <reset>
    28a8:	0b c0       	rjmp	.+22     	; 0x28c0 <__vector_18+0xf6>
		
		Simply: '?' char is needed after receiving ESC, S. But it cannot be send after reset, so we are sending '?' before reset.
		*/
	}
	// wrong reset command
	else if ((buffer[0] == 0x1B) & (pos > 1) & (buffer[1] != 'S'))
    28aa:	33 23       	and	r19, r19
    28ac:	49 f0       	breq	.+18     	; 0x28c0 <__vector_18+0xf6>
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	93 35       	cpi	r25, 0x53	; 83
    28b2:	09 f4       	brne	.+2      	; 0x28b6 <__vector_18+0xec>
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	88 23       	and	r24, r24
    28b8:	19 f0       	breq	.+6      	; 0x28c0 <__vector_18+0xf6>
	{
		clear_buffer();
    28ba:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <clear_buffer>
		return;
    28be:	0d c0       	rjmp	.+26     	; 0x28da <__vector_18+0x110>
	}
	
	// enter ends the line
	if (tc == '\n' || tc == '\r') {
    28c0:	ca 30       	cpi	r28, 0x0A	; 10
    28c2:	11 f0       	breq	.+4      	; 0x28c8 <__vector_18+0xfe>
    28c4:	cd 30       	cpi	r28, 0x0D	; 13
    28c6:	49 f4       	brne	.+18     	; 0x28da <__vector_18+0x110>
	//if (buffer[pos - 1] == '\n') {
	//if (buffer[pos - 2] == '\r' && buffer[pos - 1] == '\n') {
		buffer[pos] = 0x00; // null terminated string
    28c8:	e0 91 59 05 	lds	r30, 0x0559
    28cc:	f0 91 5a 05 	lds	r31, 0x055A
    28d0:	e1 50       	subi	r30, 0x01	; 1
    28d2:	f9 4f       	sbci	r31, 0xF9	; 249
    28d4:	10 82       	st	Z, r1
		
		check();
    28d6:	0e 94 37 13 	call	0x266e	; 0x266e <check>
	}
}
    28da:	ff 91       	pop	r31
    28dc:	ef 91       	pop	r30
    28de:	cf 91       	pop	r28
    28e0:	bf 91       	pop	r27
    28e2:	af 91       	pop	r26
    28e4:	9f 91       	pop	r25
    28e6:	8f 91       	pop	r24
    28e8:	7f 91       	pop	r23
    28ea:	6f 91       	pop	r22
    28ec:	5f 91       	pop	r21
    28ee:	4f 91       	pop	r20
    28f0:	3f 91       	pop	r19
    28f2:	2f 91       	pop	r18
    28f4:	0f 90       	pop	r0
    28f6:	0f be       	out	0x3f, r0	; 63
    28f8:	0f 90       	pop	r0
    28fa:	1f 90       	pop	r1
    28fc:	18 95       	reti

000028fe <USART_Init>:

void USART_Init()
{
	// disable power reduction for USART
	PRR &=~ (1 << PRUSART0);
    28fe:	e4 e6       	ldi	r30, 0x64	; 100
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	80 81       	ld	r24, Z
    2904:	8d 7f       	andi	r24, 0xFD	; 253
    2906:	80 83       	st	Z, r24

	// enable interrupts for usart
	UCSR0B |= (1 << RXCIE0);
    2908:	e1 ec       	ldi	r30, 0xC1	; 193
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	80 81       	ld	r24, Z
    290e:	80 68       	ori	r24, 0x80	; 128
    2910:	80 83       	st	Z, r24
	
	// usart configuration
	//UBRR0H = (unsigned char)(MYUBRR>>8);
	//UBRR0L = (unsigned char) MYUBRR;
	// 9600 for 1MHz: 12 => taken from a table from datasheet for ATmega328P
	UBRR0H = (unsigned char)(12>>8);
    2912:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char) 12;
    2916:	8c e0       	ldi	r24, 0x0C	; 12
    2918:	80 93 c4 00 	sts	0x00C4, r24
	// 9600 and double speed for 8MHz: 103
	//UBRR0H = (unsigned char)(103>>8);
	//UBRR0L = (unsigned char) 103;
	
	// set double speed
	UCSR0A |= (1 << U2X0);
    291c:	a0 ec       	ldi	r26, 0xC0	; 192
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	8c 91       	ld	r24, X
    2922:	82 60       	ori	r24, 0x02	; 2
    2924:	8c 93       	st	X, r24
	
	// set frame format: 8 data, 1 stop bit (default)
	UCSR0C |= (3<<UCSZ00);
    2926:	a2 ec       	ldi	r26, 0xC2	; 194
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	8c 91       	ld	r24, X
    292c:	86 60       	ori	r24, 0x06	; 6
    292e:	8c 93       	st	X, r24
	
	// enable receiver
	UCSR0B |= (1<<RXEN0);
    2930:	80 81       	ld	r24, Z
    2932:	80 61       	ori	r24, 0x10	; 16
    2934:	80 83       	st	Z, r24
	
	// enable transmitter
	UCSR0B |= (1<<TXEN0);
    2936:	80 81       	ld	r24, Z
    2938:	88 60       	ori	r24, 0x08	; 8
    293a:	80 83       	st	Z, r24
    293c:	08 95       	ret

0000293e <initialize_app>:
cpu frequency is defined in menu: Project/...properties/Toolchain/AVR/GNU C compiler/Symbols/F_CPU=1000000UL
cpu freqency is set by fuse bits not by definition by F_CPU; F_CPU is needed by delay.h; ckdiv8 is also set
*/

void initialize_app()
{
    293e:	cf 93       	push	r28
    2940:	df 93       	push	r29
    2942:	cd b7       	in	r28, 0x3d	; 61
    2944:	de b7       	in	r29, 0x3e	; 62
    2946:	27 97       	sbiw	r28, 0x07	; 7
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	f8 94       	cli
    294c:	de bf       	out	0x3e, r29	; 62
    294e:	0f be       	out	0x3f, r0	; 63
    2950:	cd bf       	out	0x3d, r28	; 61
	// init i2c
	twi_init();
    2952:	0e 94 f9 07 	call	0xff2	; 0xff2 <twi_init>
	
	// disable BT reset (it is connected to PC1 pin ATMega328P)
	// set pin as output
	DDRC |= (1 << DDC1);
    2956:	39 9a       	sbi	0x07, 1	; 7
	
	// set high state
	PORTC |= (1 << DDC1);
    2958:	41 9a       	sbi	0x08, 1	; 8
	
	
	// pin34 - for disabling AT mode for BT
	// it is connected to PC0
	// set pin as output
	DDRC |= (1 << DDC0);
    295a:	38 9a       	sbi	0x07, 0	; 7
	
	// set low state
	PORTC &=~ (1 << DDC0);
    295c:	40 98       	cbi	0x08, 0	; 8
	
	// set params for usart
	// 9600N81 - 9600, no parity, 8 data bits, 1 stop bit
	USART_Init();
    295e:	0e 94 7f 14 	call	0x28fe	; 0x28fe <USART_Init>
	
	// set as output
	DDRD |= (1 << DDD5);
    2962:	55 9a       	sbi	0x0a, 5	; 10

	char String[] = "start ";
    2964:	87 e0       	ldi	r24, 0x07	; 7
    2966:	eb e3       	ldi	r30, 0x3B	; 59
    2968:	f2 e0       	ldi	r31, 0x02	; 2
    296a:	de 01       	movw	r26, r28
    296c:	11 96       	adiw	r26, 0x01	; 1
    296e:	01 90       	ld	r0, Z+
    2970:	0d 92       	st	X+, r0
    2972:	8a 95       	dec	r24
    2974:	e1 f7       	brne	.-8      	; 0x296e <initialize_app+0x30>
	send_string(String);
    2976:	ce 01       	movw	r24, r28
    2978:	01 96       	adiw	r24, 0x01	; 1
    297a:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	send_string("\r\n");
    297e:	83 e5       	ldi	r24, 0x53	; 83
    2980:	95 e0       	ldi	r25, 0x05	; 5
    2982:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	
	setup_pwm();
    2986:	0e 94 bb 07 	call	0xf76	; 0xf76 <setup_pwm>
	
	// enable interrupts
	SREG |= (1 << 7);
    298a:	8f b7       	in	r24, 0x3f	; 63
    298c:	80 68       	ori	r24, 0x80	; 128
    298e:	8f bf       	out	0x3f, r24	; 63
}
    2990:	27 96       	adiw	r28, 0x07	; 7
    2992:	0f b6       	in	r0, 0x3f	; 63
    2994:	f8 94       	cli
    2996:	de bf       	out	0x3e, r29	; 62
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	cd bf       	out	0x3d, r28	; 61
    299c:	df 91       	pop	r29
    299e:	cf 91       	pop	r28
    29a0:	08 95       	ret

000029a2 <reset>:
Resets device
*/
void reset()
{
	// set up watchdog timer
	wdt_enable(WDTO_250MS);
    29a2:	2c e0       	ldi	r18, 0x0C	; 12
    29a4:	88 e1       	ldi	r24, 0x18	; 24
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	0f b6       	in	r0, 0x3f	; 63
    29aa:	f8 94       	cli
    29ac:	a8 95       	wdr
    29ae:	80 93 60 00 	sts	0x0060, r24
    29b2:	0f be       	out	0x3f, r0	; 63
    29b4:	20 93 60 00 	sts	0x0060, r18
    29b8:	08 95       	ret

000029ba <main>:
}

int main(void)
{
	// disable watchdog timer
	MCUSR = 0;
    29ba:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    29bc:	88 e1       	ldi	r24, 0x18	; 24
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	f8 94       	cli
    29c2:	80 93 60 00 	sts	0x0060, r24
    29c6:	10 92 60 00 	sts	0x0060, r1
    29ca:	0f be       	out	0x3f, r0	; 63
	
	initialize_app();
    29cc:	0e 94 9f 14 	call	0x293e	; 0x293e <initialize_app>
	
	// check VL bit in PCF8563
	if (get_vl())
    29d0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <get_vl>
    29d4:	89 2b       	or	r24, r25
    29d6:	21 f0       	breq	.+8      	; 0x29e0 <main+0x26>
	send_string("Replace backup battery and clear VL bit!!!\r\n");
    29d8:	89 e2       	ldi	r24, 0x29	; 41
    29da:	95 e0       	ldi	r25, 0x05	; 5
    29dc:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_string>
	
	load_events();
    29e0:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <load_events>
    29e4:	2f e3       	ldi	r18, 0x3F	; 63
    29e6:	82 e4       	ldi	r24, 0x42	; 66
    29e8:	9f e0       	ldi	r25, 0x0F	; 15
    29ea:	21 50       	subi	r18, 0x01	; 1
    29ec:	80 40       	sbci	r24, 0x00	; 0
    29ee:	90 40       	sbci	r25, 0x00	; 0
    29f0:	e1 f7       	brne	.-8      	; 0x29ea <main+0x30>
    29f2:	00 c0       	rjmp	.+0      	; 0x29f4 <main+0x3a>
    29f4:	00 00       	nop
	
	while(1)
	{
		// additional timer event
		_delay_ms(5000);
		timer_event();
    29f6:	0e 94 b4 07 	call	0xf68	; 0xf68 <timer_event>
    29fa:	f4 cf       	rjmp	.-24     	; 0x29e4 <main+0x2a>

000029fc <__divmodhi4>:
    29fc:	97 fb       	bst	r25, 7
    29fe:	07 2e       	mov	r0, r23
    2a00:	16 f4       	brtc	.+4      	; 0x2a06 <__divmodhi4+0xa>
    2a02:	00 94       	com	r0
    2a04:	07 d0       	rcall	.+14     	; 0x2a14 <__divmodhi4_neg1>
    2a06:	77 fd       	sbrc	r23, 7
    2a08:	09 d0       	rcall	.+18     	; 0x2a1c <__divmodhi4_neg2>
    2a0a:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__udivmodhi4>
    2a0e:	07 fc       	sbrc	r0, 7
    2a10:	05 d0       	rcall	.+10     	; 0x2a1c <__divmodhi4_neg2>
    2a12:	3e f4       	brtc	.+14     	; 0x2a22 <__divmodhi4_exit>

00002a14 <__divmodhi4_neg1>:
    2a14:	90 95       	com	r25
    2a16:	81 95       	neg	r24
    2a18:	9f 4f       	sbci	r25, 0xFF	; 255
    2a1a:	08 95       	ret

00002a1c <__divmodhi4_neg2>:
    2a1c:	70 95       	com	r23
    2a1e:	61 95       	neg	r22
    2a20:	7f 4f       	sbci	r23, 0xFF	; 255

00002a22 <__divmodhi4_exit>:
    2a22:	08 95       	ret

00002a24 <__divmodsi4>:
    2a24:	05 2e       	mov	r0, r21
    2a26:	97 fb       	bst	r25, 7
    2a28:	16 f4       	brtc	.+4      	; 0x2a2e <__divmodsi4+0xa>
    2a2a:	00 94       	com	r0
    2a2c:	07 d0       	rcall	.+14     	; 0x2a3c <__divmodsi4_neg1>
    2a2e:	57 fd       	sbrc	r21, 7
    2a30:	0d d0       	rcall	.+26     	; 0x2a4c <__divmodsi4_neg2>
    2a32:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__udivmodsi4>
    2a36:	07 fc       	sbrc	r0, 7
    2a38:	09 d0       	rcall	.+18     	; 0x2a4c <__divmodsi4_neg2>
    2a3a:	7e f4       	brtc	.+30     	; 0x2a5a <__divmodsi4_exit>

00002a3c <__divmodsi4_neg1>:
    2a3c:	90 95       	com	r25
    2a3e:	80 95       	com	r24
    2a40:	70 95       	com	r23
    2a42:	61 95       	neg	r22
    2a44:	7f 4f       	sbci	r23, 0xFF	; 255
    2a46:	8f 4f       	sbci	r24, 0xFF	; 255
    2a48:	9f 4f       	sbci	r25, 0xFF	; 255
    2a4a:	08 95       	ret

00002a4c <__divmodsi4_neg2>:
    2a4c:	50 95       	com	r21
    2a4e:	40 95       	com	r20
    2a50:	30 95       	com	r19
    2a52:	21 95       	neg	r18
    2a54:	3f 4f       	sbci	r19, 0xFF	; 255
    2a56:	4f 4f       	sbci	r20, 0xFF	; 255
    2a58:	5f 4f       	sbci	r21, 0xFF	; 255

00002a5a <__divmodsi4_exit>:
    2a5a:	08 95       	ret

00002a5c <__umulhisi3>:
    2a5c:	a2 9f       	mul	r26, r18
    2a5e:	b0 01       	movw	r22, r0
    2a60:	b3 9f       	mul	r27, r19
    2a62:	c0 01       	movw	r24, r0
    2a64:	a3 9f       	mul	r26, r19
    2a66:	01 d0       	rcall	.+2      	; 0x2a6a <__umulhisi3+0xe>
    2a68:	b2 9f       	mul	r27, r18
    2a6a:	70 0d       	add	r23, r0
    2a6c:	81 1d       	adc	r24, r1
    2a6e:	11 24       	eor	r1, r1
    2a70:	91 1d       	adc	r25, r1
    2a72:	08 95       	ret

00002a74 <__usmulhisi3>:
    2a74:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <__umulhisi3>

00002a78 <__usmulhisi3_tail>:
    2a78:	b7 ff       	sbrs	r27, 7
    2a7a:	08 95       	ret
    2a7c:	82 1b       	sub	r24, r18
    2a7e:	93 0b       	sbc	r25, r19
    2a80:	08 95       	ret

00002a82 <__mulshisi3>:
    2a82:	b7 ff       	sbrs	r27, 7
    2a84:	0c 94 7f 15 	jmp	0x2afe	; 0x2afe <__muluhisi3>

00002a88 <__mulohisi3>:
    2a88:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__muluhisi3>
    2a8c:	82 1b       	sub	r24, r18
    2a8e:	93 0b       	sbc	r25, r19
    2a90:	08 95       	ret

00002a92 <__udivmodhi4>:
    2a92:	aa 1b       	sub	r26, r26
    2a94:	bb 1b       	sub	r27, r27
    2a96:	51 e1       	ldi	r21, 0x11	; 17
    2a98:	07 c0       	rjmp	.+14     	; 0x2aa8 <__udivmodhi4_ep>

00002a9a <__udivmodhi4_loop>:
    2a9a:	aa 1f       	adc	r26, r26
    2a9c:	bb 1f       	adc	r27, r27
    2a9e:	a6 17       	cp	r26, r22
    2aa0:	b7 07       	cpc	r27, r23
    2aa2:	10 f0       	brcs	.+4      	; 0x2aa8 <__udivmodhi4_ep>
    2aa4:	a6 1b       	sub	r26, r22
    2aa6:	b7 0b       	sbc	r27, r23

00002aa8 <__udivmodhi4_ep>:
    2aa8:	88 1f       	adc	r24, r24
    2aaa:	99 1f       	adc	r25, r25
    2aac:	5a 95       	dec	r21
    2aae:	a9 f7       	brne	.-22     	; 0x2a9a <__udivmodhi4_loop>
    2ab0:	80 95       	com	r24
    2ab2:	90 95       	com	r25
    2ab4:	bc 01       	movw	r22, r24
    2ab6:	cd 01       	movw	r24, r26
    2ab8:	08 95       	ret

00002aba <__udivmodsi4>:
    2aba:	a1 e2       	ldi	r26, 0x21	; 33
    2abc:	1a 2e       	mov	r1, r26
    2abe:	aa 1b       	sub	r26, r26
    2ac0:	bb 1b       	sub	r27, r27
    2ac2:	fd 01       	movw	r30, r26
    2ac4:	0d c0       	rjmp	.+26     	; 0x2ae0 <__udivmodsi4_ep>

00002ac6 <__udivmodsi4_loop>:
    2ac6:	aa 1f       	adc	r26, r26
    2ac8:	bb 1f       	adc	r27, r27
    2aca:	ee 1f       	adc	r30, r30
    2acc:	ff 1f       	adc	r31, r31
    2ace:	a2 17       	cp	r26, r18
    2ad0:	b3 07       	cpc	r27, r19
    2ad2:	e4 07       	cpc	r30, r20
    2ad4:	f5 07       	cpc	r31, r21
    2ad6:	20 f0       	brcs	.+8      	; 0x2ae0 <__udivmodsi4_ep>
    2ad8:	a2 1b       	sub	r26, r18
    2ada:	b3 0b       	sbc	r27, r19
    2adc:	e4 0b       	sbc	r30, r20
    2ade:	f5 0b       	sbc	r31, r21

00002ae0 <__udivmodsi4_ep>:
    2ae0:	66 1f       	adc	r22, r22
    2ae2:	77 1f       	adc	r23, r23
    2ae4:	88 1f       	adc	r24, r24
    2ae6:	99 1f       	adc	r25, r25
    2ae8:	1a 94       	dec	r1
    2aea:	69 f7       	brne	.-38     	; 0x2ac6 <__udivmodsi4_loop>
    2aec:	60 95       	com	r22
    2aee:	70 95       	com	r23
    2af0:	80 95       	com	r24
    2af2:	90 95       	com	r25
    2af4:	9b 01       	movw	r18, r22
    2af6:	ac 01       	movw	r20, r24
    2af8:	bd 01       	movw	r22, r26
    2afa:	cf 01       	movw	r24, r30
    2afc:	08 95       	ret

00002afe <__muluhisi3>:
    2afe:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <__umulhisi3>
    2b02:	a5 9f       	mul	r26, r21
    2b04:	90 0d       	add	r25, r0
    2b06:	b4 9f       	mul	r27, r20
    2b08:	90 0d       	add	r25, r0
    2b0a:	a4 9f       	mul	r26, r20
    2b0c:	80 0d       	add	r24, r0
    2b0e:	91 1d       	adc	r25, r1
    2b10:	11 24       	eor	r1, r1
    2b12:	08 95       	ret

00002b14 <do_rand>:
    2b14:	8f 92       	push	r8
    2b16:	9f 92       	push	r9
    2b18:	af 92       	push	r10
    2b1a:	bf 92       	push	r11
    2b1c:	cf 92       	push	r12
    2b1e:	df 92       	push	r13
    2b20:	ef 92       	push	r14
    2b22:	ff 92       	push	r15
    2b24:	cf 93       	push	r28
    2b26:	df 93       	push	r29
    2b28:	ec 01       	movw	r28, r24
    2b2a:	68 81       	ld	r22, Y
    2b2c:	79 81       	ldd	r23, Y+1	; 0x01
    2b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b30:	9b 81       	ldd	r25, Y+3	; 0x03
    2b32:	61 15       	cp	r22, r1
    2b34:	71 05       	cpc	r23, r1
    2b36:	81 05       	cpc	r24, r1
    2b38:	91 05       	cpc	r25, r1
    2b3a:	21 f4       	brne	.+8      	; 0x2b44 <do_rand+0x30>
    2b3c:	64 e2       	ldi	r22, 0x24	; 36
    2b3e:	79 ed       	ldi	r23, 0xD9	; 217
    2b40:	8b e5       	ldi	r24, 0x5B	; 91
    2b42:	97 e0       	ldi	r25, 0x07	; 7
    2b44:	2d e1       	ldi	r18, 0x1D	; 29
    2b46:	33 ef       	ldi	r19, 0xF3	; 243
    2b48:	41 e0       	ldi	r20, 0x01	; 1
    2b4a:	50 e0       	ldi	r21, 0x00	; 0
    2b4c:	0e 94 12 15 	call	0x2a24	; 0x2a24 <__divmodsi4>
    2b50:	49 01       	movw	r8, r18
    2b52:	5a 01       	movw	r10, r20
    2b54:	9b 01       	movw	r18, r22
    2b56:	ac 01       	movw	r20, r24
    2b58:	a7 ea       	ldi	r26, 0xA7	; 167
    2b5a:	b1 e4       	ldi	r27, 0x41	; 65
    2b5c:	0e 94 7f 15 	call	0x2afe	; 0x2afe <__muluhisi3>
    2b60:	6b 01       	movw	r12, r22
    2b62:	7c 01       	movw	r14, r24
    2b64:	ac ee       	ldi	r26, 0xEC	; 236
    2b66:	b4 ef       	ldi	r27, 0xF4	; 244
    2b68:	a5 01       	movw	r20, r10
    2b6a:	94 01       	movw	r18, r8
    2b6c:	0e 94 44 15 	call	0x2a88	; 0x2a88 <__mulohisi3>
    2b70:	c6 0e       	add	r12, r22
    2b72:	d7 1e       	adc	r13, r23
    2b74:	e8 1e       	adc	r14, r24
    2b76:	f9 1e       	adc	r15, r25
    2b78:	f7 fe       	sbrs	r15, 7
    2b7a:	06 c0       	rjmp	.+12     	; 0x2b88 <do_rand+0x74>
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	c8 1a       	sub	r12, r24
    2b80:	d1 08       	sbc	r13, r1
    2b82:	e1 08       	sbc	r14, r1
    2b84:	80 e8       	ldi	r24, 0x80	; 128
    2b86:	f8 0a       	sbc	r15, r24
    2b88:	c8 82       	st	Y, r12
    2b8a:	d9 82       	std	Y+1, r13	; 0x01
    2b8c:	ea 82       	std	Y+2, r14	; 0x02
    2b8e:	fb 82       	std	Y+3, r15	; 0x03
    2b90:	e8 94       	clt
    2b92:	d7 f8       	bld	r13, 7
    2b94:	ee 24       	eor	r14, r14
    2b96:	ff 24       	eor	r15, r15
    2b98:	c6 01       	movw	r24, r12
    2b9a:	df 91       	pop	r29
    2b9c:	cf 91       	pop	r28
    2b9e:	ff 90       	pop	r15
    2ba0:	ef 90       	pop	r14
    2ba2:	df 90       	pop	r13
    2ba4:	cf 90       	pop	r12
    2ba6:	bf 90       	pop	r11
    2ba8:	af 90       	pop	r10
    2baa:	9f 90       	pop	r9
    2bac:	8f 90       	pop	r8
    2bae:	08 95       	ret

00002bb0 <rand_r>:
    2bb0:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <do_rand>
    2bb4:	08 95       	ret

00002bb6 <rand>:
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	91 e0       	ldi	r25, 0x01	; 1
    2bba:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <do_rand>
    2bbe:	08 95       	ret

00002bc0 <srand>:
    2bc0:	a0 e0       	ldi	r26, 0x00	; 0
    2bc2:	b0 e0       	ldi	r27, 0x00	; 0
    2bc4:	80 93 00 01 	sts	0x0100, r24
    2bc8:	90 93 01 01 	sts	0x0101, r25
    2bcc:	a0 93 02 01 	sts	0x0102, r26
    2bd0:	b0 93 03 01 	sts	0x0103, r27
    2bd4:	08 95       	ret

00002bd6 <strchr>:
    2bd6:	fc 01       	movw	r30, r24
    2bd8:	81 91       	ld	r24, Z+
    2bda:	86 17       	cp	r24, r22
    2bdc:	21 f0       	breq	.+8      	; 0x2be6 <strchr+0x10>
    2bde:	88 23       	and	r24, r24
    2be0:	d9 f7       	brne	.-10     	; 0x2bd8 <strchr+0x2>
    2be2:	99 27       	eor	r25, r25
    2be4:	08 95       	ret
    2be6:	31 97       	sbiw	r30, 0x01	; 1
    2be8:	cf 01       	movw	r24, r30
    2bea:	08 95       	ret

00002bec <strcmp>:
    2bec:	fb 01       	movw	r30, r22
    2bee:	dc 01       	movw	r26, r24
    2bf0:	8d 91       	ld	r24, X+
    2bf2:	01 90       	ld	r0, Z+
    2bf4:	80 19       	sub	r24, r0
    2bf6:	01 10       	cpse	r0, r1
    2bf8:	d9 f3       	breq	.-10     	; 0x2bf0 <strcmp+0x4>
    2bfa:	99 0b       	sbc	r25, r25
    2bfc:	08 95       	ret

00002bfe <strncpy>:
    2bfe:	fb 01       	movw	r30, r22
    2c00:	dc 01       	movw	r26, r24
    2c02:	41 50       	subi	r20, 0x01	; 1
    2c04:	50 40       	sbci	r21, 0x00	; 0
    2c06:	48 f0       	brcs	.+18     	; 0x2c1a <strncpy+0x1c>
    2c08:	01 90       	ld	r0, Z+
    2c0a:	0d 92       	st	X+, r0
    2c0c:	00 20       	and	r0, r0
    2c0e:	c9 f7       	brne	.-14     	; 0x2c02 <strncpy+0x4>
    2c10:	01 c0       	rjmp	.+2      	; 0x2c14 <strncpy+0x16>
    2c12:	1d 92       	st	X+, r1
    2c14:	41 50       	subi	r20, 0x01	; 1
    2c16:	50 40       	sbci	r21, 0x00	; 0
    2c18:	e0 f7       	brcc	.-8      	; 0x2c12 <strncpy+0x14>
    2c1a:	08 95       	ret

00002c1c <strtok_r>:
    2c1c:	fa 01       	movw	r30, r20
    2c1e:	a1 91       	ld	r26, Z+
    2c20:	b0 81       	ld	r27, Z
    2c22:	00 97       	sbiw	r24, 0x00	; 0
    2c24:	19 f4       	brne	.+6      	; 0x2c2c <strtok_r+0x10>
    2c26:	10 97       	sbiw	r26, 0x00	; 0
    2c28:	e1 f0       	breq	.+56     	; 0x2c62 <strtok_r+0x46>
    2c2a:	cd 01       	movw	r24, r26
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cd 01       	movw	r24, r26
    2c30:	0d 90       	ld	r0, X+
    2c32:	00 20       	and	r0, r0
    2c34:	11 f4       	brne	.+4      	; 0x2c3a <strtok_r+0x1e>
    2c36:	c0 01       	movw	r24, r0
    2c38:	13 c0       	rjmp	.+38     	; 0x2c60 <strtok_r+0x44>
    2c3a:	fb 01       	movw	r30, r22
    2c3c:	21 91       	ld	r18, Z+
    2c3e:	22 23       	and	r18, r18
    2c40:	19 f0       	breq	.+6      	; 0x2c48 <strtok_r+0x2c>
    2c42:	20 15       	cp	r18, r0
    2c44:	d9 f7       	brne	.-10     	; 0x2c3c <strtok_r+0x20>
    2c46:	f3 cf       	rjmp	.-26     	; 0x2c2e <strtok_r+0x12>
    2c48:	fb 01       	movw	r30, r22
    2c4a:	21 91       	ld	r18, Z+
    2c4c:	20 15       	cp	r18, r0
    2c4e:	19 f4       	brne	.+6      	; 0x2c56 <strtok_r+0x3a>
    2c50:	1e 92       	st	-X, r1
    2c52:	11 96       	adiw	r26, 0x01	; 1
    2c54:	06 c0       	rjmp	.+12     	; 0x2c62 <strtok_r+0x46>
    2c56:	22 23       	and	r18, r18
    2c58:	c1 f7       	brne	.-16     	; 0x2c4a <strtok_r+0x2e>
    2c5a:	0d 90       	ld	r0, X+
    2c5c:	00 20       	and	r0, r0
    2c5e:	a1 f7       	brne	.-24     	; 0x2c48 <strtok_r+0x2c>
    2c60:	d0 01       	movw	r26, r0
    2c62:	fa 01       	movw	r30, r20
    2c64:	a1 93       	st	Z+, r26
    2c66:	b0 83       	st	Z, r27
    2c68:	08 95       	ret

00002c6a <sprintf>:
    2c6a:	ae e0       	ldi	r26, 0x0E	; 14
    2c6c:	b0 e0       	ldi	r27, 0x00	; 0
    2c6e:	eb e3       	ldi	r30, 0x3B	; 59
    2c70:	f6 e1       	ldi	r31, 0x16	; 22
    2c72:	0c 94 77 1c 	jmp	0x38ee	; 0x38ee <__prologue_saves__+0x1c>
    2c76:	0d 89       	ldd	r16, Y+21	; 0x15
    2c78:	1e 89       	ldd	r17, Y+22	; 0x16
    2c7a:	86 e0       	ldi	r24, 0x06	; 6
    2c7c:	8c 83       	std	Y+4, r24	; 0x04
    2c7e:	1a 83       	std	Y+2, r17	; 0x02
    2c80:	09 83       	std	Y+1, r16	; 0x01
    2c82:	8f ef       	ldi	r24, 0xFF	; 255
    2c84:	9f e7       	ldi	r25, 0x7F	; 127
    2c86:	9e 83       	std	Y+6, r25	; 0x06
    2c88:	8d 83       	std	Y+5, r24	; 0x05
    2c8a:	ce 01       	movw	r24, r28
    2c8c:	49 96       	adiw	r24, 0x19	; 25
    2c8e:	ac 01       	movw	r20, r24
    2c90:	6f 89       	ldd	r22, Y+23	; 0x17
    2c92:	78 8d       	ldd	r23, Y+24	; 0x18
    2c94:	ce 01       	movw	r24, r28
    2c96:	01 96       	adiw	r24, 0x01	; 1
    2c98:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <vfprintf>
    2c9c:	ef 81       	ldd	r30, Y+7	; 0x07
    2c9e:	f8 85       	ldd	r31, Y+8	; 0x08
    2ca0:	e0 0f       	add	r30, r16
    2ca2:	f1 1f       	adc	r31, r17
    2ca4:	10 82       	st	Z, r1
    2ca6:	2e 96       	adiw	r28, 0x0e	; 14
    2ca8:	e4 e0       	ldi	r30, 0x04	; 4
    2caa:	0c 94 93 1c 	jmp	0x3926	; 0x3926 <__epilogue_restores__+0x1c>

00002cae <sscanf>:
    2cae:	ae e0       	ldi	r26, 0x0E	; 14
    2cb0:	b0 e0       	ldi	r27, 0x00	; 0
    2cb2:	ed e5       	ldi	r30, 0x5D	; 93
    2cb4:	f6 e1       	ldi	r31, 0x16	; 22
    2cb6:	0c 94 79 1c 	jmp	0x38f2	; 0x38f2 <__prologue_saves__+0x20>
    2cba:	85 e0       	ldi	r24, 0x05	; 5
    2cbc:	8c 83       	std	Y+4, r24	; 0x04
    2cbe:	8b 89       	ldd	r24, Y+19	; 0x13
    2cc0:	9c 89       	ldd	r25, Y+20	; 0x14
    2cc2:	9a 83       	std	Y+2, r25	; 0x02
    2cc4:	89 83       	std	Y+1, r24	; 0x01
    2cc6:	ce 01       	movw	r24, r28
    2cc8:	47 96       	adiw	r24, 0x17	; 23
    2cca:	ac 01       	movw	r20, r24
    2ccc:	6d 89       	ldd	r22, Y+21	; 0x15
    2cce:	7e 89       	ldd	r23, Y+22	; 0x16
    2cd0:	ce 01       	movw	r24, r28
    2cd2:	01 96       	adiw	r24, 0x01	; 1
    2cd4:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <vfscanf>
    2cd8:	2e 96       	adiw	r28, 0x0e	; 14
    2cda:	e2 e0       	ldi	r30, 0x02	; 2
    2cdc:	0c 94 95 1c 	jmp	0x392a	; 0x392a <__epilogue_restores__+0x20>

00002ce0 <vfprintf>:
    2ce0:	ac e0       	ldi	r26, 0x0C	; 12
    2ce2:	b0 e0       	ldi	r27, 0x00	; 0
    2ce4:	e6 e7       	ldi	r30, 0x76	; 118
    2ce6:	f6 e1       	ldi	r31, 0x16	; 22
    2ce8:	0c 94 69 1c 	jmp	0x38d2	; 0x38d2 <__prologue_saves__>
    2cec:	7c 01       	movw	r14, r24
    2cee:	6b 01       	movw	r12, r22
    2cf0:	8a 01       	movw	r16, r20
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	17 82       	std	Z+7, r1	; 0x07
    2cf6:	16 82       	std	Z+6, r1	; 0x06
    2cf8:	83 81       	ldd	r24, Z+3	; 0x03
    2cfa:	81 ff       	sbrs	r24, 1
    2cfc:	c6 c1       	rjmp	.+908    	; 0x308a <vfprintf+0x3aa>
    2cfe:	88 24       	eor	r8, r8
    2d00:	83 94       	inc	r8
    2d02:	91 2c       	mov	r9, r1
    2d04:	8c 0e       	add	r8, r28
    2d06:	9d 1e       	adc	r9, r29
    2d08:	f7 01       	movw	r30, r14
    2d0a:	93 81       	ldd	r25, Z+3	; 0x03
    2d0c:	f6 01       	movw	r30, r12
    2d0e:	93 fd       	sbrc	r25, 3
    2d10:	85 91       	lpm	r24, Z+
    2d12:	93 ff       	sbrs	r25, 3
    2d14:	81 91       	ld	r24, Z+
    2d16:	6f 01       	movw	r12, r30
    2d18:	88 23       	and	r24, r24
    2d1a:	09 f4       	brne	.+2      	; 0x2d1e <vfprintf+0x3e>
    2d1c:	b2 c1       	rjmp	.+868    	; 0x3082 <vfprintf+0x3a2>
    2d1e:	85 32       	cpi	r24, 0x25	; 37
    2d20:	39 f4       	brne	.+14     	; 0x2d30 <vfprintf+0x50>
    2d22:	93 fd       	sbrc	r25, 3
    2d24:	85 91       	lpm	r24, Z+
    2d26:	93 ff       	sbrs	r25, 3
    2d28:	81 91       	ld	r24, Z+
    2d2a:	6f 01       	movw	r12, r30
    2d2c:	85 32       	cpi	r24, 0x25	; 37
    2d2e:	29 f4       	brne	.+10     	; 0x2d3a <vfprintf+0x5a>
    2d30:	b7 01       	movw	r22, r14
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	0e 94 c1 1b 	call	0x3782	; 0x3782 <fputc>
    2d38:	e7 cf       	rjmp	.-50     	; 0x2d08 <vfprintf+0x28>
    2d3a:	51 2c       	mov	r5, r1
    2d3c:	31 2c       	mov	r3, r1
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	20 32       	cpi	r18, 0x20	; 32
    2d42:	a8 f4       	brcc	.+42     	; 0x2d6e <vfprintf+0x8e>
    2d44:	8b 32       	cpi	r24, 0x2B	; 43
    2d46:	61 f0       	breq	.+24     	; 0x2d60 <vfprintf+0x80>
    2d48:	28 f4       	brcc	.+10     	; 0x2d54 <vfprintf+0x74>
    2d4a:	80 32       	cpi	r24, 0x20	; 32
    2d4c:	51 f0       	breq	.+20     	; 0x2d62 <vfprintf+0x82>
    2d4e:	83 32       	cpi	r24, 0x23	; 35
    2d50:	71 f4       	brne	.+28     	; 0x2d6e <vfprintf+0x8e>
    2d52:	0b c0       	rjmp	.+22     	; 0x2d6a <vfprintf+0x8a>
    2d54:	8d 32       	cpi	r24, 0x2D	; 45
    2d56:	39 f0       	breq	.+14     	; 0x2d66 <vfprintf+0x86>
    2d58:	80 33       	cpi	r24, 0x30	; 48
    2d5a:	49 f4       	brne	.+18     	; 0x2d6e <vfprintf+0x8e>
    2d5c:	21 60       	ori	r18, 0x01	; 1
    2d5e:	28 c0       	rjmp	.+80     	; 0x2db0 <vfprintf+0xd0>
    2d60:	22 60       	ori	r18, 0x02	; 2
    2d62:	24 60       	ori	r18, 0x04	; 4
    2d64:	25 c0       	rjmp	.+74     	; 0x2db0 <vfprintf+0xd0>
    2d66:	28 60       	ori	r18, 0x08	; 8
    2d68:	23 c0       	rjmp	.+70     	; 0x2db0 <vfprintf+0xd0>
    2d6a:	20 61       	ori	r18, 0x10	; 16
    2d6c:	21 c0       	rjmp	.+66     	; 0x2db0 <vfprintf+0xd0>
    2d6e:	27 fd       	sbrc	r18, 7
    2d70:	27 c0       	rjmp	.+78     	; 0x2dc0 <vfprintf+0xe0>
    2d72:	38 2f       	mov	r19, r24
    2d74:	30 53       	subi	r19, 0x30	; 48
    2d76:	3a 30       	cpi	r19, 0x0A	; 10
    2d78:	78 f4       	brcc	.+30     	; 0x2d98 <vfprintf+0xb8>
    2d7a:	26 ff       	sbrs	r18, 6
    2d7c:	06 c0       	rjmp	.+12     	; 0x2d8a <vfprintf+0xaa>
    2d7e:	fa e0       	ldi	r31, 0x0A	; 10
    2d80:	5f 9e       	mul	r5, r31
    2d82:	30 0d       	add	r19, r0
    2d84:	11 24       	eor	r1, r1
    2d86:	53 2e       	mov	r5, r19
    2d88:	13 c0       	rjmp	.+38     	; 0x2db0 <vfprintf+0xd0>
    2d8a:	8a e0       	ldi	r24, 0x0A	; 10
    2d8c:	38 9e       	mul	r3, r24
    2d8e:	30 0d       	add	r19, r0
    2d90:	11 24       	eor	r1, r1
    2d92:	33 2e       	mov	r3, r19
    2d94:	20 62       	ori	r18, 0x20	; 32
    2d96:	0c c0       	rjmp	.+24     	; 0x2db0 <vfprintf+0xd0>
    2d98:	8e 32       	cpi	r24, 0x2E	; 46
    2d9a:	21 f4       	brne	.+8      	; 0x2da4 <vfprintf+0xc4>
    2d9c:	26 fd       	sbrc	r18, 6
    2d9e:	71 c1       	rjmp	.+738    	; 0x3082 <vfprintf+0x3a2>
    2da0:	20 64       	ori	r18, 0x40	; 64
    2da2:	06 c0       	rjmp	.+12     	; 0x2db0 <vfprintf+0xd0>
    2da4:	8c 36       	cpi	r24, 0x6C	; 108
    2da6:	11 f4       	brne	.+4      	; 0x2dac <vfprintf+0xcc>
    2da8:	20 68       	ori	r18, 0x80	; 128
    2daa:	02 c0       	rjmp	.+4      	; 0x2db0 <vfprintf+0xd0>
    2dac:	88 36       	cpi	r24, 0x68	; 104
    2dae:	41 f4       	brne	.+16     	; 0x2dc0 <vfprintf+0xe0>
    2db0:	f6 01       	movw	r30, r12
    2db2:	93 fd       	sbrc	r25, 3
    2db4:	85 91       	lpm	r24, Z+
    2db6:	93 ff       	sbrs	r25, 3
    2db8:	81 91       	ld	r24, Z+
    2dba:	6f 01       	movw	r12, r30
    2dbc:	81 11       	cpse	r24, r1
    2dbe:	c0 cf       	rjmp	.-128    	; 0x2d40 <vfprintf+0x60>
    2dc0:	98 2f       	mov	r25, r24
    2dc2:	95 54       	subi	r25, 0x45	; 69
    2dc4:	93 30       	cpi	r25, 0x03	; 3
    2dc6:	18 f0       	brcs	.+6      	; 0x2dce <vfprintf+0xee>
    2dc8:	90 52       	subi	r25, 0x20	; 32
    2dca:	93 30       	cpi	r25, 0x03	; 3
    2dcc:	28 f4       	brcc	.+10     	; 0x2dd8 <vfprintf+0xf8>
    2dce:	0c 5f       	subi	r16, 0xFC	; 252
    2dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2dd2:	ff e3       	ldi	r31, 0x3F	; 63
    2dd4:	f9 83       	std	Y+1, r31	; 0x01
    2dd6:	0d c0       	rjmp	.+26     	; 0x2df2 <vfprintf+0x112>
    2dd8:	83 36       	cpi	r24, 0x63	; 99
    2dda:	31 f0       	breq	.+12     	; 0x2de8 <vfprintf+0x108>
    2ddc:	83 37       	cpi	r24, 0x73	; 115
    2dde:	71 f0       	breq	.+28     	; 0x2dfc <vfprintf+0x11c>
    2de0:	83 35       	cpi	r24, 0x53	; 83
    2de2:	09 f0       	breq	.+2      	; 0x2de6 <vfprintf+0x106>
    2de4:	5e c0       	rjmp	.+188    	; 0x2ea2 <vfprintf+0x1c2>
    2de6:	23 c0       	rjmp	.+70     	; 0x2e2e <vfprintf+0x14e>
    2de8:	f8 01       	movw	r30, r16
    2dea:	80 81       	ld	r24, Z
    2dec:	89 83       	std	Y+1, r24	; 0x01
    2dee:	0e 5f       	subi	r16, 0xFE	; 254
    2df0:	1f 4f       	sbci	r17, 0xFF	; 255
    2df2:	44 24       	eor	r4, r4
    2df4:	43 94       	inc	r4
    2df6:	51 2c       	mov	r5, r1
    2df8:	54 01       	movw	r10, r8
    2dfa:	15 c0       	rjmp	.+42     	; 0x2e26 <vfprintf+0x146>
    2dfc:	38 01       	movw	r6, r16
    2dfe:	f2 e0       	ldi	r31, 0x02	; 2
    2e00:	6f 0e       	add	r6, r31
    2e02:	71 1c       	adc	r7, r1
    2e04:	f8 01       	movw	r30, r16
    2e06:	a0 80       	ld	r10, Z
    2e08:	b1 80       	ldd	r11, Z+1	; 0x01
    2e0a:	26 ff       	sbrs	r18, 6
    2e0c:	03 c0       	rjmp	.+6      	; 0x2e14 <vfprintf+0x134>
    2e0e:	65 2d       	mov	r22, r5
    2e10:	70 e0       	ldi	r23, 0x00	; 0
    2e12:	02 c0       	rjmp	.+4      	; 0x2e18 <vfprintf+0x138>
    2e14:	6f ef       	ldi	r22, 0xFF	; 255
    2e16:	7f ef       	ldi	r23, 0xFF	; 255
    2e18:	c5 01       	movw	r24, r10
    2e1a:	2c 87       	std	Y+12, r18	; 0x0c
    2e1c:	0e 94 76 1b 	call	0x36ec	; 0x36ec <strnlen>
    2e20:	2c 01       	movw	r4, r24
    2e22:	83 01       	movw	r16, r6
    2e24:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e26:	6f e7       	ldi	r22, 0x7F	; 127
    2e28:	26 2e       	mov	r2, r22
    2e2a:	22 22       	and	r2, r18
    2e2c:	18 c0       	rjmp	.+48     	; 0x2e5e <vfprintf+0x17e>
    2e2e:	38 01       	movw	r6, r16
    2e30:	f2 e0       	ldi	r31, 0x02	; 2
    2e32:	6f 0e       	add	r6, r31
    2e34:	71 1c       	adc	r7, r1
    2e36:	f8 01       	movw	r30, r16
    2e38:	a0 80       	ld	r10, Z
    2e3a:	b1 80       	ldd	r11, Z+1	; 0x01
    2e3c:	26 ff       	sbrs	r18, 6
    2e3e:	03 c0       	rjmp	.+6      	; 0x2e46 <vfprintf+0x166>
    2e40:	65 2d       	mov	r22, r5
    2e42:	70 e0       	ldi	r23, 0x00	; 0
    2e44:	02 c0       	rjmp	.+4      	; 0x2e4a <vfprintf+0x16a>
    2e46:	6f ef       	ldi	r22, 0xFF	; 255
    2e48:	7f ef       	ldi	r23, 0xFF	; 255
    2e4a:	c5 01       	movw	r24, r10
    2e4c:	2c 87       	std	Y+12, r18	; 0x0c
    2e4e:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <strnlen_P>
    2e52:	2c 01       	movw	r4, r24
    2e54:	2c 85       	ldd	r18, Y+12	; 0x0c
    2e56:	50 e8       	ldi	r21, 0x80	; 128
    2e58:	25 2e       	mov	r2, r21
    2e5a:	22 2a       	or	r2, r18
    2e5c:	83 01       	movw	r16, r6
    2e5e:	23 fc       	sbrc	r2, 3
    2e60:	1c c0       	rjmp	.+56     	; 0x2e9a <vfprintf+0x1ba>
    2e62:	06 c0       	rjmp	.+12     	; 0x2e70 <vfprintf+0x190>
    2e64:	b7 01       	movw	r22, r14
    2e66:	80 e2       	ldi	r24, 0x20	; 32
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	0e 94 c1 1b 	call	0x3782	; 0x3782 <fputc>
    2e6e:	3a 94       	dec	r3
    2e70:	83 2d       	mov	r24, r3
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	48 16       	cp	r4, r24
    2e76:	59 06       	cpc	r5, r25
    2e78:	a8 f3       	brcs	.-22     	; 0x2e64 <vfprintf+0x184>
    2e7a:	0f c0       	rjmp	.+30     	; 0x2e9a <vfprintf+0x1ba>
    2e7c:	f5 01       	movw	r30, r10
    2e7e:	27 fc       	sbrc	r2, 7
    2e80:	85 91       	lpm	r24, Z+
    2e82:	27 fe       	sbrs	r2, 7
    2e84:	81 91       	ld	r24, Z+
    2e86:	5f 01       	movw	r10, r30
    2e88:	b7 01       	movw	r22, r14
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	0e 94 c1 1b 	call	0x3782	; 0x3782 <fputc>
    2e90:	31 10       	cpse	r3, r1
    2e92:	3a 94       	dec	r3
    2e94:	f1 e0       	ldi	r31, 0x01	; 1
    2e96:	4f 1a       	sub	r4, r31
    2e98:	51 08       	sbc	r5, r1
    2e9a:	41 14       	cp	r4, r1
    2e9c:	51 04       	cpc	r5, r1
    2e9e:	71 f7       	brne	.-36     	; 0x2e7c <vfprintf+0x19c>
    2ea0:	ed c0       	rjmp	.+474    	; 0x307c <vfprintf+0x39c>
    2ea2:	84 36       	cpi	r24, 0x64	; 100
    2ea4:	11 f0       	breq	.+4      	; 0x2eaa <vfprintf+0x1ca>
    2ea6:	89 36       	cpi	r24, 0x69	; 105
    2ea8:	41 f5       	brne	.+80     	; 0x2efa <vfprintf+0x21a>
    2eaa:	f8 01       	movw	r30, r16
    2eac:	27 ff       	sbrs	r18, 7
    2eae:	07 c0       	rjmp	.+14     	; 0x2ebe <vfprintf+0x1de>
    2eb0:	60 81       	ld	r22, Z
    2eb2:	71 81       	ldd	r23, Z+1	; 0x01
    2eb4:	82 81       	ldd	r24, Z+2	; 0x02
    2eb6:	93 81       	ldd	r25, Z+3	; 0x03
    2eb8:	0c 5f       	subi	r16, 0xFC	; 252
    2eba:	1f 4f       	sbci	r17, 0xFF	; 255
    2ebc:	08 c0       	rjmp	.+16     	; 0x2ece <vfprintf+0x1ee>
    2ebe:	60 81       	ld	r22, Z
    2ec0:	71 81       	ldd	r23, Z+1	; 0x01
    2ec2:	88 27       	eor	r24, r24
    2ec4:	77 fd       	sbrc	r23, 7
    2ec6:	80 95       	com	r24
    2ec8:	98 2f       	mov	r25, r24
    2eca:	0e 5f       	subi	r16, 0xFE	; 254
    2ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ece:	4f e6       	ldi	r20, 0x6F	; 111
    2ed0:	b4 2e       	mov	r11, r20
    2ed2:	b2 22       	and	r11, r18
    2ed4:	97 ff       	sbrs	r25, 7
    2ed6:	09 c0       	rjmp	.+18     	; 0x2eea <vfprintf+0x20a>
    2ed8:	90 95       	com	r25
    2eda:	80 95       	com	r24
    2edc:	70 95       	com	r23
    2ede:	61 95       	neg	r22
    2ee0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ee2:	8f 4f       	sbci	r24, 0xFF	; 255
    2ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ee6:	f0 e8       	ldi	r31, 0x80	; 128
    2ee8:	bf 2a       	or	r11, r31
    2eea:	2a e0       	ldi	r18, 0x0A	; 10
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	a4 01       	movw	r20, r8
    2ef0:	0e 94 08 1c 	call	0x3810	; 0x3810 <__ultoa_invert>
    2ef4:	a8 2e       	mov	r10, r24
    2ef6:	a8 18       	sub	r10, r8
    2ef8:	43 c0       	rjmp	.+134    	; 0x2f80 <vfprintf+0x2a0>
    2efa:	85 37       	cpi	r24, 0x75	; 117
    2efc:	31 f4       	brne	.+12     	; 0x2f0a <vfprintf+0x22a>
    2efe:	3f ee       	ldi	r19, 0xEF	; 239
    2f00:	b3 2e       	mov	r11, r19
    2f02:	b2 22       	and	r11, r18
    2f04:	2a e0       	ldi	r18, 0x0A	; 10
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	24 c0       	rjmp	.+72     	; 0x2f52 <vfprintf+0x272>
    2f0a:	99 ef       	ldi	r25, 0xF9	; 249
    2f0c:	b9 2e       	mov	r11, r25
    2f0e:	b2 22       	and	r11, r18
    2f10:	8f 36       	cpi	r24, 0x6F	; 111
    2f12:	b9 f0       	breq	.+46     	; 0x2f42 <vfprintf+0x262>
    2f14:	20 f4       	brcc	.+8      	; 0x2f1e <vfprintf+0x23e>
    2f16:	88 35       	cpi	r24, 0x58	; 88
    2f18:	09 f0       	breq	.+2      	; 0x2f1c <vfprintf+0x23c>
    2f1a:	b3 c0       	rjmp	.+358    	; 0x3082 <vfprintf+0x3a2>
    2f1c:	0d c0       	rjmp	.+26     	; 0x2f38 <vfprintf+0x258>
    2f1e:	80 37       	cpi	r24, 0x70	; 112
    2f20:	21 f0       	breq	.+8      	; 0x2f2a <vfprintf+0x24a>
    2f22:	88 37       	cpi	r24, 0x78	; 120
    2f24:	09 f0       	breq	.+2      	; 0x2f28 <vfprintf+0x248>
    2f26:	ad c0       	rjmp	.+346    	; 0x3082 <vfprintf+0x3a2>
    2f28:	02 c0       	rjmp	.+4      	; 0x2f2e <vfprintf+0x24e>
    2f2a:	20 e1       	ldi	r18, 0x10	; 16
    2f2c:	b2 2a       	or	r11, r18
    2f2e:	b4 fe       	sbrs	r11, 4
    2f30:	0b c0       	rjmp	.+22     	; 0x2f48 <vfprintf+0x268>
    2f32:	84 e0       	ldi	r24, 0x04	; 4
    2f34:	b8 2a       	or	r11, r24
    2f36:	08 c0       	rjmp	.+16     	; 0x2f48 <vfprintf+0x268>
    2f38:	24 ff       	sbrs	r18, 4
    2f3a:	09 c0       	rjmp	.+18     	; 0x2f4e <vfprintf+0x26e>
    2f3c:	e6 e0       	ldi	r30, 0x06	; 6
    2f3e:	be 2a       	or	r11, r30
    2f40:	06 c0       	rjmp	.+12     	; 0x2f4e <vfprintf+0x26e>
    2f42:	28 e0       	ldi	r18, 0x08	; 8
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	05 c0       	rjmp	.+10     	; 0x2f52 <vfprintf+0x272>
    2f48:	20 e1       	ldi	r18, 0x10	; 16
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	02 c0       	rjmp	.+4      	; 0x2f52 <vfprintf+0x272>
    2f4e:	20 e1       	ldi	r18, 0x10	; 16
    2f50:	32 e0       	ldi	r19, 0x02	; 2
    2f52:	f8 01       	movw	r30, r16
    2f54:	b7 fe       	sbrs	r11, 7
    2f56:	07 c0       	rjmp	.+14     	; 0x2f66 <vfprintf+0x286>
    2f58:	60 81       	ld	r22, Z
    2f5a:	71 81       	ldd	r23, Z+1	; 0x01
    2f5c:	82 81       	ldd	r24, Z+2	; 0x02
    2f5e:	93 81       	ldd	r25, Z+3	; 0x03
    2f60:	0c 5f       	subi	r16, 0xFC	; 252
    2f62:	1f 4f       	sbci	r17, 0xFF	; 255
    2f64:	06 c0       	rjmp	.+12     	; 0x2f72 <vfprintf+0x292>
    2f66:	60 81       	ld	r22, Z
    2f68:	71 81       	ldd	r23, Z+1	; 0x01
    2f6a:	80 e0       	ldi	r24, 0x00	; 0
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	0e 5f       	subi	r16, 0xFE	; 254
    2f70:	1f 4f       	sbci	r17, 0xFF	; 255
    2f72:	a4 01       	movw	r20, r8
    2f74:	0e 94 08 1c 	call	0x3810	; 0x3810 <__ultoa_invert>
    2f78:	a8 2e       	mov	r10, r24
    2f7a:	a8 18       	sub	r10, r8
    2f7c:	ff e7       	ldi	r31, 0x7F	; 127
    2f7e:	bf 22       	and	r11, r31
    2f80:	b6 fe       	sbrs	r11, 6
    2f82:	0b c0       	rjmp	.+22     	; 0x2f9a <vfprintf+0x2ba>
    2f84:	2b 2d       	mov	r18, r11
    2f86:	2e 7f       	andi	r18, 0xFE	; 254
    2f88:	a5 14       	cp	r10, r5
    2f8a:	50 f4       	brcc	.+20     	; 0x2fa0 <vfprintf+0x2c0>
    2f8c:	b4 fe       	sbrs	r11, 4
    2f8e:	0a c0       	rjmp	.+20     	; 0x2fa4 <vfprintf+0x2c4>
    2f90:	b2 fc       	sbrc	r11, 2
    2f92:	08 c0       	rjmp	.+16     	; 0x2fa4 <vfprintf+0x2c4>
    2f94:	2b 2d       	mov	r18, r11
    2f96:	2e 7e       	andi	r18, 0xEE	; 238
    2f98:	05 c0       	rjmp	.+10     	; 0x2fa4 <vfprintf+0x2c4>
    2f9a:	7a 2c       	mov	r7, r10
    2f9c:	2b 2d       	mov	r18, r11
    2f9e:	03 c0       	rjmp	.+6      	; 0x2fa6 <vfprintf+0x2c6>
    2fa0:	7a 2c       	mov	r7, r10
    2fa2:	01 c0       	rjmp	.+2      	; 0x2fa6 <vfprintf+0x2c6>
    2fa4:	75 2c       	mov	r7, r5
    2fa6:	24 ff       	sbrs	r18, 4
    2fa8:	0d c0       	rjmp	.+26     	; 0x2fc4 <vfprintf+0x2e4>
    2faa:	fe 01       	movw	r30, r28
    2fac:	ea 0d       	add	r30, r10
    2fae:	f1 1d       	adc	r31, r1
    2fb0:	80 81       	ld	r24, Z
    2fb2:	80 33       	cpi	r24, 0x30	; 48
    2fb4:	11 f4       	brne	.+4      	; 0x2fba <vfprintf+0x2da>
    2fb6:	29 7e       	andi	r18, 0xE9	; 233
    2fb8:	09 c0       	rjmp	.+18     	; 0x2fcc <vfprintf+0x2ec>
    2fba:	22 ff       	sbrs	r18, 2
    2fbc:	06 c0       	rjmp	.+12     	; 0x2fca <vfprintf+0x2ea>
    2fbe:	73 94       	inc	r7
    2fc0:	73 94       	inc	r7
    2fc2:	04 c0       	rjmp	.+8      	; 0x2fcc <vfprintf+0x2ec>
    2fc4:	82 2f       	mov	r24, r18
    2fc6:	86 78       	andi	r24, 0x86	; 134
    2fc8:	09 f0       	breq	.+2      	; 0x2fcc <vfprintf+0x2ec>
    2fca:	73 94       	inc	r7
    2fcc:	23 fd       	sbrc	r18, 3
    2fce:	14 c0       	rjmp	.+40     	; 0x2ff8 <vfprintf+0x318>
    2fd0:	20 ff       	sbrs	r18, 0
    2fd2:	0f c0       	rjmp	.+30     	; 0x2ff2 <vfprintf+0x312>
    2fd4:	5a 2c       	mov	r5, r10
    2fd6:	73 14       	cp	r7, r3
    2fd8:	60 f4       	brcc	.+24     	; 0x2ff2 <vfprintf+0x312>
    2fda:	53 0c       	add	r5, r3
    2fdc:	57 18       	sub	r5, r7
    2fde:	73 2c       	mov	r7, r3
    2fe0:	08 c0       	rjmp	.+16     	; 0x2ff2 <vfprintf+0x312>
    2fe2:	b7 01       	movw	r22, r14
    2fe4:	80 e2       	ldi	r24, 0x20	; 32
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	2c 87       	std	Y+12, r18	; 0x0c
    2fea:	0e 94 c1 1b 	call	0x3782	; 0x3782 <fputc>
    2fee:	73 94       	inc	r7
    2ff0:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ff2:	73 14       	cp	r7, r3
    2ff4:	b0 f3       	brcs	.-20     	; 0x2fe2 <vfprintf+0x302>
    2ff6:	04 c0       	rjmp	.+8      	; 0x3000 <vfprintf+0x320>
    2ff8:	73 14       	cp	r7, r3
    2ffa:	10 f4       	brcc	.+4      	; 0x3000 <vfprintf+0x320>
    2ffc:	37 18       	sub	r3, r7
    2ffe:	01 c0       	rjmp	.+2      	; 0x3002 <vfprintf+0x322>
    3000:	31 2c       	mov	r3, r1
    3002:	24 ff       	sbrs	r18, 4
    3004:	12 c0       	rjmp	.+36     	; 0x302a <vfprintf+0x34a>
    3006:	b7 01       	movw	r22, r14
    3008:	80 e3       	ldi	r24, 0x30	; 48
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	2c 87       	std	Y+12, r18	; 0x0c
    300e:	0e 94 c1 1b 	call	0x3782	; 0x3782 <fputc>
    3012:	2c 85       	ldd	r18, Y+12	; 0x0c
    3014:	22 ff       	sbrs	r18, 2
    3016:	1e c0       	rjmp	.+60     	; 0x3054 <vfprintf+0x374>
    3018:	21 ff       	sbrs	r18, 1
    301a:	03 c0       	rjmp	.+6      	; 0x3022 <vfprintf+0x342>
    301c:	88 e5       	ldi	r24, 0x58	; 88
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	02 c0       	rjmp	.+4      	; 0x3026 <vfprintf+0x346>
    3022:	88 e7       	ldi	r24, 0x78	; 120
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	b7 01       	movw	r22, r14
    3028:	0c c0       	rjmp	.+24     	; 0x3042 <vfprintf+0x362>
    302a:	82 2f       	mov	r24, r18
    302c:	86 78       	andi	r24, 0x86	; 134
    302e:	91 f0       	breq	.+36     	; 0x3054 <vfprintf+0x374>
    3030:	21 fd       	sbrc	r18, 1
    3032:	02 c0       	rjmp	.+4      	; 0x3038 <vfprintf+0x358>
    3034:	80 e2       	ldi	r24, 0x20	; 32
    3036:	01 c0       	rjmp	.+2      	; 0x303a <vfprintf+0x35a>
    3038:	8b e2       	ldi	r24, 0x2B	; 43
    303a:	27 fd       	sbrc	r18, 7
    303c:	8d e2       	ldi	r24, 0x2D	; 45
    303e:	b7 01       	movw	r22, r14
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	0e 94 c1 1b 	call	0x3782	; 0x3782 <fputc>
    3046:	06 c0       	rjmp	.+12     	; 0x3054 <vfprintf+0x374>
    3048:	b7 01       	movw	r22, r14
    304a:	80 e3       	ldi	r24, 0x30	; 48
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	0e 94 c1 1b 	call	0x3782	; 0x3782 <fputc>
    3052:	5a 94       	dec	r5
    3054:	a5 14       	cp	r10, r5
    3056:	c0 f3       	brcs	.-16     	; 0x3048 <vfprintf+0x368>
    3058:	aa 94       	dec	r10
    305a:	f4 01       	movw	r30, r8
    305c:	ea 0d       	add	r30, r10
    305e:	f1 1d       	adc	r31, r1
    3060:	b7 01       	movw	r22, r14
    3062:	80 81       	ld	r24, Z
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	0e 94 c1 1b 	call	0x3782	; 0x3782 <fputc>
    306a:	a1 10       	cpse	r10, r1
    306c:	f5 cf       	rjmp	.-22     	; 0x3058 <vfprintf+0x378>
    306e:	06 c0       	rjmp	.+12     	; 0x307c <vfprintf+0x39c>
    3070:	b7 01       	movw	r22, r14
    3072:	80 e2       	ldi	r24, 0x20	; 32
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	0e 94 c1 1b 	call	0x3782	; 0x3782 <fputc>
    307a:	3a 94       	dec	r3
    307c:	31 10       	cpse	r3, r1
    307e:	f8 cf       	rjmp	.-16     	; 0x3070 <vfprintf+0x390>
    3080:	43 ce       	rjmp	.-890    	; 0x2d08 <vfprintf+0x28>
    3082:	f7 01       	movw	r30, r14
    3084:	26 81       	ldd	r18, Z+6	; 0x06
    3086:	37 81       	ldd	r19, Z+7	; 0x07
    3088:	02 c0       	rjmp	.+4      	; 0x308e <vfprintf+0x3ae>
    308a:	2f ef       	ldi	r18, 0xFF	; 255
    308c:	3f ef       	ldi	r19, 0xFF	; 255
    308e:	c9 01       	movw	r24, r18
    3090:	2c 96       	adiw	r28, 0x0c	; 12
    3092:	e2 e1       	ldi	r30, 0x12	; 18
    3094:	0c 94 85 1c 	jmp	0x390a	; 0x390a <__epilogue_restores__>

00003098 <putval>:
    3098:	20 fd       	sbrc	r18, 0
    309a:	09 c0       	rjmp	.+18     	; 0x30ae <putval+0x16>
    309c:	fc 01       	movw	r30, r24
    309e:	23 fd       	sbrc	r18, 3
    30a0:	05 c0       	rjmp	.+10     	; 0x30ac <putval+0x14>
    30a2:	22 ff       	sbrs	r18, 2
    30a4:	02 c0       	rjmp	.+4      	; 0x30aa <putval+0x12>
    30a6:	73 83       	std	Z+3, r23	; 0x03
    30a8:	62 83       	std	Z+2, r22	; 0x02
    30aa:	51 83       	std	Z+1, r21	; 0x01
    30ac:	40 83       	st	Z, r20
    30ae:	08 95       	ret

000030b0 <mulacc>:
    30b0:	cf 92       	push	r12
    30b2:	df 92       	push	r13
    30b4:	ef 92       	push	r14
    30b6:	ff 92       	push	r15
    30b8:	0f 93       	push	r16
    30ba:	1f 93       	push	r17
    30bc:	44 fd       	sbrc	r20, 4
    30be:	10 c0       	rjmp	.+32     	; 0x30e0 <mulacc+0x30>
    30c0:	46 fd       	sbrc	r20, 6
    30c2:	10 c0       	rjmp	.+32     	; 0x30e4 <mulacc+0x34>
    30c4:	db 01       	movw	r26, r22
    30c6:	fc 01       	movw	r30, r24
    30c8:	aa 0f       	add	r26, r26
    30ca:	bb 1f       	adc	r27, r27
    30cc:	ee 1f       	adc	r30, r30
    30ce:	ff 1f       	adc	r31, r31
    30d0:	10 94       	com	r1
    30d2:	d1 f7       	brne	.-12     	; 0x30c8 <mulacc+0x18>
    30d4:	6a 0f       	add	r22, r26
    30d6:	7b 1f       	adc	r23, r27
    30d8:	8e 1f       	adc	r24, r30
    30da:	9f 1f       	adc	r25, r31
    30dc:	31 e0       	ldi	r19, 0x01	; 1
    30de:	03 c0       	rjmp	.+6      	; 0x30e6 <mulacc+0x36>
    30e0:	33 e0       	ldi	r19, 0x03	; 3
    30e2:	01 c0       	rjmp	.+2      	; 0x30e6 <mulacc+0x36>
    30e4:	34 e0       	ldi	r19, 0x04	; 4
    30e6:	66 0f       	add	r22, r22
    30e8:	77 1f       	adc	r23, r23
    30ea:	88 1f       	adc	r24, r24
    30ec:	99 1f       	adc	r25, r25
    30ee:	31 50       	subi	r19, 0x01	; 1
    30f0:	d1 f7       	brne	.-12     	; 0x30e6 <mulacc+0x36>
    30f2:	6b 01       	movw	r12, r22
    30f4:	7c 01       	movw	r14, r24
    30f6:	c2 0e       	add	r12, r18
    30f8:	d1 1c       	adc	r13, r1
    30fa:	e1 1c       	adc	r14, r1
    30fc:	f1 1c       	adc	r15, r1
    30fe:	97 01       	movw	r18, r14
    3100:	86 01       	movw	r16, r12
    3102:	b6 01       	movw	r22, r12
    3104:	c9 01       	movw	r24, r18
    3106:	1f 91       	pop	r17
    3108:	0f 91       	pop	r16
    310a:	ff 90       	pop	r15
    310c:	ef 90       	pop	r14
    310e:	df 90       	pop	r13
    3110:	cf 90       	pop	r12
    3112:	08 95       	ret

00003114 <skip_spaces>:
    3114:	0f 93       	push	r16
    3116:	1f 93       	push	r17
    3118:	cf 93       	push	r28
    311a:	df 93       	push	r29
    311c:	8c 01       	movw	r16, r24
    311e:	c8 01       	movw	r24, r16
    3120:	0e 94 81 1b 	call	0x3702	; 0x3702 <fgetc>
    3124:	ec 01       	movw	r28, r24
    3126:	97 fd       	sbrc	r25, 7
    3128:	08 c0       	rjmp	.+16     	; 0x313a <skip_spaces+0x26>
    312a:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <isspace>
    312e:	89 2b       	or	r24, r25
    3130:	b1 f7       	brne	.-20     	; 0x311e <skip_spaces+0xa>
    3132:	b8 01       	movw	r22, r16
    3134:	ce 01       	movw	r24, r28
    3136:	0e 94 ed 1b 	call	0x37da	; 0x37da <ungetc>
    313a:	ce 01       	movw	r24, r28
    313c:	df 91       	pop	r29
    313e:	cf 91       	pop	r28
    3140:	1f 91       	pop	r17
    3142:	0f 91       	pop	r16
    3144:	08 95       	ret

00003146 <conv_int>:
    3146:	8f 92       	push	r8
    3148:	9f 92       	push	r9
    314a:	af 92       	push	r10
    314c:	cf 92       	push	r12
    314e:	df 92       	push	r13
    3150:	ef 92       	push	r14
    3152:	ff 92       	push	r15
    3154:	0f 93       	push	r16
    3156:	1f 93       	push	r17
    3158:	cf 93       	push	r28
    315a:	df 93       	push	r29
    315c:	ec 01       	movw	r28, r24
    315e:	a6 2e       	mov	r10, r22
    3160:	4a 01       	movw	r8, r20
    3162:	02 2f       	mov	r16, r18
    3164:	0e 94 81 1b 	call	0x3702	; 0x3702 <fgetc>
    3168:	ac 01       	movw	r20, r24
    316a:	55 27       	eor	r21, r21
    316c:	4b 32       	cpi	r20, 0x2B	; 43
    316e:	51 05       	cpc	r21, r1
    3170:	21 f0       	breq	.+8      	; 0x317a <conv_int+0x34>
    3172:	4d 32       	cpi	r20, 0x2D	; 45
    3174:	51 05       	cpc	r21, r1
    3176:	51 f4       	brne	.+20     	; 0x318c <conv_int+0x46>
    3178:	00 68       	ori	r16, 0x80	; 128
    317a:	aa 94       	dec	r10
    317c:	11 f4       	brne	.+4      	; 0x3182 <conv_int+0x3c>
    317e:	80 e0       	ldi	r24, 0x00	; 0
    3180:	63 c0       	rjmp	.+198    	; 0x3248 <conv_int+0x102>
    3182:	ce 01       	movw	r24, r28
    3184:	0e 94 81 1b 	call	0x3702	; 0x3702 <fgetc>
    3188:	97 fd       	sbrc	r25, 7
    318a:	f9 cf       	rjmp	.-14     	; 0x317e <conv_int+0x38>
    318c:	10 2f       	mov	r17, r16
    318e:	1d 7f       	andi	r17, 0xFD	; 253
    3190:	30 2f       	mov	r19, r16
    3192:	30 73       	andi	r19, 0x30	; 48
    3194:	e1 f4       	brne	.+56     	; 0x31ce <conv_int+0x88>
    3196:	80 33       	cpi	r24, 0x30	; 48
    3198:	d1 f4       	brne	.+52     	; 0x31ce <conv_int+0x88>
    319a:	aa 94       	dec	r10
    319c:	09 f4       	brne	.+2      	; 0x31a0 <conv_int+0x5a>
    319e:	40 c0       	rjmp	.+128    	; 0x3220 <conv_int+0xda>
    31a0:	ce 01       	movw	r24, r28
    31a2:	0e 94 81 1b 	call	0x3702	; 0x3702 <fgetc>
    31a6:	97 fd       	sbrc	r25, 7
    31a8:	3b c0       	rjmp	.+118    	; 0x3220 <conv_int+0xda>
    31aa:	88 37       	cpi	r24, 0x78	; 120
    31ac:	11 f0       	breq	.+4      	; 0x31b2 <conv_int+0x6c>
    31ae:	88 35       	cpi	r24, 0x58	; 88
    31b0:	49 f4       	brne	.+18     	; 0x31c4 <conv_int+0x7e>
    31b2:	12 64       	ori	r17, 0x42	; 66
    31b4:	aa 94       	dec	r10
    31b6:	a1 f1       	breq	.+104    	; 0x3220 <conv_int+0xda>
    31b8:	ce 01       	movw	r24, r28
    31ba:	0e 94 81 1b 	call	0x3702	; 0x3702 <fgetc>
    31be:	97 ff       	sbrs	r25, 7
    31c0:	06 c0       	rjmp	.+12     	; 0x31ce <conv_int+0x88>
    31c2:	2e c0       	rjmp	.+92     	; 0x3220 <conv_int+0xda>
    31c4:	06 ff       	sbrs	r16, 6
    31c6:	02 c0       	rjmp	.+4      	; 0x31cc <conv_int+0x86>
    31c8:	12 60       	ori	r17, 0x02	; 2
    31ca:	01 c0       	rjmp	.+2      	; 0x31ce <conv_int+0x88>
    31cc:	12 61       	ori	r17, 0x12	; 18
    31ce:	c1 2c       	mov	r12, r1
    31d0:	d1 2c       	mov	r13, r1
    31d2:	76 01       	movw	r14, r12
    31d4:	28 2f       	mov	r18, r24
    31d6:	20 53       	subi	r18, 0x30	; 48
    31d8:	28 30       	cpi	r18, 0x08	; 8
    31da:	80 f0       	brcs	.+32     	; 0x31fc <conv_int+0xb6>
    31dc:	14 ff       	sbrs	r17, 4
    31de:	04 c0       	rjmp	.+8      	; 0x31e8 <conv_int+0xa2>
    31e0:	be 01       	movw	r22, r28
    31e2:	0e 94 ed 1b 	call	0x37da	; 0x37da <ungetc>
    31e6:	19 c0       	rjmp	.+50     	; 0x321a <conv_int+0xd4>
    31e8:	2a 30       	cpi	r18, 0x0A	; 10
    31ea:	40 f0       	brcs	.+16     	; 0x31fc <conv_int+0xb6>
    31ec:	16 ff       	sbrs	r17, 6
    31ee:	f8 cf       	rjmp	.-16     	; 0x31e0 <conv_int+0x9a>
    31f0:	2f 7d       	andi	r18, 0xDF	; 223
    31f2:	32 2f       	mov	r19, r18
    31f4:	31 51       	subi	r19, 0x11	; 17
    31f6:	36 30       	cpi	r19, 0x06	; 6
    31f8:	98 f7       	brcc	.-26     	; 0x31e0 <conv_int+0x9a>
    31fa:	27 50       	subi	r18, 0x07	; 7
    31fc:	41 2f       	mov	r20, r17
    31fe:	c7 01       	movw	r24, r14
    3200:	b6 01       	movw	r22, r12
    3202:	0e 94 58 18 	call	0x30b0	; 0x30b0 <mulacc>
    3206:	6b 01       	movw	r12, r22
    3208:	7c 01       	movw	r14, r24
    320a:	12 60       	ori	r17, 0x02	; 2
    320c:	aa 94       	dec	r10
    320e:	59 f0       	breq	.+22     	; 0x3226 <conv_int+0xe0>
    3210:	ce 01       	movw	r24, r28
    3212:	0e 94 81 1b 	call	0x3702	; 0x3702 <fgetc>
    3216:	97 ff       	sbrs	r25, 7
    3218:	dd cf       	rjmp	.-70     	; 0x31d4 <conv_int+0x8e>
    321a:	11 fd       	sbrc	r17, 1
    321c:	04 c0       	rjmp	.+8      	; 0x3226 <conv_int+0xe0>
    321e:	af cf       	rjmp	.-162    	; 0x317e <conv_int+0x38>
    3220:	c1 2c       	mov	r12, r1
    3222:	d1 2c       	mov	r13, r1
    3224:	76 01       	movw	r14, r12
    3226:	17 ff       	sbrs	r17, 7
    3228:	08 c0       	rjmp	.+16     	; 0x323a <conv_int+0xf4>
    322a:	f0 94       	com	r15
    322c:	e0 94       	com	r14
    322e:	d0 94       	com	r13
    3230:	c0 94       	com	r12
    3232:	c1 1c       	adc	r12, r1
    3234:	d1 1c       	adc	r13, r1
    3236:	e1 1c       	adc	r14, r1
    3238:	f1 1c       	adc	r15, r1
    323a:	21 2f       	mov	r18, r17
    323c:	b7 01       	movw	r22, r14
    323e:	a6 01       	movw	r20, r12
    3240:	c4 01       	movw	r24, r8
    3242:	0e 94 4c 18 	call	0x3098	; 0x3098 <putval>
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	df 91       	pop	r29
    324a:	cf 91       	pop	r28
    324c:	1f 91       	pop	r17
    324e:	0f 91       	pop	r16
    3250:	ff 90       	pop	r15
    3252:	ef 90       	pop	r14
    3254:	df 90       	pop	r13
    3256:	cf 90       	pop	r12
    3258:	af 90       	pop	r10
    325a:	9f 90       	pop	r9
    325c:	8f 90       	pop	r8
    325e:	08 95       	ret

00003260 <conv_brk>:
    3260:	6f 92       	push	r6
    3262:	7f 92       	push	r7
    3264:	9f 92       	push	r9
    3266:	af 92       	push	r10
    3268:	bf 92       	push	r11
    326a:	cf 92       	push	r12
    326c:	df 92       	push	r13
    326e:	ef 92       	push	r14
    3270:	ff 92       	push	r15
    3272:	0f 93       	push	r16
    3274:	1f 93       	push	r17
    3276:	cf 93       	push	r28
    3278:	df 93       	push	r29
    327a:	cd b7       	in	r28, 0x3d	; 61
    327c:	de b7       	in	r29, 0x3e	; 62
    327e:	a1 97       	sbiw	r28, 0x21	; 33
    3280:	0f b6       	in	r0, 0x3f	; 63
    3282:	f8 94       	cli
    3284:	de bf       	out	0x3e, r29	; 62
    3286:	0f be       	out	0x3f, r0	; 63
    3288:	cd bf       	out	0x3d, r28	; 61
    328a:	6c 01       	movw	r12, r24
    328c:	7a 01       	movw	r14, r20
    328e:	89 01       	movw	r16, r18
    3290:	fe 01       	movw	r30, r28
    3292:	31 96       	adiw	r30, 0x01	; 1
    3294:	80 e2       	ldi	r24, 0x20	; 32
    3296:	df 01       	movw	r26, r30
    3298:	1d 92       	st	X+, r1
    329a:	8a 95       	dec	r24
    329c:	e9 f7       	brne	.-6      	; 0x3298 <conv_brk+0x38>
    329e:	d6 01       	movw	r26, r12
    32a0:	13 96       	adiw	r26, 0x03	; 3
    32a2:	9c 90       	ld	r9, X
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	a1 2c       	mov	r10, r1
    32aa:	a0 e0       	ldi	r26, 0x00	; 0
    32ac:	b1 2c       	mov	r11, r1
    32ae:	cf 01       	movw	r24, r30
    32b0:	41 e0       	ldi	r20, 0x01	; 1
    32b2:	50 e0       	ldi	r21, 0x00	; 0
    32b4:	f8 01       	movw	r30, r16
    32b6:	93 fc       	sbrc	r9, 3
    32b8:	75 91       	lpm	r23, Z+
    32ba:	93 fe       	sbrs	r9, 3
    32bc:	71 91       	ld	r23, Z+
    32be:	8f 01       	movw	r16, r30
    32c0:	71 11       	cpse	r23, r1
    32c2:	03 c0       	rjmp	.+6      	; 0x32ca <conv_brk+0x6a>
    32c4:	00 e0       	ldi	r16, 0x00	; 0
    32c6:	10 e0       	ldi	r17, 0x00	; 0
    32c8:	80 c0       	rjmp	.+256    	; 0x33ca <conv_brk+0x16a>
    32ca:	7e 35       	cpi	r23, 0x5E	; 94
    32cc:	19 f4       	brne	.+6      	; 0x32d4 <conv_brk+0x74>
    32ce:	21 15       	cp	r18, r1
    32d0:	31 05       	cpc	r19, r1
    32d2:	59 f1       	breq	.+86     	; 0x332a <conv_brk+0xca>
    32d4:	eb 2d       	mov	r30, r11
    32d6:	f0 e0       	ldi	r31, 0x00	; 0
    32d8:	e2 17       	cp	r30, r18
    32da:	f3 07       	cpc	r31, r19
    32dc:	3c f4       	brge	.+14     	; 0x32ec <conv_brk+0x8c>
    32de:	7d 35       	cpi	r23, 0x5D	; 93
    32e0:	69 f1       	breq	.+90     	; 0x333c <conv_brk+0xdc>
    32e2:	7d 32       	cpi	r23, 0x2D	; 45
    32e4:	19 f4       	brne	.+6      	; 0x32ec <conv_brk+0x8c>
    32e6:	aa 23       	and	r26, r26
    32e8:	19 f1       	breq	.+70     	; 0x3330 <conv_brk+0xd0>
    32ea:	03 c0       	rjmp	.+6      	; 0x32f2 <conv_brk+0x92>
    32ec:	a1 11       	cpse	r26, r1
    32ee:	01 c0       	rjmp	.+2      	; 0x32f2 <conv_brk+0x92>
    32f0:	a7 2e       	mov	r10, r23
    32f2:	e7 2f       	mov	r30, r23
    32f4:	e6 95       	lsr	r30
    32f6:	e6 95       	lsr	r30
    32f8:	e6 95       	lsr	r30
    32fa:	3c 01       	movw	r6, r24
    32fc:	6e 0e       	add	r6, r30
    32fe:	71 1c       	adc	r7, r1
    3300:	f3 01       	movw	r30, r6
    3302:	a7 2f       	mov	r26, r23
    3304:	a7 70       	andi	r26, 0x07	; 7
    3306:	3a 01       	movw	r6, r20
    3308:	02 c0       	rjmp	.+4      	; 0x330e <conv_brk+0xae>
    330a:	66 0c       	add	r6, r6
    330c:	77 1c       	adc	r7, r7
    330e:	aa 95       	dec	r26
    3310:	e2 f7       	brpl	.-8      	; 0x330a <conv_brk+0xaa>
    3312:	d3 01       	movw	r26, r6
    3314:	b0 81       	ld	r27, Z
    3316:	ba 2b       	or	r27, r26
    3318:	b0 83       	st	Z, r27
    331a:	7a 15       	cp	r23, r10
    331c:	59 f0       	breq	.+22     	; 0x3334 <conv_brk+0xd4>
    331e:	7a 15       	cp	r23, r10
    3320:	10 f4       	brcc	.+4      	; 0x3326 <conv_brk+0xc6>
    3322:	7f 5f       	subi	r23, 0xFF	; 255
    3324:	e6 cf       	rjmp	.-52     	; 0x32f2 <conv_brk+0x92>
    3326:	71 50       	subi	r23, 0x01	; 1
    3328:	e4 cf       	rjmp	.-56     	; 0x32f2 <conv_brk+0x92>
    332a:	bb 24       	eor	r11, r11
    332c:	b3 94       	inc	r11
    332e:	03 c0       	rjmp	.+6      	; 0x3336 <conv_brk+0xd6>
    3330:	a1 e0       	ldi	r26, 0x01	; 1
    3332:	01 c0       	rjmp	.+2      	; 0x3336 <conv_brk+0xd6>
    3334:	a0 e0       	ldi	r26, 0x00	; 0
    3336:	2f 5f       	subi	r18, 0xFF	; 255
    3338:	3f 4f       	sbci	r19, 0xFF	; 255
    333a:	bc cf       	rjmp	.-136    	; 0x32b4 <conv_brk+0x54>
    333c:	aa 23       	and	r26, r26
    333e:	19 f0       	breq	.+6      	; 0x3346 <conv_brk+0xe6>
    3340:	8e 81       	ldd	r24, Y+6	; 0x06
    3342:	80 62       	ori	r24, 0x20	; 32
    3344:	8e 83       	std	Y+6, r24	; 0x06
    3346:	b1 10       	cpse	r11, r1
    3348:	03 c0       	rjmp	.+6      	; 0x3350 <conv_brk+0xf0>
    334a:	bb 24       	eor	r11, r11
    334c:	b3 94       	inc	r11
    334e:	0b c0       	rjmp	.+22     	; 0x3366 <conv_brk+0x106>
    3350:	fe 01       	movw	r30, r28
    3352:	31 96       	adiw	r30, 0x01	; 1
    3354:	ce 01       	movw	r24, r28
    3356:	81 96       	adiw	r24, 0x21	; 33
    3358:	20 81       	ld	r18, Z
    335a:	20 95       	com	r18
    335c:	21 93       	st	Z+, r18
    335e:	e8 17       	cp	r30, r24
    3360:	f9 07       	cpc	r31, r25
    3362:	d1 f7       	brne	.-12     	; 0x3358 <conv_brk+0xf8>
    3364:	f2 cf       	rjmp	.-28     	; 0x334a <conv_brk+0xea>
    3366:	c6 01       	movw	r24, r12
    3368:	69 a3       	std	Y+33, r22	; 0x21
    336a:	0e 94 81 1b 	call	0x3702	; 0x3702 <fgetc>
    336e:	69 a1       	ldd	r22, Y+33	; 0x21
    3370:	97 fd       	sbrc	r25, 7
    3372:	24 c0       	rjmp	.+72     	; 0x33bc <conv_brk+0x15c>
    3374:	28 2f       	mov	r18, r24
    3376:	26 95       	lsr	r18
    3378:	26 95       	lsr	r18
    337a:	26 95       	lsr	r18
    337c:	e1 e0       	ldi	r30, 0x01	; 1
    337e:	f0 e0       	ldi	r31, 0x00	; 0
    3380:	ec 0f       	add	r30, r28
    3382:	fd 1f       	adc	r31, r29
    3384:	e2 0f       	add	r30, r18
    3386:	f1 1d       	adc	r31, r1
    3388:	20 81       	ld	r18, Z
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	ac 01       	movw	r20, r24
    338e:	47 70       	andi	r20, 0x07	; 7
    3390:	55 27       	eor	r21, r21
    3392:	02 c0       	rjmp	.+4      	; 0x3398 <conv_brk+0x138>
    3394:	35 95       	asr	r19
    3396:	27 95       	ror	r18
    3398:	4a 95       	dec	r20
    339a:	e2 f7       	brpl	.-8      	; 0x3394 <conv_brk+0x134>
    339c:	20 fd       	sbrc	r18, 0
    339e:	04 c0       	rjmp	.+8      	; 0x33a8 <conv_brk+0x148>
    33a0:	b6 01       	movw	r22, r12
    33a2:	0e 94 ed 1b 	call	0x37da	; 0x37da <ungetc>
    33a6:	0a c0       	rjmp	.+20     	; 0x33bc <conv_brk+0x15c>
    33a8:	e1 14       	cp	r14, r1
    33aa:	f1 04       	cpc	r15, r1
    33ac:	19 f0       	breq	.+6      	; 0x33b4 <conv_brk+0x154>
    33ae:	d7 01       	movw	r26, r14
    33b0:	8d 93       	st	X+, r24
    33b2:	7d 01       	movw	r14, r26
    33b4:	61 50       	subi	r22, 0x01	; 1
    33b6:	b1 2c       	mov	r11, r1
    33b8:	b1 f6       	brne	.-84     	; 0x3366 <conv_brk+0x106>
    33ba:	02 c0       	rjmp	.+4      	; 0x33c0 <conv_brk+0x160>
    33bc:	b1 10       	cpse	r11, r1
    33be:	82 cf       	rjmp	.-252    	; 0x32c4 <conv_brk+0x64>
    33c0:	e1 14       	cp	r14, r1
    33c2:	f1 04       	cpc	r15, r1
    33c4:	11 f0       	breq	.+4      	; 0x33ca <conv_brk+0x16a>
    33c6:	f7 01       	movw	r30, r14
    33c8:	10 82       	st	Z, r1
    33ca:	c8 01       	movw	r24, r16
    33cc:	a1 96       	adiw	r28, 0x21	; 33
    33ce:	0f b6       	in	r0, 0x3f	; 63
    33d0:	f8 94       	cli
    33d2:	de bf       	out	0x3e, r29	; 62
    33d4:	0f be       	out	0x3f, r0	; 63
    33d6:	cd bf       	out	0x3d, r28	; 61
    33d8:	df 91       	pop	r29
    33da:	cf 91       	pop	r28
    33dc:	1f 91       	pop	r17
    33de:	0f 91       	pop	r16
    33e0:	ff 90       	pop	r15
    33e2:	ef 90       	pop	r14
    33e4:	df 90       	pop	r13
    33e6:	cf 90       	pop	r12
    33e8:	bf 90       	pop	r11
    33ea:	af 90       	pop	r10
    33ec:	9f 90       	pop	r9
    33ee:	7f 90       	pop	r7
    33f0:	6f 90       	pop	r6
    33f2:	08 95       	ret

000033f4 <vfscanf>:
    33f4:	4f 92       	push	r4
    33f6:	5f 92       	push	r5
    33f8:	7f 92       	push	r7
    33fa:	8f 92       	push	r8
    33fc:	9f 92       	push	r9
    33fe:	af 92       	push	r10
    3400:	bf 92       	push	r11
    3402:	cf 92       	push	r12
    3404:	df 92       	push	r13
    3406:	ef 92       	push	r14
    3408:	ff 92       	push	r15
    340a:	0f 93       	push	r16
    340c:	1f 93       	push	r17
    340e:	cf 93       	push	r28
    3410:	df 93       	push	r29
    3412:	1f 92       	push	r1
    3414:	cd b7       	in	r28, 0x3d	; 61
    3416:	de b7       	in	r29, 0x3e	; 62
    3418:	8c 01       	movw	r16, r24
    341a:	2b 01       	movw	r4, r22
    341c:	7a 01       	movw	r14, r20
    341e:	fc 01       	movw	r30, r24
    3420:	17 82       	std	Z+7, r1	; 0x07
    3422:	16 82       	std	Z+6, r1	; 0x06
    3424:	a1 2c       	mov	r10, r1
    3426:	f0 c0       	rjmp	.+480    	; 0x3608 <vfscanf+0x214>
    3428:	8c 2d       	mov	r24, r12
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <isspace>
    3430:	89 2b       	or	r24, r25
    3432:	21 f0       	breq	.+8      	; 0x343c <vfscanf+0x48>
    3434:	c8 01       	movw	r24, r16
    3436:	0e 94 8a 18 	call	0x3114	; 0x3114 <skip_spaces>
    343a:	e6 c0       	rjmp	.+460    	; 0x3608 <vfscanf+0x214>
    343c:	f5 e2       	ldi	r31, 0x25	; 37
    343e:	cf 12       	cpse	r12, r31
    3440:	0a c0       	rjmp	.+20     	; 0x3456 <vfscanf+0x62>
    3442:	f2 01       	movw	r30, r4
    3444:	d3 fc       	sbrc	r13, 3
    3446:	35 91       	lpm	r19, Z+
    3448:	d3 fe       	sbrs	r13, 3
    344a:	31 91       	ld	r19, Z+
    344c:	2f 01       	movw	r4, r30
    344e:	35 32       	cpi	r19, 0x25	; 37
    3450:	71 f4       	brne	.+28     	; 0x346e <vfscanf+0x7a>
    3452:	55 e2       	ldi	r21, 0x25	; 37
    3454:	c5 2e       	mov	r12, r21
    3456:	c8 01       	movw	r24, r16
    3458:	0e 94 81 1b 	call	0x3702	; 0x3702 <fgetc>
    345c:	97 fd       	sbrc	r25, 7
    345e:	df c0       	rjmp	.+446    	; 0x361e <vfscanf+0x22a>
    3460:	c8 16       	cp	r12, r24
    3462:	09 f4       	brne	.+2      	; 0x3466 <vfscanf+0x72>
    3464:	d1 c0       	rjmp	.+418    	; 0x3608 <vfscanf+0x214>
    3466:	b8 01       	movw	r22, r16
    3468:	0e 94 ed 1b 	call	0x37da	; 0x37da <ungetc>
    346c:	da c0       	rjmp	.+436    	; 0x3622 <vfscanf+0x22e>
    346e:	3a 32       	cpi	r19, 0x2A	; 42
    3470:	41 f4       	brne	.+16     	; 0x3482 <vfscanf+0x8e>
    3472:	d3 fc       	sbrc	r13, 3
    3474:	35 91       	lpm	r19, Z+
    3476:	d3 fe       	sbrs	r13, 3
    3478:	31 91       	ld	r19, Z+
    347a:	2f 01       	movw	r4, r30
    347c:	bb 24       	eor	r11, r11
    347e:	b3 94       	inc	r11
    3480:	01 c0       	rjmp	.+2      	; 0x3484 <vfscanf+0x90>
    3482:	b1 2c       	mov	r11, r1
    3484:	71 2c       	mov	r7, r1
    3486:	10 c0       	rjmp	.+32     	; 0x34a8 <vfscanf+0xb4>
    3488:	f2 e0       	ldi	r31, 0x02	; 2
    348a:	bf 2a       	or	r11, r31
    348c:	67 2d       	mov	r22, r7
    348e:	70 e0       	ldi	r23, 0x00	; 0
    3490:	80 e0       	ldi	r24, 0x00	; 0
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	40 e2       	ldi	r20, 0x20	; 32
    3496:	0e 94 58 18 	call	0x30b0	; 0x30b0 <mulacc>
    349a:	76 2e       	mov	r7, r22
    349c:	f2 01       	movw	r30, r4
    349e:	d3 fc       	sbrc	r13, 3
    34a0:	35 91       	lpm	r19, Z+
    34a2:	d3 fe       	sbrs	r13, 3
    34a4:	31 91       	ld	r19, Z+
    34a6:	2f 01       	movw	r4, r30
    34a8:	23 2f       	mov	r18, r19
    34aa:	20 53       	subi	r18, 0x30	; 48
    34ac:	2a 30       	cpi	r18, 0x0A	; 10
    34ae:	60 f3       	brcs	.-40     	; 0x3488 <vfscanf+0x94>
    34b0:	b1 fe       	sbrs	r11, 1
    34b2:	03 c0       	rjmp	.+6      	; 0x34ba <vfscanf+0xc6>
    34b4:	71 10       	cpse	r7, r1
    34b6:	03 c0       	rjmp	.+6      	; 0x34be <vfscanf+0xca>
    34b8:	b4 c0       	rjmp	.+360    	; 0x3622 <vfscanf+0x22e>
    34ba:	77 24       	eor	r7, r7
    34bc:	7a 94       	dec	r7
    34be:	38 36       	cpi	r19, 0x68	; 104
    34c0:	19 f0       	breq	.+6      	; 0x34c8 <vfscanf+0xd4>
    34c2:	3c 36       	cpi	r19, 0x6C	; 108
    34c4:	99 f4       	brne	.+38     	; 0x34ec <vfscanf+0xf8>
    34c6:	0a c0       	rjmp	.+20     	; 0x34dc <vfscanf+0xe8>
    34c8:	f2 01       	movw	r30, r4
    34ca:	d3 fc       	sbrc	r13, 3
    34cc:	35 91       	lpm	r19, Z+
    34ce:	d3 fe       	sbrs	r13, 3
    34d0:	31 91       	ld	r19, Z+
    34d2:	2f 01       	movw	r4, r30
    34d4:	38 36       	cpi	r19, 0x68	; 104
    34d6:	51 f4       	brne	.+20     	; 0x34ec <vfscanf+0xf8>
    34d8:	f8 e0       	ldi	r31, 0x08	; 8
    34da:	bf 2a       	or	r11, r31
    34dc:	84 e0       	ldi	r24, 0x04	; 4
    34de:	b8 2a       	or	r11, r24
    34e0:	f2 01       	movw	r30, r4
    34e2:	d3 fc       	sbrc	r13, 3
    34e4:	35 91       	lpm	r19, Z+
    34e6:	d3 fe       	sbrs	r13, 3
    34e8:	31 91       	ld	r19, Z+
    34ea:	2f 01       	movw	r4, r30
    34ec:	33 23       	and	r19, r19
    34ee:	09 f4       	brne	.+2      	; 0x34f2 <vfscanf+0xfe>
    34f0:	98 c0       	rjmp	.+304    	; 0x3622 <vfscanf+0x22e>
    34f2:	63 2f       	mov	r22, r19
    34f4:	70 e0       	ldi	r23, 0x00	; 0
    34f6:	88 e6       	ldi	r24, 0x68	; 104
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	39 83       	std	Y+1, r19	; 0x01
    34fc:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <strchr_P>
    3500:	39 81       	ldd	r19, Y+1	; 0x01
    3502:	89 2b       	or	r24, r25
    3504:	09 f4       	brne	.+2      	; 0x3508 <vfscanf+0x114>
    3506:	8d c0       	rjmp	.+282    	; 0x3622 <vfscanf+0x22e>
    3508:	b0 fc       	sbrc	r11, 0
    350a:	07 c0       	rjmp	.+14     	; 0x351a <vfscanf+0x126>
    350c:	f7 01       	movw	r30, r14
    350e:	c0 80       	ld	r12, Z
    3510:	d1 80       	ldd	r13, Z+1	; 0x01
    3512:	82 e0       	ldi	r24, 0x02	; 2
    3514:	e8 0e       	add	r14, r24
    3516:	f1 1c       	adc	r15, r1
    3518:	02 c0       	rjmp	.+4      	; 0x351e <vfscanf+0x12a>
    351a:	c1 2c       	mov	r12, r1
    351c:	d1 2c       	mov	r13, r1
    351e:	3e 36       	cpi	r19, 0x6E	; 110
    3520:	51 f4       	brne	.+20     	; 0x3536 <vfscanf+0x142>
    3522:	f8 01       	movw	r30, r16
    3524:	46 81       	ldd	r20, Z+6	; 0x06
    3526:	57 81       	ldd	r21, Z+7	; 0x07
    3528:	60 e0       	ldi	r22, 0x00	; 0
    352a:	70 e0       	ldi	r23, 0x00	; 0
    352c:	2b 2d       	mov	r18, r11
    352e:	c6 01       	movw	r24, r12
    3530:	0e 94 4c 18 	call	0x3098	; 0x3098 <putval>
    3534:	69 c0       	rjmp	.+210    	; 0x3608 <vfscanf+0x214>
    3536:	33 36       	cpi	r19, 0x63	; 99
    3538:	91 f4       	brne	.+36     	; 0x355e <vfscanf+0x16a>
    353a:	b1 fc       	sbrc	r11, 1
    353c:	02 c0       	rjmp	.+4      	; 0x3542 <vfscanf+0x14e>
    353e:	77 24       	eor	r7, r7
    3540:	73 94       	inc	r7
    3542:	c8 01       	movw	r24, r16
    3544:	0e 94 81 1b 	call	0x3702	; 0x3702 <fgetc>
    3548:	97 fd       	sbrc	r25, 7
    354a:	69 c0       	rjmp	.+210    	; 0x361e <vfscanf+0x22a>
    354c:	c1 14       	cp	r12, r1
    354e:	d1 04       	cpc	r13, r1
    3550:	19 f0       	breq	.+6      	; 0x3558 <vfscanf+0x164>
    3552:	f6 01       	movw	r30, r12
    3554:	81 93       	st	Z+, r24
    3556:	6f 01       	movw	r12, r30
    3558:	7a 94       	dec	r7
    355a:	99 f7       	brne	.-26     	; 0x3542 <vfscanf+0x14e>
    355c:	53 c0       	rjmp	.+166    	; 0x3604 <vfscanf+0x210>
    355e:	3b 35       	cpi	r19, 0x5B	; 91
    3560:	59 f4       	brne	.+22     	; 0x3578 <vfscanf+0x184>
    3562:	92 01       	movw	r18, r4
    3564:	a6 01       	movw	r20, r12
    3566:	67 2d       	mov	r22, r7
    3568:	c8 01       	movw	r24, r16
    356a:	0e 94 30 19 	call	0x3260	; 0x3260 <conv_brk>
    356e:	2c 01       	movw	r4, r24
    3570:	00 97       	sbiw	r24, 0x00	; 0
    3572:	09 f0       	breq	.+2      	; 0x3576 <vfscanf+0x182>
    3574:	47 c0       	rjmp	.+142    	; 0x3604 <vfscanf+0x210>
    3576:	41 c0       	rjmp	.+130    	; 0x35fa <vfscanf+0x206>
    3578:	c8 01       	movw	r24, r16
    357a:	39 83       	std	Y+1, r19	; 0x01
    357c:	0e 94 8a 18 	call	0x3114	; 0x3114 <skip_spaces>
    3580:	39 81       	ldd	r19, Y+1	; 0x01
    3582:	97 fd       	sbrc	r25, 7
    3584:	4c c0       	rjmp	.+152    	; 0x361e <vfscanf+0x22a>
    3586:	3f 36       	cpi	r19, 0x6F	; 111
    3588:	59 f1       	breq	.+86     	; 0x35e0 <vfscanf+0x1ec>
    358a:	28 f4       	brcc	.+10     	; 0x3596 <vfscanf+0x1a2>
    358c:	34 36       	cpi	r19, 0x64	; 100
    358e:	29 f1       	breq	.+74     	; 0x35da <vfscanf+0x1e6>
    3590:	39 36       	cpi	r19, 0x69	; 105
    3592:	49 f5       	brne	.+82     	; 0x35e6 <vfscanf+0x1f2>
    3594:	2a c0       	rjmp	.+84     	; 0x35ea <vfscanf+0x1f6>
    3596:	33 37       	cpi	r19, 0x73	; 115
    3598:	19 f0       	breq	.+6      	; 0x35a0 <vfscanf+0x1ac>
    359a:	35 37       	cpi	r19, 0x75	; 117
    359c:	21 f5       	brne	.+72     	; 0x35e6 <vfscanf+0x1f2>
    359e:	1d c0       	rjmp	.+58     	; 0x35da <vfscanf+0x1e6>
    35a0:	c8 01       	movw	r24, r16
    35a2:	0e 94 81 1b 	call	0x3702	; 0x3702 <fgetc>
    35a6:	4c 01       	movw	r8, r24
    35a8:	97 fd       	sbrc	r25, 7
    35aa:	11 c0       	rjmp	.+34     	; 0x35ce <vfscanf+0x1da>
    35ac:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <isspace>
    35b0:	89 2b       	or	r24, r25
    35b2:	29 f0       	breq	.+10     	; 0x35be <vfscanf+0x1ca>
    35b4:	b8 01       	movw	r22, r16
    35b6:	c4 01       	movw	r24, r8
    35b8:	0e 94 ed 1b 	call	0x37da	; 0x37da <ungetc>
    35bc:	08 c0       	rjmp	.+16     	; 0x35ce <vfscanf+0x1da>
    35be:	c1 14       	cp	r12, r1
    35c0:	d1 04       	cpc	r13, r1
    35c2:	19 f0       	breq	.+6      	; 0x35ca <vfscanf+0x1d6>
    35c4:	f6 01       	movw	r30, r12
    35c6:	81 92       	st	Z+, r8
    35c8:	6f 01       	movw	r12, r30
    35ca:	7a 94       	dec	r7
    35cc:	49 f7       	brne	.-46     	; 0x35a0 <vfscanf+0x1ac>
    35ce:	c1 14       	cp	r12, r1
    35d0:	d1 04       	cpc	r13, r1
    35d2:	c1 f0       	breq	.+48     	; 0x3604 <vfscanf+0x210>
    35d4:	f6 01       	movw	r30, r12
    35d6:	10 82       	st	Z, r1
    35d8:	15 c0       	rjmp	.+42     	; 0x3604 <vfscanf+0x210>
    35da:	f0 e2       	ldi	r31, 0x20	; 32
    35dc:	bf 2a       	or	r11, r31
    35de:	05 c0       	rjmp	.+10     	; 0x35ea <vfscanf+0x1f6>
    35e0:	80 e1       	ldi	r24, 0x10	; 16
    35e2:	b8 2a       	or	r11, r24
    35e4:	02 c0       	rjmp	.+4      	; 0x35ea <vfscanf+0x1f6>
    35e6:	90 e4       	ldi	r25, 0x40	; 64
    35e8:	b9 2a       	or	r11, r25
    35ea:	2b 2d       	mov	r18, r11
    35ec:	a6 01       	movw	r20, r12
    35ee:	67 2d       	mov	r22, r7
    35f0:	c8 01       	movw	r24, r16
    35f2:	0e 94 a3 18 	call	0x3146	; 0x3146 <conv_int>
    35f6:	81 11       	cpse	r24, r1
    35f8:	05 c0       	rjmp	.+10     	; 0x3604 <vfscanf+0x210>
    35fa:	f8 01       	movw	r30, r16
    35fc:	83 81       	ldd	r24, Z+3	; 0x03
    35fe:	80 73       	andi	r24, 0x30	; 48
    3600:	71 f4       	brne	.+28     	; 0x361e <vfscanf+0x22a>
    3602:	0f c0       	rjmp	.+30     	; 0x3622 <vfscanf+0x22e>
    3604:	b0 fe       	sbrs	r11, 0
    3606:	a3 94       	inc	r10
    3608:	f8 01       	movw	r30, r16
    360a:	d3 80       	ldd	r13, Z+3	; 0x03
    360c:	f2 01       	movw	r30, r4
    360e:	d3 fc       	sbrc	r13, 3
    3610:	c5 90       	lpm	r12, Z+
    3612:	d3 fe       	sbrs	r13, 3
    3614:	c1 90       	ld	r12, Z+
    3616:	2f 01       	movw	r4, r30
    3618:	c1 10       	cpse	r12, r1
    361a:	06 cf       	rjmp	.-500    	; 0x3428 <vfscanf+0x34>
    361c:	02 c0       	rjmp	.+4      	; 0x3622 <vfscanf+0x22e>
    361e:	aa 20       	and	r10, r10
    3620:	19 f0       	breq	.+6      	; 0x3628 <vfscanf+0x234>
    3622:	2a 2d       	mov	r18, r10
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	02 c0       	rjmp	.+4      	; 0x362c <vfscanf+0x238>
    3628:	2f ef       	ldi	r18, 0xFF	; 255
    362a:	3f ef       	ldi	r19, 0xFF	; 255
    362c:	c9 01       	movw	r24, r18
    362e:	0f 90       	pop	r0
    3630:	df 91       	pop	r29
    3632:	cf 91       	pop	r28
    3634:	1f 91       	pop	r17
    3636:	0f 91       	pop	r16
    3638:	ff 90       	pop	r15
    363a:	ef 90       	pop	r14
    363c:	df 90       	pop	r13
    363e:	cf 90       	pop	r12
    3640:	bf 90       	pop	r11
    3642:	af 90       	pop	r10
    3644:	9f 90       	pop	r9
    3646:	8f 90       	pop	r8
    3648:	7f 90       	pop	r7
    364a:	5f 90       	pop	r5
    364c:	4f 90       	pop	r4
    364e:	08 95       	ret

00003650 <__eerd_block_m328p>:
    3650:	dc 01       	movw	r26, r24
    3652:	cb 01       	movw	r24, r22

00003654 <__eerd_blraw_m328p>:
    3654:	fc 01       	movw	r30, r24
    3656:	f9 99       	sbic	0x1f, 1	; 31
    3658:	fe cf       	rjmp	.-4      	; 0x3656 <__eerd_blraw_m328p+0x2>
    365a:	06 c0       	rjmp	.+12     	; 0x3668 <__eerd_blraw_m328p+0x14>
    365c:	f2 bd       	out	0x22, r31	; 34
    365e:	e1 bd       	out	0x21, r30	; 33
    3660:	f8 9a       	sbi	0x1f, 0	; 31
    3662:	31 96       	adiw	r30, 0x01	; 1
    3664:	00 b4       	in	r0, 0x20	; 32
    3666:	0d 92       	st	X+, r0
    3668:	41 50       	subi	r20, 0x01	; 1
    366a:	50 40       	sbci	r21, 0x00	; 0
    366c:	b8 f7       	brcc	.-18     	; 0x365c <__eerd_blraw_m328p+0x8>
    366e:	08 95       	ret

00003670 <__eerd_byte_m328p>:
    3670:	f9 99       	sbic	0x1f, 1	; 31
    3672:	fe cf       	rjmp	.-4      	; 0x3670 <__eerd_byte_m328p>
    3674:	92 bd       	out	0x22, r25	; 34
    3676:	81 bd       	out	0x21, r24	; 33
    3678:	f8 9a       	sbi	0x1f, 0	; 31
    367a:	99 27       	eor	r25, r25
    367c:	80 b5       	in	r24, 0x20	; 32
    367e:	08 95       	ret

00003680 <__eewr_block_m328p>:
    3680:	dc 01       	movw	r26, r24
    3682:	cb 01       	movw	r24, r22
    3684:	03 c0       	rjmp	.+6      	; 0x368c <__eewr_block_m328p+0xc>
    3686:	2d 91       	ld	r18, X+
    3688:	0e 94 4b 1b 	call	0x3696	; 0x3696 <__eewr_r18_m328p>
    368c:	41 50       	subi	r20, 0x01	; 1
    368e:	50 40       	sbci	r21, 0x00	; 0
    3690:	d0 f7       	brcc	.-12     	; 0x3686 <__eewr_block_m328p+0x6>
    3692:	08 95       	ret

00003694 <__eewr_byte_m328p>:
    3694:	26 2f       	mov	r18, r22

00003696 <__eewr_r18_m328p>:
    3696:	f9 99       	sbic	0x1f, 1	; 31
    3698:	fe cf       	rjmp	.-4      	; 0x3696 <__eewr_r18_m328p>
    369a:	1f ba       	out	0x1f, r1	; 31
    369c:	92 bd       	out	0x22, r25	; 34
    369e:	81 bd       	out	0x21, r24	; 33
    36a0:	20 bd       	out	0x20, r18	; 32
    36a2:	0f b6       	in	r0, 0x3f	; 63
    36a4:	f8 94       	cli
    36a6:	fa 9a       	sbi	0x1f, 2	; 31
    36a8:	f9 9a       	sbi	0x1f, 1	; 31
    36aa:	0f be       	out	0x3f, r0	; 63
    36ac:	01 96       	adiw	r24, 0x01	; 1
    36ae:	08 95       	ret

000036b0 <isspace>:
    36b0:	91 11       	cpse	r25, r1
    36b2:	0c c1       	rjmp	.+536    	; 0x38cc <__ctype_isfalse>
    36b4:	80 32       	cpi	r24, 0x20	; 32
    36b6:	19 f0       	breq	.+6      	; 0x36be <isspace+0xe>
    36b8:	89 50       	subi	r24, 0x09	; 9
    36ba:	85 50       	subi	r24, 0x05	; 5
    36bc:	d0 f7       	brcc	.-12     	; 0x36b2 <isspace+0x2>
    36be:	08 95       	ret

000036c0 <strchr_P>:
    36c0:	fc 01       	movw	r30, r24
    36c2:	05 90       	lpm	r0, Z+
    36c4:	06 16       	cp	r0, r22
    36c6:	21 f0       	breq	.+8      	; 0x36d0 <strchr_P+0x10>
    36c8:	00 20       	and	r0, r0
    36ca:	d9 f7       	brne	.-10     	; 0x36c2 <strchr_P+0x2>
    36cc:	c0 01       	movw	r24, r0
    36ce:	08 95       	ret
    36d0:	31 97       	sbiw	r30, 0x01	; 1
    36d2:	cf 01       	movw	r24, r30
    36d4:	08 95       	ret

000036d6 <strnlen_P>:
    36d6:	fc 01       	movw	r30, r24
    36d8:	05 90       	lpm	r0, Z+
    36da:	61 50       	subi	r22, 0x01	; 1
    36dc:	70 40       	sbci	r23, 0x00	; 0
    36de:	01 10       	cpse	r0, r1
    36e0:	d8 f7       	brcc	.-10     	; 0x36d8 <strnlen_P+0x2>
    36e2:	80 95       	com	r24
    36e4:	90 95       	com	r25
    36e6:	8e 0f       	add	r24, r30
    36e8:	9f 1f       	adc	r25, r31
    36ea:	08 95       	ret

000036ec <strnlen>:
    36ec:	fc 01       	movw	r30, r24
    36ee:	61 50       	subi	r22, 0x01	; 1
    36f0:	70 40       	sbci	r23, 0x00	; 0
    36f2:	01 90       	ld	r0, Z+
    36f4:	01 10       	cpse	r0, r1
    36f6:	d8 f7       	brcc	.-10     	; 0x36ee <strnlen+0x2>
    36f8:	80 95       	com	r24
    36fa:	90 95       	com	r25
    36fc:	8e 0f       	add	r24, r30
    36fe:	9f 1f       	adc	r25, r31
    3700:	08 95       	ret

00003702 <fgetc>:
    3702:	cf 93       	push	r28
    3704:	df 93       	push	r29
    3706:	ec 01       	movw	r28, r24
    3708:	3b 81       	ldd	r19, Y+3	; 0x03
    370a:	30 ff       	sbrs	r19, 0
    370c:	34 c0       	rjmp	.+104    	; 0x3776 <fgetc+0x74>
    370e:	36 ff       	sbrs	r19, 6
    3710:	0a c0       	rjmp	.+20     	; 0x3726 <fgetc+0x24>
    3712:	3f 7b       	andi	r19, 0xBF	; 191
    3714:	3b 83       	std	Y+3, r19	; 0x03
    3716:	8e 81       	ldd	r24, Y+6	; 0x06
    3718:	9f 81       	ldd	r25, Y+7	; 0x07
    371a:	01 96       	adiw	r24, 0x01	; 1
    371c:	9f 83       	std	Y+7, r25	; 0x07
    371e:	8e 83       	std	Y+6, r24	; 0x06
    3720:	2a 81       	ldd	r18, Y+2	; 0x02
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	2a c0       	rjmp	.+84     	; 0x377a <fgetc+0x78>
    3726:	32 ff       	sbrs	r19, 2
    3728:	0f c0       	rjmp	.+30     	; 0x3748 <fgetc+0x46>
    372a:	e8 81       	ld	r30, Y
    372c:	f9 81       	ldd	r31, Y+1	; 0x01
    372e:	80 81       	ld	r24, Z
    3730:	99 27       	eor	r25, r25
    3732:	87 fd       	sbrc	r24, 7
    3734:	90 95       	com	r25
    3736:	00 97       	sbiw	r24, 0x00	; 0
    3738:	19 f4       	brne	.+6      	; 0x3740 <fgetc+0x3e>
    373a:	30 62       	ori	r19, 0x20	; 32
    373c:	3b 83       	std	Y+3, r19	; 0x03
    373e:	1b c0       	rjmp	.+54     	; 0x3776 <fgetc+0x74>
    3740:	31 96       	adiw	r30, 0x01	; 1
    3742:	f9 83       	std	Y+1, r31	; 0x01
    3744:	e8 83       	st	Y, r30
    3746:	0e c0       	rjmp	.+28     	; 0x3764 <fgetc+0x62>
    3748:	ea 85       	ldd	r30, Y+10	; 0x0a
    374a:	fb 85       	ldd	r31, Y+11	; 0x0b
    374c:	09 95       	icall
    374e:	97 ff       	sbrs	r25, 7
    3750:	09 c0       	rjmp	.+18     	; 0x3764 <fgetc+0x62>
    3752:	2b 81       	ldd	r18, Y+3	; 0x03
    3754:	01 96       	adiw	r24, 0x01	; 1
    3756:	11 f4       	brne	.+4      	; 0x375c <fgetc+0x5a>
    3758:	80 e1       	ldi	r24, 0x10	; 16
    375a:	01 c0       	rjmp	.+2      	; 0x375e <fgetc+0x5c>
    375c:	80 e2       	ldi	r24, 0x20	; 32
    375e:	82 2b       	or	r24, r18
    3760:	8b 83       	std	Y+3, r24	; 0x03
    3762:	09 c0       	rjmp	.+18     	; 0x3776 <fgetc+0x74>
    3764:	2e 81       	ldd	r18, Y+6	; 0x06
    3766:	3f 81       	ldd	r19, Y+7	; 0x07
    3768:	2f 5f       	subi	r18, 0xFF	; 255
    376a:	3f 4f       	sbci	r19, 0xFF	; 255
    376c:	3f 83       	std	Y+7, r19	; 0x07
    376e:	2e 83       	std	Y+6, r18	; 0x06
    3770:	9c 01       	movw	r18, r24
    3772:	33 27       	eor	r19, r19
    3774:	02 c0       	rjmp	.+4      	; 0x377a <fgetc+0x78>
    3776:	2f ef       	ldi	r18, 0xFF	; 255
    3778:	3f ef       	ldi	r19, 0xFF	; 255
    377a:	c9 01       	movw	r24, r18
    377c:	df 91       	pop	r29
    377e:	cf 91       	pop	r28
    3780:	08 95       	ret

00003782 <fputc>:
    3782:	0f 93       	push	r16
    3784:	1f 93       	push	r17
    3786:	cf 93       	push	r28
    3788:	df 93       	push	r29
    378a:	8c 01       	movw	r16, r24
    378c:	eb 01       	movw	r28, r22
    378e:	8b 81       	ldd	r24, Y+3	; 0x03
    3790:	81 fd       	sbrc	r24, 1
    3792:	03 c0       	rjmp	.+6      	; 0x379a <fputc+0x18>
    3794:	0f ef       	ldi	r16, 0xFF	; 255
    3796:	1f ef       	ldi	r17, 0xFF	; 255
    3798:	1a c0       	rjmp	.+52     	; 0x37ce <fputc+0x4c>
    379a:	82 ff       	sbrs	r24, 2
    379c:	0d c0       	rjmp	.+26     	; 0x37b8 <fputc+0x36>
    379e:	2e 81       	ldd	r18, Y+6	; 0x06
    37a0:	3f 81       	ldd	r19, Y+7	; 0x07
    37a2:	8c 81       	ldd	r24, Y+4	; 0x04
    37a4:	9d 81       	ldd	r25, Y+5	; 0x05
    37a6:	28 17       	cp	r18, r24
    37a8:	39 07       	cpc	r19, r25
    37aa:	64 f4       	brge	.+24     	; 0x37c4 <fputc+0x42>
    37ac:	e8 81       	ld	r30, Y
    37ae:	f9 81       	ldd	r31, Y+1	; 0x01
    37b0:	01 93       	st	Z+, r16
    37b2:	f9 83       	std	Y+1, r31	; 0x01
    37b4:	e8 83       	st	Y, r30
    37b6:	06 c0       	rjmp	.+12     	; 0x37c4 <fputc+0x42>
    37b8:	e8 85       	ldd	r30, Y+8	; 0x08
    37ba:	f9 85       	ldd	r31, Y+9	; 0x09
    37bc:	80 2f       	mov	r24, r16
    37be:	09 95       	icall
    37c0:	89 2b       	or	r24, r25
    37c2:	41 f7       	brne	.-48     	; 0x3794 <fputc+0x12>
    37c4:	8e 81       	ldd	r24, Y+6	; 0x06
    37c6:	9f 81       	ldd	r25, Y+7	; 0x07
    37c8:	01 96       	adiw	r24, 0x01	; 1
    37ca:	9f 83       	std	Y+7, r25	; 0x07
    37cc:	8e 83       	std	Y+6, r24	; 0x06
    37ce:	c8 01       	movw	r24, r16
    37d0:	df 91       	pop	r29
    37d2:	cf 91       	pop	r28
    37d4:	1f 91       	pop	r17
    37d6:	0f 91       	pop	r16
    37d8:	08 95       	ret

000037da <ungetc>:
    37da:	fb 01       	movw	r30, r22
    37dc:	23 81       	ldd	r18, Z+3	; 0x03
    37de:	20 ff       	sbrs	r18, 0
    37e0:	13 c0       	rjmp	.+38     	; 0x3808 <ungetc+0x2e>
    37e2:	26 fd       	sbrc	r18, 6
    37e4:	11 c0       	rjmp	.+34     	; 0x3808 <ungetc+0x2e>
    37e6:	8f 3f       	cpi	r24, 0xFF	; 255
    37e8:	3f ef       	ldi	r19, 0xFF	; 255
    37ea:	93 07       	cpc	r25, r19
    37ec:	69 f0       	breq	.+26     	; 0x3808 <ungetc+0x2e>
    37ee:	82 83       	std	Z+2, r24	; 0x02
    37f0:	2f 7d       	andi	r18, 0xDF	; 223
    37f2:	20 64       	ori	r18, 0x40	; 64
    37f4:	23 83       	std	Z+3, r18	; 0x03
    37f6:	26 81       	ldd	r18, Z+6	; 0x06
    37f8:	37 81       	ldd	r19, Z+7	; 0x07
    37fa:	21 50       	subi	r18, 0x01	; 1
    37fc:	31 09       	sbc	r19, r1
    37fe:	37 83       	std	Z+7, r19	; 0x07
    3800:	26 83       	std	Z+6, r18	; 0x06
    3802:	9c 01       	movw	r18, r24
    3804:	33 27       	eor	r19, r19
    3806:	02 c0       	rjmp	.+4      	; 0x380c <ungetc+0x32>
    3808:	2f ef       	ldi	r18, 0xFF	; 255
    380a:	3f ef       	ldi	r19, 0xFF	; 255
    380c:	c9 01       	movw	r24, r18
    380e:	08 95       	ret

00003810 <__ultoa_invert>:
    3810:	fa 01       	movw	r30, r20
    3812:	aa 27       	eor	r26, r26
    3814:	28 30       	cpi	r18, 0x08	; 8
    3816:	51 f1       	breq	.+84     	; 0x386c <__ultoa_invert+0x5c>
    3818:	20 31       	cpi	r18, 0x10	; 16
    381a:	81 f1       	breq	.+96     	; 0x387c <__ultoa_invert+0x6c>
    381c:	e8 94       	clt
    381e:	6f 93       	push	r22
    3820:	6e 7f       	andi	r22, 0xFE	; 254
    3822:	6e 5f       	subi	r22, 0xFE	; 254
    3824:	7f 4f       	sbci	r23, 0xFF	; 255
    3826:	8f 4f       	sbci	r24, 0xFF	; 255
    3828:	9f 4f       	sbci	r25, 0xFF	; 255
    382a:	af 4f       	sbci	r26, 0xFF	; 255
    382c:	b1 e0       	ldi	r27, 0x01	; 1
    382e:	3e d0       	rcall	.+124    	; 0x38ac <__ultoa_invert+0x9c>
    3830:	b4 e0       	ldi	r27, 0x04	; 4
    3832:	3c d0       	rcall	.+120    	; 0x38ac <__ultoa_invert+0x9c>
    3834:	67 0f       	add	r22, r23
    3836:	78 1f       	adc	r23, r24
    3838:	89 1f       	adc	r24, r25
    383a:	9a 1f       	adc	r25, r26
    383c:	a1 1d       	adc	r26, r1
    383e:	68 0f       	add	r22, r24
    3840:	79 1f       	adc	r23, r25
    3842:	8a 1f       	adc	r24, r26
    3844:	91 1d       	adc	r25, r1
    3846:	a1 1d       	adc	r26, r1
    3848:	6a 0f       	add	r22, r26
    384a:	71 1d       	adc	r23, r1
    384c:	81 1d       	adc	r24, r1
    384e:	91 1d       	adc	r25, r1
    3850:	a1 1d       	adc	r26, r1
    3852:	20 d0       	rcall	.+64     	; 0x3894 <__ultoa_invert+0x84>
    3854:	09 f4       	brne	.+2      	; 0x3858 <__ultoa_invert+0x48>
    3856:	68 94       	set
    3858:	3f 91       	pop	r19
    385a:	2a e0       	ldi	r18, 0x0A	; 10
    385c:	26 9f       	mul	r18, r22
    385e:	11 24       	eor	r1, r1
    3860:	30 19       	sub	r19, r0
    3862:	30 5d       	subi	r19, 0xD0	; 208
    3864:	31 93       	st	Z+, r19
    3866:	de f6       	brtc	.-74     	; 0x381e <__ultoa_invert+0xe>
    3868:	cf 01       	movw	r24, r30
    386a:	08 95       	ret
    386c:	46 2f       	mov	r20, r22
    386e:	47 70       	andi	r20, 0x07	; 7
    3870:	40 5d       	subi	r20, 0xD0	; 208
    3872:	41 93       	st	Z+, r20
    3874:	b3 e0       	ldi	r27, 0x03	; 3
    3876:	0f d0       	rcall	.+30     	; 0x3896 <__ultoa_invert+0x86>
    3878:	c9 f7       	brne	.-14     	; 0x386c <__ultoa_invert+0x5c>
    387a:	f6 cf       	rjmp	.-20     	; 0x3868 <__ultoa_invert+0x58>
    387c:	46 2f       	mov	r20, r22
    387e:	4f 70       	andi	r20, 0x0F	; 15
    3880:	40 5d       	subi	r20, 0xD0	; 208
    3882:	4a 33       	cpi	r20, 0x3A	; 58
    3884:	18 f0       	brcs	.+6      	; 0x388c <__ultoa_invert+0x7c>
    3886:	49 5d       	subi	r20, 0xD9	; 217
    3888:	31 fd       	sbrc	r19, 1
    388a:	40 52       	subi	r20, 0x20	; 32
    388c:	41 93       	st	Z+, r20
    388e:	02 d0       	rcall	.+4      	; 0x3894 <__ultoa_invert+0x84>
    3890:	a9 f7       	brne	.-22     	; 0x387c <__ultoa_invert+0x6c>
    3892:	ea cf       	rjmp	.-44     	; 0x3868 <__ultoa_invert+0x58>
    3894:	b4 e0       	ldi	r27, 0x04	; 4
    3896:	a6 95       	lsr	r26
    3898:	97 95       	ror	r25
    389a:	87 95       	ror	r24
    389c:	77 95       	ror	r23
    389e:	67 95       	ror	r22
    38a0:	ba 95       	dec	r27
    38a2:	c9 f7       	brne	.-14     	; 0x3896 <__ultoa_invert+0x86>
    38a4:	00 97       	sbiw	r24, 0x00	; 0
    38a6:	61 05       	cpc	r22, r1
    38a8:	71 05       	cpc	r23, r1
    38aa:	08 95       	ret
    38ac:	9b 01       	movw	r18, r22
    38ae:	ac 01       	movw	r20, r24
    38b0:	0a 2e       	mov	r0, r26
    38b2:	06 94       	lsr	r0
    38b4:	57 95       	ror	r21
    38b6:	47 95       	ror	r20
    38b8:	37 95       	ror	r19
    38ba:	27 95       	ror	r18
    38bc:	ba 95       	dec	r27
    38be:	c9 f7       	brne	.-14     	; 0x38b2 <__ultoa_invert+0xa2>
    38c0:	62 0f       	add	r22, r18
    38c2:	73 1f       	adc	r23, r19
    38c4:	84 1f       	adc	r24, r20
    38c6:	95 1f       	adc	r25, r21
    38c8:	a0 1d       	adc	r26, r0
    38ca:	08 95       	ret

000038cc <__ctype_isfalse>:
    38cc:	99 27       	eor	r25, r25
    38ce:	88 27       	eor	r24, r24

000038d0 <__ctype_istrue>:
    38d0:	08 95       	ret

000038d2 <__prologue_saves__>:
    38d2:	2f 92       	push	r2
    38d4:	3f 92       	push	r3
    38d6:	4f 92       	push	r4
    38d8:	5f 92       	push	r5
    38da:	6f 92       	push	r6
    38dc:	7f 92       	push	r7
    38de:	8f 92       	push	r8
    38e0:	9f 92       	push	r9
    38e2:	af 92       	push	r10
    38e4:	bf 92       	push	r11
    38e6:	cf 92       	push	r12
    38e8:	df 92       	push	r13
    38ea:	ef 92       	push	r14
    38ec:	ff 92       	push	r15
    38ee:	0f 93       	push	r16
    38f0:	1f 93       	push	r17
    38f2:	cf 93       	push	r28
    38f4:	df 93       	push	r29
    38f6:	cd b7       	in	r28, 0x3d	; 61
    38f8:	de b7       	in	r29, 0x3e	; 62
    38fa:	ca 1b       	sub	r28, r26
    38fc:	db 0b       	sbc	r29, r27
    38fe:	0f b6       	in	r0, 0x3f	; 63
    3900:	f8 94       	cli
    3902:	de bf       	out	0x3e, r29	; 62
    3904:	0f be       	out	0x3f, r0	; 63
    3906:	cd bf       	out	0x3d, r28	; 61
    3908:	09 94       	ijmp

0000390a <__epilogue_restores__>:
    390a:	2a 88       	ldd	r2, Y+18	; 0x12
    390c:	39 88       	ldd	r3, Y+17	; 0x11
    390e:	48 88       	ldd	r4, Y+16	; 0x10
    3910:	5f 84       	ldd	r5, Y+15	; 0x0f
    3912:	6e 84       	ldd	r6, Y+14	; 0x0e
    3914:	7d 84       	ldd	r7, Y+13	; 0x0d
    3916:	8c 84       	ldd	r8, Y+12	; 0x0c
    3918:	9b 84       	ldd	r9, Y+11	; 0x0b
    391a:	aa 84       	ldd	r10, Y+10	; 0x0a
    391c:	b9 84       	ldd	r11, Y+9	; 0x09
    391e:	c8 84       	ldd	r12, Y+8	; 0x08
    3920:	df 80       	ldd	r13, Y+7	; 0x07
    3922:	ee 80       	ldd	r14, Y+6	; 0x06
    3924:	fd 80       	ldd	r15, Y+5	; 0x05
    3926:	0c 81       	ldd	r16, Y+4	; 0x04
    3928:	1b 81       	ldd	r17, Y+3	; 0x03
    392a:	aa 81       	ldd	r26, Y+2	; 0x02
    392c:	b9 81       	ldd	r27, Y+1	; 0x01
    392e:	ce 0f       	add	r28, r30
    3930:	d1 1d       	adc	r29, r1
    3932:	0f b6       	in	r0, 0x3f	; 63
    3934:	f8 94       	cli
    3936:	de bf       	out	0x3e, r29	; 62
    3938:	0f be       	out	0x3f, r0	; 63
    393a:	cd bf       	out	0x3d, r28	; 61
    393c:	ed 01       	movw	r28, r26
    393e:	08 95       	ret

00003940 <_exit>:
    3940:	f8 94       	cli

00003942 <__stop_program>:
    3942:	ff cf       	rjmp	.-2      	; 0x3942 <__stop_program>
